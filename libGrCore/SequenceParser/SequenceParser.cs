#pragma warning disable CS0162
/* Generated By:CSharpCC: Do not edit this line. SequenceParser.cs */
    namespace de.unika.ipd.grGen.libGr.sequenceParser {

    using System;
    using System.IO;
    using System.Text;
    using System.Collections.Generic;
    using de.unika.ipd.grGen.libGr;

    /// <summary>
    /// A parser class for xgrs strings.
    /// </summary>
    public class SequenceParser : SequenceParserConstants {
        /// <summary>
        /// The environment setting the context for the sequence parser, containing the entitites and types that can be referenced
        /// </summary>
        SequenceParserEnvironment env;

        /// <summary>
        /// Symbol table of the sequence variables, maps from name to the prefixed(by block nesting) name and the type;
        /// a graph-global variable maps to type "", a sequence-local to its type
        /// </summary>
        SymbolTable varDecls;

        /// <summary>
        /// Stores the warnings which occur during parsing
        /// </summary>
        List<String> warnings;

        /// <summary>
        /// Parses a given string in xgrs syntax and builds a Sequence object. Used for the interpreted xgrs.
        /// </summary>
        /// <param name="sequenceStr">The string representing a xgrs (e.g. "test[7] &amp;&amp; (chicken+ || egg)*")</param>
        /// <param name="env">The environment containing the entities and types that can be referenced.</param>
        /// <param name="warnings">A list which receives the warnings generated during parsing.</param>
        /// <returns>The sequence object according to sequenceStr.</returns>
        /// <exception cref="ParseException">Thrown when a syntax error was found in the string.</exception>
        /// <exception cref="SequenceParserException">Thrown when a rule is used with the wrong number of arguments
        /// or return parameters.</exception>
        public static Sequence ParseSequence(String sequenceStr, SequenceParserEnvironmentInterpreted env, List<String> warnings)
        {
            SequenceParser parser = new SequenceParser(new StringReader(sequenceStr));
            parser.env = env;
            parser.varDecls = new SymbolTable();
            parser.varDecls.PushFirstScope(null);
            parser.warnings = warnings;
            Sequence seq = parser.XGRS();
            SequenceCheckingEnvironment checkEnv = new SequenceCheckingEnvironmentInterpreted(env.Actions);
            seq.Check(checkEnv);
            return seq;
        }

        /// <summary>
        /// Parses a given string in xgrs exp syntax and builds a SequenceExpression object. 
        /// Used for expression evaluation, and the interpreted if clauses for conditional watchpoint debugging.
        /// </summary>
        /// <param name="sequenceExprStr">The string representing a xgrs expression (e.g. "func() &amp;&amp; (st[e]==0 || var + 1 &lt; 42)")</param>
        /// <param name="predefinedVariables">A map from variables to types giving the predefined this variable for the sequence expression.</param>
        /// <param name="env">The environment containing the entities and types that can be referenced.</param>
        /// <param name="warnings">A list which receives the warnings generated during parsing.</param>
        /// <returns>The sequence expression object according to sequenceExprStr.</returns>
        /// <exception cref="ParseException">Thrown when a syntax error was found in the string.</exception>
        /// <exception cref="SequenceParserException">Thrown when a rule is used with the wrong number of arguments
        /// or return parameters.</exception>
        public static SequenceExpression ParseSequenceExpression(String sequenceExprStr, Dictionary<String, String> predefinedVariables, SequenceParserEnvironmentInterpreted env, List<String> warnings)
        {
            SequenceParser parser = new SequenceParser(new StringReader(sequenceExprStr));
            parser.env = env;
            parser.varDecls = new SymbolTable();
            parser.varDecls.PushFirstScope(predefinedVariables);
            parser.warnings = warnings;
            SequenceExpression seqExpr = parser.Expression();
            SequenceCheckingEnvironment checkEnv = new SequenceCheckingEnvironmentInterpreted(env.Actions);
            seqExpr.Check(checkEnv);
            return seqExpr;
        }

        /// <summary>
        /// Parses a given string in sequence definition syntax and builds a SequenceDefinition object. Used for the interpreted xgrs.
        /// </summary>
        /// <param name="sequenceStr">The string representing a xgrs (e.g. "test[7] &amp;&amp; (chicken+ || egg)*")</param>
        /// <param name="env">The environment containing the entities and types that can be referenced.</param>
        /// <param name="warnings">A list which receives the warnings generated during parsing.</param>
        /// <returns>The sequence object according to sequenceStr.</returns>
        /// <exception cref="ParseException">Thrown when a syntax error was found in the string.</exception>
        /// <exception cref="SequenceParserException">Thrown when a rule is used with the wrong number of arguments
        /// or return parameters.</exception>
        public static ISequenceDefinition ParseSequenceDefinition(String sequenceStr, SequenceParserEnvironmentInterpreted env, List<String> warnings)
        {
            SequenceParser parser = new SequenceParser(new StringReader(sequenceStr));
            parser.env = env;
            parser.varDecls = new SymbolTable();
            parser.varDecls.PushFirstScope(null);
            parser.warnings = warnings;
            SequenceDefinition seq = parser.defXGRS();
            SequenceCheckingEnvironment checkEnv = new SequenceCheckingEnvironmentInterpreted(env.Actions);
            seq.Check(checkEnv);
            return seq;
        }

        /// <summary>
        /// Parses a given string in xgrs syntax and builds a Sequence object. Used for the compiled xgrs.
        /// </summary>
        /// <param name="sequenceStr">The string representing a xgrs (e.g. "test[7] &amp;&amp; (chicken+ || egg)*")</param>
        /// <param name="env">The environment containing the entities and types that can be referenced.</param>
        /// <param name="predefinedVariables">A map from variables to types giving the parameters to the sequence, i.e. predefined variables.</param>
        /// <param name="warnings">A list which receives the warnings generated during parsing.</param>
        /// <returns>The sequence object according to sequenceStr.</returns>
        /// <exception cref="ParseException">Thrown when a syntax error was found in the string.</exception>
        /// <exception cref="SequenceParserException">Thrown when a rule is used with the wrong number of arguments
        /// or return parameters.</exception>
        public static Sequence ParseSequence(String sequenceStr, SequenceParserEnvironmentCompiled env,
                Dictionary<String, String> predefinedVariables, List<String> warnings)
        {
            SequenceParser parser = new SequenceParser(new StringReader(sequenceStr));
            parser.env = env;
            parser.varDecls = new SymbolTable();
            parser.varDecls.PushFirstScope(predefinedVariables);
            parser.warnings = warnings;
            Sequence seq = parser.XGRS();
            // check will be done by LGSPSequenceChecker from lgsp code afterwards outside of this libGr code
            return seq;
        }

  public String Word() {
    Token tok;
    tok = mcc_consume_token(WORD);
        {return tok.image;}
    throw new Exception("Missing return statement in function");
  }

  public String TextString() {
    Token tok;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case DOUBLEQUOTEDTEXT:
      tok = mcc_consume_token(DOUBLEQUOTEDTEXT);
      break;
    case SINGLEQUOTEDTEXT:
      tok = mcc_consume_token(SINGLEQUOTEDTEXT);
      break;
    default:
      mcc_la1[0] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
        {return tok.image;}
    throw new Exception("Missing return statement in function");
  }

  public String Text() {
    Token tok;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case DOUBLEQUOTEDTEXT:
      tok = mcc_consume_token(DOUBLEQUOTEDTEXT);
      break;
    case SINGLEQUOTEDTEXT:
      tok = mcc_consume_token(SINGLEQUOTEDTEXT);
      break;
    case WORD:
      tok = mcc_consume_token(WORD);
      break;
    default:
      mcc_la1[1] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
        {return tok.image;}
    throw new Exception("Missing return statement in function");
  }

  public int Number() {
    Token t;
    int val;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case NUMBER:
      t = mcc_consume_token(NUMBER);
        if(!Int32.TryParse(t.image, out val))
            {throw new ParseException("Integer expected but found: \"" + t + "\" (" + t.kind + ")");}
        {return val;}
      break;
    case HEXNUMBER:
      t = mcc_consume_token(HEXNUMBER);
        {return Int32.Parse(t.image.Substring("0x".Length), System.Globalization.NumberStyles.HexNumber);}
      break;
    default:
      mcc_la1[2] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    throw new Exception("Missing return statement in function");
  }

  public object NumberOrHexNumber() {
    Token tok;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case NUMBER:
      tok = mcc_consume_token(NUMBER);
        {return Convert.ToInt32(tok.image);}
      break;
    case NUMBER_BYTE:
      tok = mcc_consume_token(NUMBER_BYTE);
        {return Convert.ToSByte(RemoveTypeSuffix(tok.image));}
      break;
    case NUMBER_SHORT:
      tok = mcc_consume_token(NUMBER_SHORT);
        {return Convert.ToInt16(RemoveTypeSuffix(tok.image));}
      break;
    case NUMBER_LONG:
      tok = mcc_consume_token(NUMBER_LONG);
        {return Convert.ToInt64(RemoveTypeSuffix(tok.image));}
      break;
    case HEXNUMBER:
      tok = mcc_consume_token(HEXNUMBER);
        {return Int32.Parse(tok.image.Substring("0x".Length), System.Globalization.NumberStyles.HexNumber);}
      break;
    case HEXNUMBER_BYTE:
      tok = mcc_consume_token(HEXNUMBER_BYTE);
        {return SByte.Parse(RemoveTypeSuffix(tok.image.Substring("0x".Length)), System.Globalization.NumberStyles.HexNumber);}
      break;
    case HEXNUMBER_SHORT:
      tok = mcc_consume_token(HEXNUMBER_SHORT);
        {return Int16.Parse(RemoveTypeSuffix(tok.image.Substring("0x".Length)), System.Globalization.NumberStyles.HexNumber);}
      break;
    case HEXNUMBER_LONG:
      tok = mcc_consume_token(HEXNUMBER_LONG);
        {return Int64.Parse(RemoveTypeSuffix(tok.image.Substring("0x".Length)), System.Globalization.NumberStyles.HexNumber);}
      break;
    default:
      mcc_la1[3] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    throw new Exception("Missing return statement in function");
  }

  public float FloatNumber() {
    Token t;
    float val;
    t = mcc_consume_token(NUMFLOAT);
        // Remove 'F' from the end of the image to parse it
        if(!float.TryParse(t.image.Substring(0, t.image.Length - 1), System.Globalization.NumberStyles.Float,
                System.Globalization.CultureInfo.InvariantCulture, out val))
            {throw new ParseException("float expected but found: \"" + t + "\" (" + t.kind + ")");}
        {return val;}
    throw new Exception("Missing return statement in function");
  }

  public double DoubleNumber() {
    Token t;
    String img;
    double val;
    t = mcc_consume_token(NUMDOUBLE);
        // Remove optional 'D' from the end of the image to parse it if necessary
        if(t.image[t.image.Length - 1] == 'd' || t.image[t.image.Length - 1] == 'D')
            img = t.image.Substring(0, t.image.Length - 1);
        else
            img = t.image;
        if(!double.TryParse(img, System.Globalization.NumberStyles.Float,
                System.Globalization.CultureInfo.InvariantCulture, out val))
            {throw new ParseException("double expected but found: \"" + t + "\" (" + t.kind + ")");}
        {return val;}
    throw new Exception("Missing return statement in function");
  }

  public void Argument(List<SequenceExpression> argExprs) {
    SequenceExpression expr;
    expr = Expression();
        argExprs.Add(expr);
  }

  public object Constant() {
    object constant = null;
    string type, value, package, packageOrType, typeOrValue;
    EnumAttributeType attrType;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case NUMBER:
    case NUMBER_BYTE:
    case NUMBER_SHORT:
    case NUMBER_LONG:
    case HEXNUMBER:
    case HEXNUMBER_BYTE:
    case HEXNUMBER_SHORT:
    case HEXNUMBER_LONG:
      constant = NumberOrHexNumber();
      break;
    case NUMFLOAT:
      constant = FloatNumber();
      break;
    case NUMDOUBLE:
      constant = DoubleNumber();
      break;
    case DOUBLEQUOTEDTEXT:
    case SINGLEQUOTEDTEXT:
      constant = TextString();
      break;
    case TRUE:
      mcc_consume_token(TRUE);
                 constant = true;
      break;
    case FALSE:
      mcc_consume_token(FALSE);
                  constant = false;
      break;
    case NULL:
      mcc_consume_token(NULL);
                 constant = null;
      break;
    default:
      mcc_la1[4] = mcc_gen;
      if (mcc_2_1(4)) {
        package = Word();
        mcc_consume_token(DOUBLECOLON);
        type = Word();
        mcc_consume_token(DOUBLECOLON);
        value = Word();
            attrType = TypesHelper.GetEnumAttributeType(package + "::" + type, env.Model);
            if(attrType != null)
                constant = Enum.Parse(attrType.EnumType, value);
            if(constant == null)
                {throw new ParseException("Invalid constant \"" + package + "::" + type + "::" + value + "\"!");}
      } else if (mcc_2_2(2)) {
        packageOrType = Word();
        mcc_consume_token(DOUBLECOLON);
        typeOrValue = Word();
            package = packageOrType;
            type = typeOrValue;
            constant = TypesHelper.GetInheritanceType(package + "::" + type, env.Model);
            if(constant == null)
            {
                type = packageOrType;
                value = typeOrValue;
                attrType = TypesHelper.GetEnumAttributeType(type, env.Model);
                if(attrType != null)
                    constant = Enum.Parse(attrType.EnumType, value);
            }
            if(constant == null)
                {throw new ParseException("Invalid constant \"" + packageOrType + "::" + typeOrValue + "\"!");}
      } else if (GetToken(1).kind == WORD && varDecls.Lookup(GetToken(1).image) == null
                      && TypesHelper.GetInheritanceType(GetToken(1).image, env.Model) != null) {
        type = Word();
            constant = TypesHelper.GetInheritanceType(type, env.Model);
      } else {
        mcc_consume_token(-1);
        throw new ParseException();
      }
      break;
    }
        {return constant;}
    throw new Exception("Missing return statement in function");
  }

  public SequenceExpression InitMatchClassExpr() {
    SequenceExpression res = null;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case NEW:
      mcc_consume_token(NEW);
      break;
    default:
      mcc_la1[5] = mcc_gen;
      ;
      break;
    }
    res = InitMatchClassExprCont();
        {return res;}
    throw new Exception("Missing return statement in function");
  }

  public SequenceExpression InitMatchClassExprCont() {
    string matchClassPackage = null;
    string matchClassName = null;
    if (GetToken(1).kind == WORD && GetToken(1).image == "match") {

    } else {
      mcc_consume_token(-1);
      throw new ParseException();
    }
    Word();
    mcc_consume_token(LANGLE);
    mcc_consume_token(CLASS);
    if (mcc_2_3(2)) {
      matchClassPackage = Word();
      mcc_consume_token(DOUBLECOLON);
    } else {
      ;
    }
    matchClassName = Word();
    mcc_consume_token(RANGLE);
    mcc_consume_token(LPARENTHESIS);
    mcc_consume_token(RPARENTHESIS);
        {return new SequenceExpressionMatchClassConstructor(env.GetPackagePrefixedMatchClassName(matchClassName, matchClassPackage));}
    throw new Exception("Missing return statement in function");
  }

  public SequenceExpression InitObjectExpr() {
    String type;
    SequenceExpression expr = null;
    mcc_consume_token(NEW);
    type = TypeNonGeneric();
    expr = ExpressionInitObjectCont(type);
        {return expr;}
    throw new Exception("Missing return statement in function");
  }

  public SequenceExpression InitContainerExpr() {
    SequenceExpression res = null;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case NEW:
      mcc_consume_token(NEW);
      break;
    default:
      mcc_la1[6] = mcc_gen;
      ;
      break;
    }
    res = InitContainerExprCont();
        {return res;}
    throw new Exception("Missing return statement in function");
  }

  public SequenceExpression InitContainerExprCont() {
    string typeName, typeNameDst;
    List<SequenceExpression> srcItems = null;
    List<SequenceExpression> dstItems = null;
    SequenceExpression src = null, dst = null, value = null;
    if (GetToken(1).kind == WORD && GetToken(1).image == "set") {
      if (mcc_2_4(2147483647)) {
        Word();
        mcc_consume_token(LANGLE);
        typeName = TypeNonGeneric();
        mcc_consume_token(RANGLE);
      } else if (mcc_2_5(2147483647) && (GetToken(3).kind == WORD && GetToken(3).image == "match")) {
        Word();
        mcc_consume_token(LANGLE);
        typeName = MatchTypeInContainerType();
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case RANGLE:
          mcc_consume_token(RANGLE);
          mcc_consume_token(RANGLE);
          break;
        case RRANGLE:
          mcc_consume_token(RRANGLE);
          break;
        default:
          mcc_la1[7] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
      } else {
        mcc_consume_token(-1);
        throw new ParseException();
      }
          srcItems = new List<SequenceExpression>();
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case LBRACE:
        mcc_consume_token(LBRACE);
        if (mcc_2_6(1)) {
          src = Expression();
                                srcItems.Add(src);
          while (true) {
            switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
            case COMMA:
              ;
              break;
            default:
              mcc_la1[8] = mcc_gen;
              goto label_1;
            }
            mcc_consume_token(COMMA);
            src = Expression();
                                         srcItems.Add(src);
          }label_1: ;
          
        } else {
          ;
        }
        mcc_consume_token(RBRACE);
            {return new SequenceExpressionSetConstructor(typeName, srcItems.ToArray());}
        break;
      case LPARENTHESIS:
        mcc_consume_token(LPARENTHESIS);
        value = Expression();
        mcc_consume_token(RPARENTHESIS);
            {return new SequenceExpressionSetCopyConstructor(typeName, value);}
        break;
      default:
        mcc_la1[9] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    } else if (GetToken(1).kind == WORD && GetToken(1).image == "map") {
      if (mcc_2_7(2147483647)) {
        Word();
        mcc_consume_token(LANGLE);
        typeName = TypeNonGeneric();
        mcc_consume_token(COMMA);
        typeNameDst = TypeNonGeneric();
        mcc_consume_token(RANGLE);
      } else if (mcc_2_8(2147483647) && (GetToken(5).kind == WORD && GetToken(5).image == "match")) {
        Word();
        mcc_consume_token(LANGLE);
        typeName = Word();
        mcc_consume_token(COMMA);
        typeNameDst = MatchTypeInContainerType();
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case RANGLE:
          mcc_consume_token(RANGLE);
          mcc_consume_token(RANGLE);
          break;
        case RRANGLE:
          mcc_consume_token(RRANGLE);
          break;
        default:
          mcc_la1[10] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
      } else {
        mcc_consume_token(-1);
        throw new ParseException();
      }
          srcItems = new List<SequenceExpression>(); dstItems = new List<SequenceExpression>();
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case LBRACE:
        mcc_consume_token(LBRACE);
        if (mcc_2_9(1)) {
          src = Expression();
          mcc_consume_token(ARROW);
          dst = Expression();
                                                      srcItems.Add(src); dstItems.Add(dst);
          while (true) {
            switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
            case COMMA:
              ;
              break;
            default:
              mcc_la1[11] = mcc_gen;
              goto label_2;
            }
            mcc_consume_token(COMMA);
            src = Expression();
            mcc_consume_token(ARROW);
            dst = Expression();
                                                               srcItems.Add(src); dstItems.Add(dst);
          }label_2: ;
          
        } else {
          ;
        }
        mcc_consume_token(RBRACE);
            {return new SequenceExpressionMapConstructor(typeName, typeNameDst, srcItems.ToArray(), dstItems.ToArray());}
        break;
      case LPARENTHESIS:
        mcc_consume_token(LPARENTHESIS);
        value = Expression();
        mcc_consume_token(RPARENTHESIS);
            {return new SequenceExpressionMapCopyConstructor(typeName, typeNameDst, value);}
        break;
      default:
        mcc_la1[12] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    } else if (GetToken(1).kind == WORD && GetToken(1).image == "array") {
      if (mcc_2_10(2147483647)) {
        Word();
        mcc_consume_token(LANGLE);
        typeName = TypeNonGeneric();
        mcc_consume_token(RANGLE);
      } else if (mcc_2_11(2147483647) && (GetToken(3).kind == WORD && GetToken(3).image == "match")) {
        Word();
        mcc_consume_token(LANGLE);
        typeName = MatchTypeInContainerType();
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case RANGLE:
          mcc_consume_token(RANGLE);
          mcc_consume_token(RANGLE);
          break;
        case RRANGLE:
          mcc_consume_token(RRANGLE);
          break;
        default:
          mcc_la1[13] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
      } else {
        mcc_consume_token(-1);
        throw new ParseException();
      }
          srcItems = new List<SequenceExpression>();
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case LBOXBRACKET:
        mcc_consume_token(LBOXBRACKET);
        if (mcc_2_12(1)) {
          src = Expression();
                                srcItems.Add(src);
          while (true) {
            switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
            case COMMA:
              ;
              break;
            default:
              mcc_la1[14] = mcc_gen;
              goto label_3;
            }
            mcc_consume_token(COMMA);
            src = Expression();
                                         srcItems.Add(src);
          }label_3: ;
          
        } else {
          ;
        }
        mcc_consume_token(RBOXBRACKET);
            {return new SequenceExpressionArrayConstructor(typeName, srcItems.ToArray());}
        break;
      case LPARENTHESIS:
        mcc_consume_token(LPARENTHESIS);
        value = Expression();
        mcc_consume_token(RPARENTHESIS);
            {return new SequenceExpressionArrayCopyConstructor(typeName, value);}
        break;
      default:
        mcc_la1[15] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    } else if (GetToken(1).kind == WORD && GetToken(1).image == "deque") {
      if (mcc_2_13(2147483647)) {
        Word();
        mcc_consume_token(LANGLE);
        typeName = TypeNonGeneric();
        mcc_consume_token(RANGLE);
      } else if (mcc_2_14(2147483647) && (GetToken(3).kind == WORD && GetToken(3).image == "match")) {
        Word();
        mcc_consume_token(LANGLE);
        typeName = MatchTypeInContainerType();
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case RANGLE:
          mcc_consume_token(RANGLE);
          mcc_consume_token(RANGLE);
          break;
        case RRANGLE:
          mcc_consume_token(RRANGLE);
          break;
        default:
          mcc_la1[16] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
      } else {
        mcc_consume_token(-1);
        throw new ParseException();
      }
          srcItems = new List<SequenceExpression>();
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case LBOXBRACKET:
        mcc_consume_token(LBOXBRACKET);
        if (mcc_2_15(1)) {
          src = Expression();
                                srcItems.Add(src);
          while (true) {
            switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
            case COMMA:
              ;
              break;
            default:
              mcc_la1[17] = mcc_gen;
              goto label_4;
            }
            mcc_consume_token(COMMA);
            src = Expression();
                                         srcItems.Add(src);
          }label_4: ;
          
        } else {
          ;
        }
        mcc_consume_token(RBOXBRACKET);
            {return new SequenceExpressionDequeConstructor(typeName, srcItems.ToArray());}
        break;
      case LPARENTHESIS:
        mcc_consume_token(LPARENTHESIS);
        value = Expression();
        mcc_consume_token(RPARENTHESIS);
            {return new SequenceExpressionDequeCopyConstructor(typeName, value);}
        break;
      default:
        mcc_la1[18] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    } else {
      mcc_consume_token(-1);
      throw new ParseException();
    }
    throw new Exception("Missing return statement in function");
  }

  public void Arguments(List<SequenceExpression> argExprs) {
    Argument(argExprs);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case COMMA:
        ;
        break;
      default:
        mcc_la1[19] = mcc_gen;
        goto label_5;
      }
      mcc_consume_token(COMMA);
      Argument(argExprs);
    }label_5: ;
    
  }

  public SequenceVariable Variable() {
    String varName, typeName=null;
    SequenceVariable oldVariable, newVariable;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case WORD:
      varName = Word();
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case COLON:
        mcc_consume_token(COLON);
        typeName = Type();
        break;
      default:
        mcc_la1[20] = mcc_gen;
        ;
        break;
      }
        oldVariable = varDecls.Lookup(varName);
        if(typeName != null)
        {
            if(oldVariable == null) {
                newVariable = varDecls.Define(varName, typeName);
            } else if(oldVariable.Type == "") {
                if(varDecls.WasImplicitelyDeclared(oldVariable))
                    {throw new ParseException("The variable \"" + varName + "\" has already been used/implicitely declared as global variable!");}
                else // it was explicitely used as global before, we are allowed to create a local variable with the same name, the global is (only) accessible with global prefix then
                    newVariable = varDecls.Define(varName, typeName);
            } else {
                {throw new ParseException("The variable \"" + varName + "\" has already been declared as local variable with type \"" + oldVariable.Type + "\"!");}
            }
        }
        else
        {
            if(oldVariable == null) {
                newVariable = varDecls.Define(varName, "");
                warnings.Add("WARNING: using global variables without \"::\" prefix is deprecated, missing for: " + varName);
            } else {
                if(oldVariable.Type == "")
                    warnings.Add("WARNING: using global variables without \"::\" prefix is deprecated, missing for: " + varName);
                newVariable = oldVariable;
            }
        }
        {return newVariable;}
      break;
    case DOUBLECOLON:
      mcc_consume_token(DOUBLECOLON);
      varName = Word();
        {return varDecls.LookupDefineGlobal(varName);}
      break;
    default:
      mcc_la1[21] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    throw new Exception("Missing return statement in function");
  }

  public SequenceVariable VariableDefinition() {
    String varName, typeName;
    varName = Word();
    mcc_consume_token(COLON);
    typeName = Type();
        SequenceVariable oldVariable = varDecls.Lookup(varName);
        SequenceVariable newVariable;
        if(oldVariable == null) {
            newVariable = varDecls.Define(varName, typeName);
        } else if(oldVariable.Type == "") {
            if(varDecls.WasImplicitelyDeclared(oldVariable))
                {throw new ParseException("The variable \"" + varName + "\" has already been used/implicitely declared as global variable!");}
            else // it was explicitely used as global before, we are allowed to create a local variable with the same name, the global is (only) accessible with global prefix then
                newVariable = varDecls.Define(varName, typeName);
        } else {
            {throw new ParseException("The variable \"" + varName + "\" has already been declared as local variable with type \"" + oldVariable.Type + "\"!");}
        }
        {return newVariable;}
    throw new Exception("Missing return statement in function");
  }

  public SequenceVariable VariableDefinitionNonGeneric() {
    String varName, typeName;
    varName = Word();
    mcc_consume_token(COLON);
    typeName = TypeNonGeneric();
        SequenceVariable oldVariable = varDecls.Lookup(varName);
        SequenceVariable newVariable;
        if(oldVariable == null) {
            newVariable = varDecls.Define(varName, typeName);
        } else if(oldVariable.Type == "") {
            if(varDecls.WasImplicitelyDeclared(oldVariable))
                {throw new ParseException("The variable \"" + varName + "\" has already been used/implicitely declared as global variable!");}
            else // it was explicitely used as global before, we are allowed to create a local variable with the same name, the global is (only) accessible with global prefix then
                newVariable = varDecls.Define(varName, typeName);
        } else {
            {throw new ParseException("The variable \"" + varName + "\" has already been declared as local variable with type \"" + oldVariable.Type + "\"!");}
        }
        {return newVariable;}
    throw new Exception("Missing return statement in function");
  }

  public SequenceVariable VariableUse() {
    String varName;
    SequenceVariable oldVariable, newVariable;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case WORD:
      varName = Word();
        oldVariable = varDecls.Lookup(varName);
        if(oldVariable == null) {
            newVariable = varDecls.Define(varName, "");
            warnings.Add("WARNING: using global variables without \"::\" prefix is deprecated, missing for: " + varName);
        } else {
            if(oldVariable.Type == "")
                warnings.Add("WARNING: using global variables without \"::\" prefix is deprecated, missing for: " + varName);
            newVariable = oldVariable;
        }
        {return newVariable;}
      break;
    case DOUBLECOLON:
      mcc_consume_token(DOUBLECOLON);
      varName = Word();
        {return varDecls.LookupDefineGlobal(varName);}
      break;
    default:
      mcc_la1[22] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    throw new Exception("Missing return statement in function");
  }

  public void VariableList(List<SequenceVariable> variables) {
    SequenceVariable var;
    var = Variable();
                     variables.Add(var);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case COMMA:
        ;
        break;
      default:
        mcc_la1[23] = mcc_gen;
        goto label_6;
      }
      mcc_consume_token(COMMA);
      var = Variable();
                                                                  variables.Add(var);
    }label_6: ;
    
  }

  public void VariableDefinitionList(List<SequenceVariable> variables) {
    SequenceVariable var;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case WORD:
      var = VariableDefinition();
                                 variables.Add(var);
      while (true) {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case COMMA:
          ;
          break;
        default:
          mcc_la1[24] = mcc_gen;
          goto label_7;
        }
        mcc_consume_token(COMMA);
        var = VariableDefinition();
                                                                                        variables.Add(var);
      }label_7: ;
      
      break;
    default:
      mcc_la1[25] = mcc_gen;
      ;
      break;
    }
  }

  public String Type() {
    String type;
    if (GetToken(1).kind == WORD && GetToken(1).image == "set") {
      type = SetType();
        {return type;}
    } else if (GetToken(1).kind == WORD && GetToken(1).image == "map") {
      type = MapType();
        {return type;}
    } else if (GetToken(1).kind == WORD && GetToken(1).image == "array") {
      type = ArrayType();
        {return type;}
    } else if (GetToken(1).kind == WORD && GetToken(1).image == "deque") {
      type = DequeType();
        {return type;}
    } else if (GetToken(1).kind == WORD && GetToken(1).image == "match") {
      type = MatchType();
        {return type;}
    } else {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case WORD:
        type = TypeNonGeneric();
        {return type;}
        break;
      default:
        mcc_la1[26] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Exception("Missing return statement in function");
  }

  public String SetType() {
    String type;
    String typeParam;
    if (mcc_2_20(2147483647)) {
      Word();
      mcc_consume_token(LANGLE);
      typeParam = TypeNonGeneric();
      mcc_consume_token(RANGLE);
                                                                                           type = "set<" + typeParam + ">";
      if (mcc_2_16(2)) {
        mcc_consume_token(LBRACE);
                            {throw new ParseException("no {} allowed at set declaration, use s:set<T> = set<T>{} for initialization");}
      } else {
        ;
      }
        {return type;}
    } else if (mcc_2_21(2147483647) && (GetToken(3).kind == WORD && GetToken(3).image == "match")) {
      Word();
      mcc_consume_token(LANGLE);
      typeParam = MatchTypeInContainerType();
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case RANGLE:
        mcc_consume_token(RANGLE);
        mcc_consume_token(RANGLE);
        break;
      case RRANGLE:
        mcc_consume_token(RRANGLE);
        break;
      default:
        mcc_la1[27] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
                                                                       type = "set<" + typeParam + ">";
      if (mcc_2_17(2)) {
        mcc_consume_token(LBRACE);
                        {throw new ParseException("no {} allowed at set declaration, use s:set<T> = set<T>{} for initialization");}
      } else {
        ;
      }
        {return type;}
    } else if (mcc_2_22(2147483647)) {
      Word();
      mcc_consume_token(LANGLE);
      typeParam = TypeNonGeneric();
                                                                                        type = "set<" + typeParam + ">";
      if (mcc_2_18(2)) {
        mcc_consume_token(LBRACE);
                            {throw new ParseException("no {} allowed at set declaration, use s:set<T> = set<T>{} for initialization");}
      } else {
        ;
      }
        {return type;}
    } else if (mcc_2_23(2147483647) && (GetToken(3).kind == WORD && GetToken(3).image == "match")) {
      Word();
      mcc_consume_token(LANGLE);
      typeParam = MatchTypeInContainerType();
      mcc_consume_token(RANGLE);
                                                          type = "set<" + typeParam + ">";
      if (mcc_2_19(2)) {
        mcc_consume_token(LBRACE);
                        {throw new ParseException("no {} allowed at set declaration, use s:set<T> = set<T>{} for initialization");}
      } else {
        ;
      }
        {return type;}
    } else {
      mcc_consume_token(-1);
      throw new ParseException();
    }
    throw new Exception("Missing return statement in function");
  }

  public String MapType() {
    String type;
    String typeParam, typeParamDst;
    if (mcc_2_28(2147483647)) {
      Word();
      mcc_consume_token(LANGLE);
      typeParam = TypeNonGeneric();
      mcc_consume_token(COMMA);
      typeParamDst = TypeNonGeneric();
      mcc_consume_token(RANGLE);
                                                                                                                                                  type = "map<" + typeParam + "," + typeParamDst + ">";
      if (mcc_2_24(2)) {
        mcc_consume_token(LBRACE);
                        {throw new ParseException("no {} allowed at map declaration, use m:map<S,T> = map<S,T>{} for initialization");}
      } else {
        ;
      }
        {return type;}
    } else if (mcc_2_29(2147483647) && (GetToken(5).kind == WORD && GetToken(5).image == "match")) {
      Word();
      mcc_consume_token(LANGLE);
      typeParam = Word();
      mcc_consume_token(COMMA);
      typeParamDst = MatchTypeInContainerType();
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case RANGLE:
        mcc_consume_token(RANGLE);
        mcc_consume_token(RANGLE);
        break;
      case RRANGLE:
        mcc_consume_token(RRANGLE);
        break;
      default:
        mcc_la1[28] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
                                                                                               type = "map<" + typeParam + "," + typeParamDst + ">";
      if (mcc_2_25(2)) {
        mcc_consume_token(LBRACE);
                        {throw new ParseException("no {} allowed at map declaration, use m:map<S,T> = map<S,T>{} for initialization");}
      } else {
        ;
      }
        {return type;}
    } else if (mcc_2_30(2147483647)) {
      Word();
      mcc_consume_token(LANGLE);
      typeParam = TypeNonGeneric();
      mcc_consume_token(COMMA);
      typeParamDst = TypeNonGeneric();
                                                                                                                                               type = "map<" + typeParam + "," + typeParamDst + ">";
      if (mcc_2_26(2)) {
        mcc_consume_token(LBRACE);
                        {throw new ParseException("no {} allowed at map declaration, use m:map<S,T> = map<S,T>{} for initialization");}
      } else {
        ;
      }
        {return type;}
    } else if (mcc_2_31(2147483647) && (GetToken(5).kind == WORD && GetToken(5).image == "match")) {
      Word();
      mcc_consume_token(LANGLE);
      typeParam = Word();
      mcc_consume_token(COMMA);
      typeParamDst = MatchTypeInContainerType();
      mcc_consume_token(RANGLE);
                                                                                  type = "map<" + typeParam + "," + typeParamDst + ">";
      if (mcc_2_27(2)) {
        mcc_consume_token(LBRACE);
                        {throw new ParseException("no {} allowed at map declaration, use m:map<S,T> = map<S,T>{} for initialization");}
      } else {
        ;
      }
        {return type;}
    } else {
      mcc_consume_token(-1);
      throw new ParseException();
    }
    throw new Exception("Missing return statement in function");
  }

  public String ArrayType() {
    String type;
    String typeParam;
    if (mcc_2_36(2147483647)) {
      Word();
      mcc_consume_token(LANGLE);
      typeParam = TypeNonGeneric();
      mcc_consume_token(RANGLE);
                                                type = "array<" + typeParam + ">";
      if (mcc_2_32(2)) {
        mcc_consume_token(LBOXBRACKET);
                        {throw new ParseException("no [] allowed at array declaration, use a:array<T> = array<T>[] for initialization");}
      } else {
        ;
      }
        {return type;}
    } else if (mcc_2_37(2147483647) && (GetToken(3).kind == WORD && GetToken(3).image == "match")) {
      Word();
      mcc_consume_token(LANGLE);
      typeParam = MatchTypeInContainerType();
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case RANGLE:
        mcc_consume_token(RANGLE);
        mcc_consume_token(RANGLE);
        break;
      case RRANGLE:
        mcc_consume_token(RRANGLE);
        break;
      default:
        mcc_la1[29] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
                                                                       type = "array<" + typeParam + ">";
      if (mcc_2_33(2)) {
        mcc_consume_token(LBOXBRACKET);
                        {throw new ParseException("no [] allowed at array declaration, use a:array<T> = array<T>[] for initialization");}
      } else {
        ;
      }
        {return type;}
    } else if (mcc_2_38(2147483647)) {
      Word();
      mcc_consume_token(LANGLE);
      typeParam = TypeNonGeneric();
                                            type = "array<" + typeParam + ">";
      if (mcc_2_34(2)) {
        mcc_consume_token(LBOXBRACKET);
                        {throw new ParseException("no [] allowed at array declaration, use a:array<T> = array<T>[] for initialization");}
      } else {
        ;
      }
        {return type;}
    } else if (mcc_2_39(2147483647) && (GetToken(3).kind == WORD && GetToken(3).image == "match")) {
      Word();
      mcc_consume_token(LANGLE);
      typeParam = MatchTypeInContainerType();
      mcc_consume_token(RANGLE);
                                                          type = "array<" + typeParam + ">";
      if (mcc_2_35(2)) {
        mcc_consume_token(LBOXBRACKET);
                        {throw new ParseException("no [] allowed at array declaration, use a:array<T> = array<T>[] for initialization");}
      } else {
        ;
      }
        {return type;}
    } else {
      mcc_consume_token(-1);
      throw new ParseException();
    }
    throw new Exception("Missing return statement in function");
  }

  public String DequeType() {
    String type;
    String typeParam;
    if (mcc_2_44(2147483647)) {
      Word();
      mcc_consume_token(LANGLE);
      typeParam = TypeNonGeneric();
      mcc_consume_token(RANGLE);
                                                                                           type = "deque<" + typeParam + ">";
      if (mcc_2_40(2)) {
        mcc_consume_token(LBOXBRACKET);
                        {throw new ParseException("no [] allowed at deque declaration, use d:deque<T> = deque<T>[] for initialization");}
      } else {
        ;
      }
        {return type;}
    } else if (mcc_2_45(2147483647) && (GetToken(3).kind == WORD && GetToken(3).image == "match")) {
      Word();
      mcc_consume_token(LANGLE);
      typeParam = MatchTypeInContainerType();
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case RANGLE:
        mcc_consume_token(RANGLE);
        mcc_consume_token(RANGLE);
        break;
      case RRANGLE:
        mcc_consume_token(RRANGLE);
        break;
      default:
        mcc_la1[30] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
                                                                       type = "deque<" + typeParam + ">";
      if (mcc_2_41(2)) {
        mcc_consume_token(LBOXBRACKET);
                        {throw new ParseException("no [] allowed at deque declaration, use d:deque<T> = deque<T>[] for initialization");}
      } else {
        ;
      }
        {return type;}
    } else if (mcc_2_46(2147483647)) {
      Word();
      mcc_consume_token(LANGLE);
      typeParam = TypeNonGeneric();
                                                                                        type = "deque<" + typeParam + ">";
      if (mcc_2_42(2)) {
        mcc_consume_token(LBOXBRACKET);
                        {throw new ParseException("no [] allowed at deque declaration, use d:deque<T> = deque<T>[] for initialization");}
      } else {
        ;
      }
        {return type;}
    } else if (mcc_2_47(2147483647) && (GetToken(3).kind == WORD && GetToken(3).image == "match")) {
      Word();
      mcc_consume_token(LANGLE);
      typeParam = MatchTypeInContainerType();
      mcc_consume_token(RANGLE);
                                                          type = "deque<" + typeParam + ">";
      if (mcc_2_43(2)) {
        mcc_consume_token(LBOXBRACKET);
                        {throw new ParseException("no [] allowed at deque declaration, use d:deque<T> = deque<T>[] for initialization");}
      } else {
        ;
      }
        {return type;}
    } else {
      mcc_consume_token(-1);
      throw new ParseException();
    }
    throw new Exception("Missing return statement in function");
  }

  public String MatchType() {
    String type;
    String typeParam;
    if (mcc_2_48(2147483647)) {
      Word();
      mcc_consume_token(LANGLE);
      typeParam = TypeNonGeneric();
      mcc_consume_token(RANGLE);
                                                                                           type = "match<" + typeParam + ">";
        {return type;}
    } else if (mcc_2_49(2147483647)) {
      Word();
      mcc_consume_token(LANGLE);
      typeParam = TypeNonGeneric();
                                                                                        type = "match<" + typeParam + ">";
        {return type;}
    } else if (mcc_2_50(2147483647)) {
      Word();
      mcc_consume_token(LANGLE);
      mcc_consume_token(CLASS);
      typeParam = TypeNonGeneric();
      mcc_consume_token(RANGLE);
                                                                                                           type = "match<class " + typeParam + ">";
        {return type;}
    } else if (mcc_2_51(2147483647)) {
      Word();
      mcc_consume_token(LANGLE);
      mcc_consume_token(CLASS);
      typeParam = TypeNonGeneric();
                                                                                                        type = "match<class " + typeParam + ">";
        {return type;}
    } else {
      mcc_consume_token(-1);
      throw new ParseException();
    }
    throw new Exception("Missing return statement in function");
  }

  public String MatchTypeInContainerType() {
    String type;
    String typeParam;
    if (mcc_2_52(3)) {
      Word();
      mcc_consume_token(LANGLE);
      typeParam = TypeNonGeneric();
                                                         type = "match<" + typeParam + ">";
        {return type;}
    } else {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case WORD:
        Word();
        mcc_consume_token(LANGLE);
        mcc_consume_token(CLASS);
        typeParam = TypeNonGeneric();
                                                    type = "match<class " + typeParam + ">";
        {return type;}
        break;
      default:
        mcc_la1[31] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Exception("Missing return statement in function");
  }

  public String TypeNonGeneric() {
    String package=null, type;
    if (mcc_2_53(2)) {
      package = Word();
      mcc_consume_token(DOUBLECOLON);
    } else {
      ;
    }
    type = Word();
        {return package != null ? package + "::" + type : type;}
    throw new Exception("Missing return statement in function");
  }

  public Sequence XGRS() {
    Sequence seq;
    seq = RewriteSequence();
    mcc_consume_token(0);
        {return seq;}
    throw new Exception("Missing return statement in function");
  }

  public SequenceDefinition defXGRS() {
    String name;
    List<SequenceVariable> inputVariables = new List<SequenceVariable>();
    List<SequenceVariable> outputVariables = new List<SequenceVariable>();
    Sequence seq;
    name = Word();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case LPARENTHESIS:
      mcc_consume_token(LPARENTHESIS);
      VariableDefinitionList(inputVariables);
      mcc_consume_token(RPARENTHESIS);
      break;
    default:
      mcc_la1[32] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case COLON:
      mcc_consume_token(COLON);
      mcc_consume_token(LPARENTHESIS);
      VariableDefinitionList(outputVariables);
      mcc_consume_token(RPARENTHESIS);
      break;
    default:
      mcc_la1[33] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(LBRACE);
    seq = RewriteSequence();
    mcc_consume_token(RBRACE);
    mcc_consume_token(0);
        {return new SequenceDefinitionInterpreted(name, inputVariables.ToArray(), outputVariables.ToArray(), seq);}
    throw new Exception("Missing return statement in function");
  }

/////////////////////////////////////////
// Extended rewrite sequence           //
// (lowest precedence operators first) //
/////////////////////////////////////////
  public Sequence RewriteSequence() {
    Sequence seqOrLeft, right;
    bool random = false, choice = false;
    seqOrLeft = RewriteSequenceLazyOr();
    while (true) {
      if (mcc_2_54(3)) {
        ;
      } else {
        goto label_8;
      }
      if (mcc_2_55(3)) {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case DOLLAR:
          mcc_consume_token(DOLLAR);
                   random = true;
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case PERCENT:
            mcc_consume_token(PERCENT);
                                           choice = true;
            break;
          default:
            mcc_la1[34] = mcc_gen;
            ;
            break;
          }
          break;
        default:
          mcc_la1[35] = mcc_gen;
          ;
          break;
        }
        mcc_consume_token(THENLEFT);
        right = RewriteSequenceLazyOr();
                seqOrLeft = new SequenceThenLeft(seqOrLeft, right, random, choice);
      } else {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case DOLLAR:
        case THENRIGHT:
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case DOLLAR:
            mcc_consume_token(DOLLAR);
                   random = true;
            switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
            case PERCENT:
              mcc_consume_token(PERCENT);
                                           choice = true;
              break;
            default:
              mcc_la1[36] = mcc_gen;
              ;
              break;
            }
            break;
          default:
            mcc_la1[37] = mcc_gen;
            ;
            break;
          }
          mcc_consume_token(THENRIGHT);
          right = RewriteSequenceLazyOr();
                seqOrLeft = new SequenceThenRight(seqOrLeft, right, random, choice);
          break;
        default:
          mcc_la1[38] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
      }
    }label_8: ;
    
        {return seqOrLeft;}
    throw new Exception("Missing return statement in function");
  }

  public Sequence RewriteSequenceLazyOr() {
    Sequence seqOrLeft, right;
    bool random = false, choice = false;
    seqOrLeft = RewriteSequenceLazyAnd();
    while (true) {
      if (mcc_2_56(3)) {
        ;
      } else {
        goto label_9;
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case DOLLAR:
        mcc_consume_token(DOLLAR);
               random = true;
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case PERCENT:
          mcc_consume_token(PERCENT);
                                       choice = true;
          break;
        default:
          mcc_la1[39] = mcc_gen;
          ;
          break;
        }
        break;
      default:
        mcc_la1[40] = mcc_gen;
        ;
        break;
      }
      mcc_consume_token(DOUBLEPIPE);
      right = RewriteSequenceLazyAnd();
            seqOrLeft = new SequenceLazyOr(seqOrLeft, right, random, choice);
    }label_9: ;
    
        {return seqOrLeft;}
    throw new Exception("Missing return statement in function");
  }

  public Sequence RewriteSequenceLazyAnd() {
    Sequence seqOrLeft, right;
    bool random = false, choice = false;
    seqOrLeft = RewriteSequenceStrictOr();
    while (true) {
      if (mcc_2_57(3)) {
        ;
      } else {
        goto label_10;
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case DOLLAR:
        mcc_consume_token(DOLLAR);
               random = true;
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case PERCENT:
          mcc_consume_token(PERCENT);
                                       choice = true;
          break;
        default:
          mcc_la1[41] = mcc_gen;
          ;
          break;
        }
        break;
      default:
        mcc_la1[42] = mcc_gen;
        ;
        break;
      }
      mcc_consume_token(DOUBLEAMPERSAND);
      right = RewriteSequenceStrictOr();
            seqOrLeft = new SequenceLazyAnd(seqOrLeft, right, random, choice);
    }label_10: ;
    
        {return seqOrLeft;}
    throw new Exception("Missing return statement in function");
  }

  public Sequence RewriteSequenceStrictOr() {
    Sequence seqOrLeft, right;
    bool random = false, choice = false;
    seqOrLeft = RewriteSequenceStrictXor();
    while (true) {
      if (mcc_2_58(3)) {
        ;
      } else {
        goto label_11;
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case DOLLAR:
        mcc_consume_token(DOLLAR);
               random = true;
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case PERCENT:
          mcc_consume_token(PERCENT);
                                       choice = true;
          break;
        default:
          mcc_la1[43] = mcc_gen;
          ;
          break;
        }
        break;
      default:
        mcc_la1[44] = mcc_gen;
        ;
        break;
      }
      mcc_consume_token(PIPE);
      right = RewriteSequenceStrictXor();
            seqOrLeft = new SequenceStrictOr(seqOrLeft, right, random, choice);
    }label_11: ;
    
        {return seqOrLeft;}
    throw new Exception("Missing return statement in function");
  }

  public Sequence RewriteSequenceStrictXor() {
    Sequence seqOrLeft, right;
    bool random = false, choice = false;
    seqOrLeft = RewriteSequenceStrictAnd();
    while (true) {
      if (mcc_2_59(3)) {
        ;
      } else {
        goto label_12;
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case DOLLAR:
        mcc_consume_token(DOLLAR);
               random = true;
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case PERCENT:
          mcc_consume_token(PERCENT);
                                       choice = true;
          break;
        default:
          mcc_la1[45] = mcc_gen;
          ;
          break;
        }
        break;
      default:
        mcc_la1[46] = mcc_gen;
        ;
        break;
      }
      mcc_consume_token(CIRCUMFLEX);
      right = RewriteSequenceStrictAnd();
            seqOrLeft = new SequenceXor(seqOrLeft, right, random, choice);
    }label_12: ;
    
        {return seqOrLeft;}
    throw new Exception("Missing return statement in function");
  }

  public Sequence RewriteSequenceStrictAnd() {
    Sequence seqOrLeft, right;
    bool random = false, choice = false;
    seqOrLeft = RewriteSequenceNeg();
    while (true) {
      if (mcc_2_60(3)) {
        ;
      } else {
        goto label_13;
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case DOLLAR:
        mcc_consume_token(DOLLAR);
               random = true;
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case PERCENT:
          mcc_consume_token(PERCENT);
                                       choice = true;
          break;
        default:
          mcc_la1[47] = mcc_gen;
          ;
          break;
        }
        break;
      default:
        mcc_la1[48] = mcc_gen;
        ;
        break;
      }
      mcc_consume_token(AMPERSAND);
      right = RewriteSequenceNeg();
            seqOrLeft = new SequenceStrictAnd(seqOrLeft, right, random, choice);
    }label_13: ;
    
        {return seqOrLeft;}
    throw new Exception("Missing return statement in function");
  }

  public Sequence RewriteSequenceNeg() {
    Sequence seq;
    SequenceVariable toVar;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case EXCLAMATIONMARK:
      mcc_consume_token(EXCLAMATIONMARK);
      seq = RewriteSequenceIteration();
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case ASSIGN_TO:
        mcc_consume_token(ASSIGN_TO);
        toVar = Variable();
                {return new SequenceAssignSequenceResultToVar(toVar, new SequenceNot(seq));}
        break;
      case BOR_TO:
        mcc_consume_token(BOR_TO);
        toVar = Variable();
                {return new SequenceOrAssignSequenceResultToVar(toVar, new SequenceNot(seq));}
        break;
      case BAND_TO:
        mcc_consume_token(BAND_TO);
        toVar = Variable();
                {return new SequenceAndAssignSequenceResultToVar(toVar, new SequenceNot(seq));}
        break;
      default:
        mcc_la1[49] = mcc_gen;
                {return new SequenceNot(seq);}
        break;
      }
      break;
    case DOLLAR:
    case DIV:
    case LPARENTHESIS:
    case LBOXBRACKET:
    case LANGLE:
    case LLANGLE:
    case LBRACE:
    case DOUBLECOLON:
    case PERCENT:
    case QUESTIONMARK:
    case TRUE:
    case FALSE:
    case FOR:
    case IF:
    case IN:
    case YIELD:
    case COUNT:
    case PARALLEL:
    case LOCK:
    case WORD:
      seq = RewriteSequenceIteration();
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case ASSIGN_TO:
        mcc_consume_token(ASSIGN_TO);
        toVar = Variable();
                {return new SequenceAssignSequenceResultToVar(toVar, seq);}
        break;
      case BOR_TO:
        mcc_consume_token(BOR_TO);
        toVar = Variable();
                {return new SequenceOrAssignSequenceResultToVar(toVar, seq);}
        break;
      case BAND_TO:
        mcc_consume_token(BAND_TO);
        toVar = Variable();
                {return new SequenceAndAssignSequenceResultToVar(toVar, seq);}
        break;
      default:
        mcc_la1[50] = mcc_gen;
                {return seq;}
        break;
      }
      break;
    default:
      mcc_la1[51] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    throw new Exception("Missing return statement in function");
  }

  public Sequence RewriteSequenceIteration() {
    Sequence seq;
    SequenceExpression minExpr = null, maxExpr = null;
    bool maxspecified = false;
    bool maxstar = false;
    seq = SimpleSequence();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case STAR:
    case PLUS:
    case LBOXBRACKET:
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case STAR:
        mcc_consume_token(STAR);
            minExpr = new SequenceExpressionConstant(0);
            seq = new SequenceIterationMin(seq, minExpr);
        break;
      case PLUS:
        mcc_consume_token(PLUS);
            minExpr = new SequenceExpressionConstant(1);
            seq = new SequenceIterationMin(seq, minExpr);
        break;
      case LBOXBRACKET:
        mcc_consume_token(LBOXBRACKET);
        if (mcc_2_62(2)) {
          minExpr = Expression();
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case COLON:
            mcc_consume_token(COLON);
            if (mcc_2_61(1)) {
              maxExpr = Expression();
                                               maxspecified = true;
            } else {
              switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
              case STAR:
                mcc_consume_token(STAR);
                              maxstar = true;
                break;
              default:
                mcc_la1[52] = mcc_gen;
                mcc_consume_token(-1);
                throw new ParseException();
              }
            }
            break;
          default:
            mcc_la1[53] = mcc_gen;
            ;
            break;
          }
        } else {
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case STAR:
            mcc_consume_token(STAR);
                      minExpr = new SequenceExpressionConstant(0); maxstar = true;
            break;
          case PLUS:
            mcc_consume_token(PLUS);
                      minExpr = new SequenceExpressionConstant(1); maxstar = true;
            break;
          default:
            mcc_la1[54] = mcc_gen;
            mcc_consume_token(-1);
            throw new ParseException();
          }
        }
        mcc_consume_token(RBOXBRACKET);
            if(maxstar) {
                seq = new SequenceIterationMin(seq, minExpr);
            } else {
                if(!maxspecified) maxExpr = minExpr;
                seq = new SequenceIterationMinMax(seq, minExpr, maxExpr);
            }
        break;
      default:
        mcc_la1[55] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      mcc_la1[56] = mcc_gen;
      ;
      break;
    }
        {return seq;}
    throw new Exception("Missing return statement in function");
  }

  public Sequence SimpleSequence() {
    bool special = false, choice = false, chooseRandSpecified = false;
    Sequence seq, seq2, seq3 = null;
    List<SequenceVariable> variableList1 = new List<SequenceVariable>();
    List<SequenceVariable> variableList2 = new List<SequenceVariable>();
    List<Sequence> sequences = new List<Sequence>();
    SequenceExecuteInSubgraph seqInSubgraph = null;
    List<SequenceExecuteInSubgraph> inSubgraphSequences = new List<SequenceExecuteInSubgraph>();
    List<Double> numbers = new List<Double>();
    List<SequenceExpression> argExprs = new List<SequenceExpression>();
    SequenceVariable toVar = null, fromVar, fromVar2 = null, fromVar3 = null;
    SequenceExpression expr = null, expr2 = null;
    SequenceComputation comp;
    int num = 0;
    RelOpDirection left = RelOpDirection.Undefined, right = RelOpDirection.Undefined;
    double numDouble = 0.0;
    String str, attrName = null, indexName = null, indexName2 = null;
    object constant;
    if (mcc_2_77(2147483647)) {
      toVar = Variable();
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case EQUAL:
        mcc_consume_token(EQUAL);
        break;
      case GREATEREQUAL:
        mcc_consume_token(GREATEREQUAL);
        break;
      default:
        mcc_la1[57] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      if (mcc_2_63(2147483647)) {
        Word();
        mcc_consume_token(LPARENTHESIS);
            {throw new ParseException("the destination variable(s) of a rule result assignment must be enclosed in parenthesis");}
      } else if (mcc_2_64(2147483647)) {
        constant = Constant();
            {return new SequenceAssignConstToVar(toVar, constant);} // needed as sequence to allow variable declaration and initialization in sequence scope

      } else if (mcc_2_65(3)) {
        expr = InitContainerExpr();
            {return new SequenceAssignContainerConstructorToVar(toVar, expr);} // needed as sequence to allow variable declaration and initialization in sequence scope

      } else {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case NEW:
          expr = InitObjectExpr();
            {return new SequenceAssignObjectConstructorToVar(toVar, expr);} // needed as sequence to allow variable declaration and initialization in sequence scope

          break;
        case DOUBLECOLON:
        case WORD:
          fromVar = Variable();
            {return new SequenceAssignVarToVar(toVar, fromVar);} // needed as sequence to allow variable declaration and initialization in sequence scope

          break;
        default:
          mcc_la1[60] = mcc_gen;
          if (mcc_2_66(4)) {
            mcc_consume_token(DOLLAR);
            mcc_consume_token(PERCENT);
            mcc_consume_token(LPARENTHESIS);
            str = Text();
            mcc_consume_token(RPARENTHESIS);
            {return new SequenceAssignUserInputToVar(toVar, str);}
          } else if (mcc_2_67(4)) {
            mcc_consume_token(DOLLAR);
            switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
            case PERCENT:
              mcc_consume_token(PERCENT);
                                choice = true;
              break;
            default:
              mcc_la1[58] = mcc_gen;
              ;
              break;
            }
            mcc_consume_token(LPARENTHESIS);
            num = Number();
            mcc_consume_token(RPARENTHESIS);
            {return new SequenceAssignRandomIntToVar(toVar, num, choice);}
          } else {
            switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
            case DOLLAR:
              mcc_consume_token(DOLLAR);
              switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
              case PERCENT:
                mcc_consume_token(PERCENT);
                   choice = true;
                break;
              default:
                mcc_la1[59] = mcc_gen;
                ;
                break;
              }
              mcc_consume_token(LPARENTHESIS);
              numDouble = DoubleNumber();
              mcc_consume_token(RPARENTHESIS);
            if(numDouble != 1.0)
                {throw new ParseException("The random assignment of type double only supports 1.0 as upper bound");}
            {return new SequenceAssignRandomDoubleToVar(toVar, choice);}
              break;
            case LPARENTHESIS:
              mcc_consume_token(LPARENTHESIS);
              seq = RewriteSequence();
              mcc_consume_token(RPARENTHESIS);
            {return new SequenceAssignSequenceResultToVar(toVar, seq);}
              break;
            default:
              mcc_la1[61] = mcc_gen;
              mcc_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        }
      }
    } else if (mcc_2_78(2147483647)) {
      toVar = VariableDefinition();
        {return new SequenceDeclareVariable(toVar);}
    } else {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case YIELD:
        mcc_consume_token(YIELD);
        toVar = VariableUse();
        mcc_consume_token(EQUAL);
        if (mcc_2_68(2)) {
          constant = Constant();
            {return new SequenceBooleanComputation(new SequenceComputationAssignment(
                new AssignmentTargetYieldingVar(toVar), new SequenceExpressionConstant(constant)), null, false);}
        } else if (mcc_2_69(1)) {
          expr = InitContainerExpr();
            {return new SequenceBooleanComputation(new SequenceComputationAssignment(
                new AssignmentTargetYieldingVar(toVar), expr), null, false);}
        } else {
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case DOUBLECOLON:
          case WORD:
            fromVar = Variable();
            {return new SequenceBooleanComputation(new SequenceComputationAssignment(
                new AssignmentTargetYieldingVar(toVar), new SequenceExpressionVariable(fromVar)), null, false);}
            break;
          default:
            mcc_la1[62] = mcc_gen;
            mcc_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        mcc_la1[91] = mcc_gen;
        if (mcc_2_79(2)) {
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case PERCENT:
            mcc_consume_token(PERCENT);
                        special = true;
            break;
          default:
            mcc_la1[63] = mcc_gen;
            ;
            break;
          }
          mcc_consume_token(TRUE);
        {return new SequenceBooleanComputation(new SequenceExpressionConstant(true), null, special);}
        } else if (mcc_2_80(2)) {
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case PERCENT:
            mcc_consume_token(PERCENT);
                        special = true;
            break;
          default:
            mcc_la1[64] = mcc_gen;
            ;
            break;
          }
          mcc_consume_token(FALSE);
        {return new SequenceBooleanComputation(new SequenceExpressionConstant(false), null, special);}
        } else if (mcc_2_81(3)) {
          seq = MultiRulePrefixedSequence();
        {return seq;}
        } else if (mcc_2_82(3)) {
          seq = MultiRuleAllCall(true);
        {return seq;}
        } else if (mcc_2_83(2)) {
          seq = RulePrefixedSequence();
        {return seq;}
        } else if (mcc_2_84(2147483647)) {
          seq = Rule();
        {return seq;}
        } else {
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case DOUBLECOLON:
            mcc_consume_token(DOUBLECOLON);
            str = Word();
        fromVar = varDecls.LookupDefineGlobal(str);
        {return new SequenceBooleanComputation(new SequenceExpressionVariable(fromVar), null, false);}
            break;
          default:
            mcc_la1[92] = mcc_gen;
            if (mcc_2_85(3)) {
              mcc_consume_token(DOLLAR);
              switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
              case PERCENT:
                mcc_consume_token(PERCENT);
               choice = true;
                break;
              default:
                mcc_la1[65] = mcc_gen;
                ;
                break;
              }
              mcc_consume_token(DOUBLEPIPE);
              mcc_consume_token(LPARENTHESIS);
              seq = RewriteSequence();
                                                                   sequences.Add(seq);
              while (true) {
                switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
                case COMMA:
                  ;
                  break;
                default:
                  mcc_la1[66] = mcc_gen;
                  goto label_14;
                }
                mcc_consume_token(COMMA);
                seq = RewriteSequence();
                                      sequences.Add(seq);
              }label_14: ;
              
              mcc_consume_token(RPARENTHESIS);
        {return new SequenceLazyOrAll(sequences, choice);}
            } else if (mcc_2_86(3)) {
              mcc_consume_token(DOLLAR);
              switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
              case PERCENT:
                mcc_consume_token(PERCENT);
               choice = true;
                break;
              default:
                mcc_la1[67] = mcc_gen;
                ;
                break;
              }
              mcc_consume_token(DOUBLEAMPERSAND);
              mcc_consume_token(LPARENTHESIS);
              seq = RewriteSequence();
                                                                   sequences.Add(seq);
              while (true) {
                switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
                case COMMA:
                  ;
                  break;
                default:
                  mcc_la1[68] = mcc_gen;
                  goto label_15;
                }
                mcc_consume_token(COMMA);
                seq = RewriteSequence();
                                      sequences.Add(seq);
              }label_15: ;
              
              mcc_consume_token(RPARENTHESIS);
        {return new SequenceLazyAndAll(sequences, choice);}
            } else if (mcc_2_87(3)) {
              mcc_consume_token(DOLLAR);
              switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
              case PERCENT:
                mcc_consume_token(PERCENT);
               choice = true;
                break;
              default:
                mcc_la1[69] = mcc_gen;
                ;
                break;
              }
              mcc_consume_token(PIPE);
              mcc_consume_token(LPARENTHESIS);
              seq = RewriteSequence();
                                                                  sequences.Add(seq);
              while (true) {
                switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
                case COMMA:
                  ;
                  break;
                default:
                  mcc_la1[70] = mcc_gen;
                  goto label_16;
                }
                mcc_consume_token(COMMA);
                seq = RewriteSequence();
                                      sequences.Add(seq);
              }label_16: ;
              
              mcc_consume_token(RPARENTHESIS);
        {return new SequenceStrictOrAll(sequences, choice);}
            } else if (mcc_2_88(3)) {
              mcc_consume_token(DOLLAR);
              switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
              case PERCENT:
                mcc_consume_token(PERCENT);
               choice = true;
                break;
              default:
                mcc_la1[71] = mcc_gen;
                ;
                break;
              }
              mcc_consume_token(AMPERSAND);
              mcc_consume_token(LPARENTHESIS);
              seq = RewriteSequence();
                                                                  sequences.Add(seq);
              while (true) {
                switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
                case COMMA:
                  ;
                  break;
                default:
                  mcc_la1[72] = mcc_gen;
                  goto label_17;
                }
                mcc_consume_token(COMMA);
                seq = RewriteSequence();
                                      sequences.Add(seq);
              }label_17: ;
              
              mcc_consume_token(RPARENTHESIS);
        {return new SequenceStrictAndAll(sequences, choice);}
            } else if (mcc_2_89(3)) {
              mcc_consume_token(DOLLAR);
              switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
              case PERCENT:
                mcc_consume_token(PERCENT);
               choice = true;
                break;
              default:
                mcc_la1[73] = mcc_gen;
                ;
                break;
              }
              mcc_consume_token(DOT);
              mcc_consume_token(LPARENTHESIS);
              numDouble = DoubleNumber();
              seq = RewriteSequence();
                                                                                           numbers.Add(numDouble); sequences.Add(seq);
              while (true) {
                switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
                case COMMA:
                  ;
                  break;
                default:
                  mcc_la1[74] = mcc_gen;
                  goto label_18;
                }
                mcc_consume_token(COMMA);
                numDouble = DoubleNumber();
                seq = RewriteSequence();
                                                               numbers.Add(numDouble); sequences.Add(seq);
              }label_18: ;
              
              mcc_consume_token(RPARENTHESIS);
        {return new SequenceWeightedOne(sequences, numbers, choice);}
            } else if (mcc_2_90(3)) {
              switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
              case DOLLAR:
                mcc_consume_token(DOLLAR);
           chooseRandSpecified=true;
                switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
                case PERCENT:
                  mcc_consume_token(PERCENT);
                                              choice = true;
                  break;
                default:
                  mcc_la1[75] = mcc_gen;
                  ;
                  break;
                }
                break;
              default:
                mcc_la1[76] = mcc_gen;
                ;
                break;
              }
              mcc_consume_token(LBRACE);
              mcc_consume_token(LANGLE);
              seq = Rule();
                                                                                        sequences.Add(seq);
              while (true) {
                switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
                case COMMA:
                  ;
                  break;
                default:
                  mcc_la1[77] = mcc_gen;
                  goto label_19;
                }
                mcc_consume_token(COMMA);
                seq = Rule();
                           sequences.Add(seq);
              }label_19: ;
              
              mcc_consume_token(RANGLE);
              mcc_consume_token(RBRACE);
        {return new SequenceSomeFromSet(sequences, chooseRandSpecified, choice);}
            } else {
              switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
              case LPARENTHESIS:
                mcc_consume_token(LPARENTHESIS);
                seq = RewriteSequence();
                mcc_consume_token(RPARENTHESIS);
        {return seq;}
                break;
              case LANGLE:
                mcc_consume_token(LANGLE);
                seq = RewriteSequence();
                mcc_consume_token(RANGLE);
        {return new SequenceTransaction(seq);}
                break;
              default:
                mcc_la1[93] = mcc_gen;
                if (mcc_2_91(5)) {
                  mcc_consume_token(LLANGLE);
                  seq = MultiRulePrefixedSequence();
                  mcc_consume_token(RRANGLE);
        {return new SequenceMultiSequenceBacktrack((SequenceMultiRulePrefixedSequence)seq);}
                } else if (mcc_2_92(3)) {
                  mcc_consume_token(LLANGLE);
           varDecls.PushScope(ScopeType.Backtrack);
                  seq = MultiRuleAllCall(false);
                  switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
                  case DOUBLESEMI:
                    mcc_consume_token(DOUBLESEMI);
                    break;
                  case SEMI:
                    mcc_consume_token(SEMI);
                    break;
                  default:
                    mcc_la1[78] = mcc_gen;
                    mcc_consume_token(-1);
                    throw new ParseException();
                  }
                  seq2 = RewriteSequence();
                                 varDecls.PopScope(variableList1);
                  mcc_consume_token(RRANGLE);
        {return new SequenceMultiBacktrack((SequenceMultiRuleAllCall)seq, seq2);}
                } else {
                  switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
                  case LLANGLE:
                    mcc_consume_token(LLANGLE);
           varDecls.PushScope(ScopeType.Backtrack);
                    seq = Rule();
                    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
                    case DOUBLESEMI:
                      mcc_consume_token(DOUBLESEMI);
                      break;
                    case SEMI:
                      mcc_consume_token(SEMI);
                      break;
                    default:
                      mcc_la1[79] = mcc_gen;
                      mcc_consume_token(-1);
                      throw new ParseException();
                    }
                    seq2 = RewriteSequence();
                                 varDecls.PopScope(variableList1);
                    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
                    case RRANGLE:
                      mcc_consume_token(RRANGLE);
                      break;
                    case RANGLE:
                      mcc_consume_token(RANGLE);
                      break;
                    default:
                      mcc_la1[80] = mcc_gen;
                      mcc_consume_token(-1);
                      throw new ParseException();
                    }
        {return new SequenceBacktrack(seq, seq2);}
                    break;
                  case DIV:
                    mcc_consume_token(DIV);
                    seq = RewriteSequence();
                    mcc_consume_token(DIV);
        {return new SequencePause(seq);}
                    break;
                  case IF:
                    mcc_consume_token(IF);
                    mcc_consume_token(LBRACE);
               varDecls.PushScope(ScopeType.If);
                    seq = RewriteSequence();
                    mcc_consume_token(SEMI);
          varDecls.PushScope(ScopeType.IfThenPart);
                    seq2 = RewriteSequence();
                                                                               varDecls.PopScope(variableList2);
                    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
                    case SEMI:
                      mcc_consume_token(SEMI);
                      seq3 = RewriteSequence();
                      break;
                    default:
                      mcc_la1[81] = mcc_gen;
                      ;
                      break;
                    }
                                        varDecls.PopScope(variableList1);
                    mcc_consume_token(RBRACE);
        if(seq3 == null)
            {return new SequenceIfThen(seq, seq2, variableList1, variableList2);}
        else
            {return new SequenceIfThenElse(seq, seq2, seq3, variableList1, variableList2);}
                    break;
                  case FOR:
                    mcc_consume_token(FOR);
                    mcc_consume_token(LBRACE);
                varDecls.PushScope(ScopeType.For);
                    fromVar = Variable();
                    if (mcc_2_72(3)) {
                      mcc_consume_token(IN);
                      mcc_consume_token(LBOXBRACKET);
                      mcc_consume_token(QUESTIONMARK);
                      seq = Rule();
                      mcc_consume_token(RBOXBRACKET);
                      mcc_consume_token(SEMI);
                      seq2 = RewriteSequence();
              varDecls.PopScope(variableList1);
                      mcc_consume_token(RBRACE);
            {return new SequenceForMatch(fromVar, seq, seq2, variableList1);}
                    } else if (mcc_2_73(3)) {
                      mcc_consume_token(IN);
                      mcc_consume_token(LBRACE);
                      if (mcc_2_70(2)) {
                        indexName = Word();
                        mcc_consume_token(EQUALITY);
                        expr = Expression();
                        mcc_consume_token(RBRACE);
                        mcc_consume_token(SEMI);
                        seq2 = RewriteSequence();
                  varDecls.PopScope(variableList1);
                        mcc_consume_token(RBRACE);
                {return new SequenceForIndexAccessEquality(fromVar, indexName, expr, seq2, variableList1);}
                      } else {
                        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
                        case WORD:
                          str = Word();
                          mcc_consume_token(LPARENTHESIS);
                          indexName = Word();
                          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
                          case LOWEREQUAL:
                          case GREATEREQUAL:
                          case LANGLE:
                          case RANGLE:
                            left = RelationOp();
                            expr = Expression();
                            switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
                            case COMMA:
                              mcc_consume_token(COMMA);
                              indexName2 = Word();
                              right = RelationOp();
                              expr2 = Expression();
                              break;
                            default:
                              mcc_la1[82] = mcc_gen;
                              ;
                              break;
                            }
                            break;
                          default:
                            mcc_la1[83] = mcc_gen;
                            ;
                            break;
                          }
                          mcc_consume_token(RPARENTHESIS);
                          mcc_consume_token(RBRACE);
                          mcc_consume_token(SEMI);
                          seq2 = RewriteSequence();
                  varDecls.PopScope(variableList1);
                          mcc_consume_token(RBRACE);
                bool ascending;
                if(str == "ascending")
                    ascending = true;
                else if(str == "descending")
                    ascending = false;
                else
                    {throw new SequenceParserExceptionIndexUnknownAccessDirection(str, indexName);}
                if(indexName2 != null) {
                    if(indexName != indexName2)
                        {throw new SequenceParserExceptionIndexConflictingNames(indexName, indexName2);}
                }
                {return new SequenceForIndexAccessOrdering(fromVar, ascending, indexName, expr, left, expr2, right, seq2, variableList1);}
                          break;
                        default:
                          mcc_la1[84] = mcc_gen;
                          mcc_consume_token(-1);
                          throw new ParseException();
                        }
                      }
                    } else if (mcc_2_74(3)) {
                      mcc_consume_token(IN);
                      str = Word();
                      mcc_consume_token(LPARENTHESIS);
                      if (mcc_2_71(1)) {
                        Arguments(argExprs);
                      } else {
                        ;
                      }
                      mcc_consume_token(RPARENTHESIS);
                      mcc_consume_token(SEMI);
                      seq = RewriteSequence();
              varDecls.PopScope(variableList1);
                      mcc_consume_token(RBRACE);
            if(str == "adjacent") {
                {return new SequenceForFunction(SequenceType.ForAdjacentNodes, fromVar, argExprs, seq, variableList1);}
            } else if(str == "adjacentIncoming") {
                {return new SequenceForFunction(SequenceType.ForAdjacentNodesViaIncoming, fromVar, argExprs, seq, variableList1);}
            } else if(str == "adjacentOutgoing") {
                {return new SequenceForFunction(SequenceType.ForAdjacentNodesViaOutgoing, fromVar, argExprs, seq, variableList1);}
            } else if(str == "incident") {
                {return new SequenceForFunction(SequenceType.ForIncidentEdges, fromVar, argExprs, seq, variableList1);}
            } else if(str == "incoming") {
                {return new SequenceForFunction(SequenceType.ForIncomingEdges, fromVar, argExprs, seq, variableList1);}
            } else if(str == "outgoing") {
                {return new SequenceForFunction(SequenceType.ForOutgoingEdges, fromVar, argExprs, seq, variableList1);}
            } else if(str == "reachable") {
                {return new SequenceForFunction(SequenceType.ForReachableNodes, fromVar, argExprs, seq, variableList1);}
            } else if(str == "reachableIncoming") {
                {return new SequenceForFunction(SequenceType.ForReachableNodesViaIncoming, fromVar, argExprs, seq, variableList1);}
            } else if(str == "reachableOutgoing") {
                {return new SequenceForFunction(SequenceType.ForReachableNodesViaOutgoing, fromVar, argExprs, seq, variableList1);}
            } else if(str == "reachableEdges") {
                {return new SequenceForFunction(SequenceType.ForReachableEdges, fromVar, argExprs, seq, variableList1);}
            } else if(str == "reachableEdgesIncoming") {
                {return new SequenceForFunction(SequenceType.ForReachableEdgesViaIncoming, fromVar, argExprs, seq, variableList1);}
            } else if(str == "reachableEdgesOutgoing") {
                {return new SequenceForFunction(SequenceType.ForReachableEdgesViaOutgoing, fromVar, argExprs, seq, variableList1);}
            } else if(str == "boundedReachable") {
                {return new SequenceForFunction(SequenceType.ForBoundedReachableNodes, fromVar, argExprs, seq, variableList1);}
            } else if(str == "boundedReachableIncoming") {
                {return new SequenceForFunction(SequenceType.ForBoundedReachableNodesViaIncoming, fromVar, argExprs, seq, variableList1);}
            } else if(str == "boundedReachableOutgoing") {
                {return new SequenceForFunction(SequenceType.ForBoundedReachableNodesViaOutgoing, fromVar, argExprs, seq, variableList1);}
            } else if(str == "boundedReachableEdges") {
                {return new SequenceForFunction(SequenceType.ForBoundedReachableEdges, fromVar, argExprs, seq, variableList1);}
            } else if(str == "boundedReachableEdgesIncoming") {
                {return new SequenceForFunction(SequenceType.ForBoundedReachableEdgesViaIncoming, fromVar, argExprs, seq, variableList1);}
            } else if(str == "boundedReachableEdgesOutgoing") {
                {return new SequenceForFunction(SequenceType.ForBoundedReachableEdgesViaOutgoing, fromVar, argExprs, seq, variableList1);}
            } else if(str == "nodes") {
                {return new SequenceForFunction(SequenceType.ForNodes, fromVar, argExprs, seq, variableList1);}
            } else if(str == "edges") {
                {return new SequenceForFunction(SequenceType.ForEdges, fromVar, argExprs, seq, variableList1);}
            }
                    } else if (mcc_2_75(3)) {
                      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
                      case ARROW:
                        mcc_consume_token(ARROW);
                        fromVar2 = Variable();
                        break;
                      default:
                        mcc_la1[85] = mcc_gen;
                        ;
                        break;
                      }
                      mcc_consume_token(IN);
                      fromVar3 = VariableUse();
                      mcc_consume_token(SEMI);
                      seq = RewriteSequence();
              varDecls.PopScope(variableList1);
                      mcc_consume_token(RBRACE);
            {return new SequenceForContainer(fromVar, fromVar2, fromVar3, seq, variableList1);}
                    } else {
                      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
                      case IN:
                        mcc_consume_token(IN);
                        mcc_consume_token(LBOXBRACKET);
                        expr = Expression();
                        mcc_consume_token(COLON);
                        expr2 = Expression();
                        mcc_consume_token(RBOXBRACKET);
                        mcc_consume_token(SEMI);
                        seq = RewriteSequence();
              varDecls.PopScope(variableList1);
                        mcc_consume_token(RBRACE);
            {return new SequenceForIntegerRange(fromVar, expr, expr2, seq, variableList1);}
                        break;
                      default:
                        mcc_la1[86] = mcc_gen;
                        mcc_consume_token(-1);
                        throw new ParseException();
                      }
                    }
                    break;
                  case IN:
                    seqInSubgraph = InSubgraphSequence(false);
        {return seqInSubgraph;}
                    break;
                  default:
                    mcc_la1[94] = mcc_gen;
                    if (mcc_2_93(2)) {
                      mcc_consume_token(PARALLEL);
                      str = Word();
                      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
                      case LPARENTHESIS:
                        mcc_consume_token(LPARENTHESIS);
                        toVar = Variable();
                        mcc_consume_token(RPARENTHESIS);
                        mcc_consume_token(EQUAL);
                        break;
                      default:
                        mcc_la1[87] = mcc_gen;
                        ;
                        break;
                      }
                      seqInSubgraph = InSubgraphSequence(true);
                                                                                                                inSubgraphSequences.Add(seqInSubgraph);
        {return new SequenceParallelArrayExecute(seqInSubgraph, toVar);}
                    } else {
                      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
                      case PARALLEL:
                        mcc_consume_token(PARALLEL);
                        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
                        case LPARENTHESIS:
                          mcc_consume_token(LPARENTHESIS);
                          VariableList(variableList1);
                          mcc_consume_token(RPARENTHESIS);
                          mcc_consume_token(EQUAL);
                          break;
                        default:
                          mcc_la1[88] = mcc_gen;
                          ;
                          break;
                        }
                        seqInSubgraph = InSubgraphSequence(true);
                                                                                                   inSubgraphSequences.Add(seqInSubgraph);
                        while (true) {
                          if (mcc_2_76(2)) {
                            ;
                          } else {
                            goto label_20;
                          }
                          mcc_consume_token(COMMA);
                          seqInSubgraph = InSubgraphSequence(true);
                                                                   inSubgraphSequences.Add(seqInSubgraph);
                        }label_20: ;
                        
        {return new SequenceParallelExecute(inSubgraphSequences, variableList1);}
                        break;
                      case LOCK:
                        mcc_consume_token(LOCK);
                        mcc_consume_token(LPARENTHESIS);
                        expr = Expression();
                        mcc_consume_token(RPARENTHESIS);
                                       varDecls.PushScope(ScopeType.Lock);
                        mcc_consume_token(LBRACE);
                        seq = RewriteSequence();
                        mcc_consume_token(RBRACE);
                                        varDecls.PopScope(variableList1);
        {return new SequenceLock(expr, seq);}
                        break;
                      case LBRACE:
                      case PERCENT:
                        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
                        case PERCENT:
                          mcc_consume_token(PERCENT);
           special = true;
                          break;
                        default:
                          mcc_la1[89] = mcc_gen;
                          ;
                          break;
                        }
                        mcc_consume_token(LBRACE);
                                     varDecls.PushScope(ScopeType.Computation);
                        comp = CompoundComputation();
                                     varDecls.PopScope(variableList1);
                        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
                        case SEMI:
                          mcc_consume_token(SEMI);
                          break;
                        default:
                          mcc_la1[90] = mcc_gen;
                          ;
                          break;
                        }
                        mcc_consume_token(RBRACE);
        {return new SequenceBooleanComputation(comp, variableList1, special);}
                        break;
                      default:
                        mcc_la1[95] = mcc_gen;
                        mcc_consume_token(-1);
                        throw new ParseException();
                      }
                    }
                    break;
                  }
                }
                break;
              }
            }
            break;
          }
        }
        break;
      }
    }
    throw new Exception("Missing return statement in function");
  }

  public SequenceExecuteInSubgraph InSubgraphSequence(bool inParallel) {
    Sequence seq;
    SequenceExpression subgraphExpr, valueExpr = null;
    SequenceVariable variable = null;
    List<SequenceVariable> variableList1 = new List<SequenceVariable>();
    mcc_consume_token(IN);
    subgraphExpr = Expression();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case COMMA:
      mcc_consume_token(COMMA);
      valueExpr = Expression();
      break;
    default:
      mcc_la1[96] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(LBRACE);
              varDecls.PushScope(ScopeType.InSubgraph);
                if(inParallel && valueExpr != null)
                    variable = varDecls.Define("value", "internaltype");
    seq = RewriteSequence();
          varDecls.PopScope(variableList1);
    mcc_consume_token(RBRACE);
        if(valueExpr == null)
            {return new SequenceExecuteInSubgraph(subgraphExpr, seq, inParallel);}
        else
            {return new SequenceExecuteInSubgraph(subgraphExpr, valueExpr, variable, seq, inParallel);}
    throw new Exception("Missing return statement in function");
  }

  public SequenceComputation CompoundComputation() {
    SequenceComputation comp, compRight;
    comp = Computation();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case SEMI:
      mcc_consume_token(SEMI);
      compRight = CompoundComputation();
                {return new SequenceComputationThen(comp, compRight);}
      break;
    default:
      mcc_la1[97] = mcc_gen;
                {return comp;}
      break;
    }
    throw new Exception("Missing return statement in function");
  }

  public SequenceComputation Computation() {
    SequenceVariable toVar;
    SequenceExpression expr;
    SequenceComputation comp, assignOrExpr;
    AssignmentTarget tgt;
    if (mcc_2_94(2147483647)) {
      toVar = VariableDefinition();
      mcc_consume_token(GREATEREQUAL);
      assignOrExpr = ExpressionOrAssignment();
        {return new SequenceComputationAssignment(new AssignmentTargetVar(toVar), assignOrExpr);}
    } else if (mcc_2_95(2147483647)) {
      tgt = AssignmentTarget();
      mcc_consume_token(EQUAL);
      assignOrExpr = ExpressionOrAssignment();
        {return new SequenceComputationAssignment(tgt, assignOrExpr);}
    } else if (mcc_2_96(2)) {
      toVar = VariableDefinition();
        {return new SequenceComputationVariableDeclaration(toVar);}
    } else {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case LPARENTHESIS:
      case DOUBLECOLON:
      case WORD:
        comp = ProcedureOrMethodCall();
        {return comp;}
        break;
      case LBRACE:
        mcc_consume_token(LBRACE);
        expr = Expression();
        mcc_consume_token(RBRACE);
        {return expr;}
        break;
      default:
        mcc_la1[98] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Exception("Missing return statement in function");
  }

  public AssignmentTarget AssignmentTarget() {
    SequenceVariable toVar;
    AssignmentTarget target;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case YIELD:
      mcc_consume_token(YIELD);
      toVar = VariableUse();
        {return new AssignmentTargetYieldingVar(toVar);}
      break;
    default:
      mcc_la1[99] = mcc_gen;
      if (mcc_2_97(2)) {
        toVar = VariableDefinition();
        {return new AssignmentTargetVar(toVar);}
      } else {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case DOUBLECOLON:
        case WORD:
          toVar = VariableUse();
          target = AssignmentTargetSelector(toVar);
        {return target;}
          break;
        default:
          mcc_la1[100] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    }
    throw new Exception("Missing return statement in function");
  }

  public AssignmentTarget AssignmentTargetSelector(SequenceVariable toVar) {
    SequenceExpression fromExpr = null;
    String attrName;
    if (mcc_2_98(2)) {
      mcc_consume_token(DOT);
      attrName = Word();
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case LBOXBRACKET:
        mcc_consume_token(LBOXBRACKET);
        fromExpr = Expression();
        mcc_consume_token(RBOXBRACKET);
            {return new AssignmentTargetAttributeIndexed(toVar, attrName, fromExpr);}
        break;
      default:
        mcc_la1[101] = mcc_gen;
        ;
        break;
      }
        {return new AssignmentTargetAttribute(toVar, attrName);}
    } else {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case DOT:
        mcc_consume_token(DOT);
        mcc_consume_token(VISITED);
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case LBOXBRACKET:
          mcc_consume_token(LBOXBRACKET);
          fromExpr = Expression();
          mcc_consume_token(RBOXBRACKET);
          break;
        default:
          mcc_la1[102] = mcc_gen;
          ;
          break;
        }
        {return new AssignmentTargetVisited(toVar, fromExpr);}
        break;
      case LBOXBRACKET:
        mcc_consume_token(LBOXBRACKET);
        fromExpr = Expression();
        mcc_consume_token(RBOXBRACKET);
        {return new AssignmentTargetIndexedVar(toVar, fromExpr);}
        break;
      default:
        mcc_la1[103] = mcc_gen;
        {return new AssignmentTargetVar(toVar);}
        break;
      }
    }
    throw new Exception("Missing return statement in function");
  }

  public SequenceComputation ExpressionOrAssignment() {
    SequenceExpression expr;
    SequenceComputation assignOrExpr;
    AssignmentTarget tgt;
    SequenceVariable toVar;
    if (mcc_2_99(2147483647)) {
      toVar = VariableDefinition();
      mcc_consume_token(GREATEREQUAL);
      assignOrExpr = ExpressionOrAssignment();
        {return new SequenceComputationAssignment(new AssignmentTargetVar(toVar), assignOrExpr);}
    } else if (mcc_2_100(2147483647)) {
      tgt = AssignmentTarget();
      mcc_consume_token(EQUAL);
      assignOrExpr = ExpressionOrAssignment();
        {return new SequenceComputationAssignment(tgt, assignOrExpr);}
    } else if (mcc_2_101(1)) {
      expr = Expression();
        {return expr;}
    } else {
      mcc_consume_token(-1);
      throw new ParseException();
    }
    throw new Exception("Missing return statement in function");
  }

  public SequenceExpression Expression() {
    SequenceExpression exprOrCond, trueCase, falseCase;
    exprOrCond = ExpressionExcept();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case QUESTIONMARK:
      mcc_consume_token(QUESTIONMARK);
      trueCase = Expression();
      mcc_consume_token(COLON);
      falseCase = Expression();
          exprOrCond = new SequenceExpressionConditional(exprOrCond, trueCase, falseCase);
      break;
    default:
      mcc_la1[104] = mcc_gen;
      ;
      break;
    }
            {return exprOrCond;}
    throw new Exception("Missing return statement in function");
  }

  public SequenceExpression ExpressionExcept() {
    SequenceExpression exprOrLeft, right;
    exprOrLeft = ExpressionLazyOr();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case BACKSLASH:
        ;
        break;
      default:
        mcc_la1[105] = mcc_gen;
        goto label_21;
      }
      mcc_consume_token(BACKSLASH);
      right = ExpressionLazyOr();
                                          exprOrLeft = new SequenceExpressionExcept(exprOrLeft, right);
    }label_21: ;
    
            {return exprOrLeft;}
    throw new Exception("Missing return statement in function");
  }

  public SequenceExpression ExpressionLazyOr() {
    SequenceExpression exprOrLeft, right;
    exprOrLeft = ExpressionLazyAnd();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case DOUBLEPIPE:
        ;
        break;
      default:
        mcc_la1[106] = mcc_gen;
        goto label_22;
      }
      mcc_consume_token(DOUBLEPIPE);
      right = ExpressionLazyAnd();
                                           exprOrLeft = new SequenceExpressionLazyOr(exprOrLeft, right);
    }label_22: ;
    
            {return exprOrLeft;}
    throw new Exception("Missing return statement in function");
  }

  public SequenceExpression ExpressionLazyAnd() {
    SequenceExpression exprOrLeft, right;
    exprOrLeft = ExpressionStrictOr();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case DOUBLEAMPERSAND:
        ;
        break;
      default:
        mcc_la1[107] = mcc_gen;
        goto label_23;
      }
      mcc_consume_token(DOUBLEAMPERSAND);
      right = ExpressionStrictOr();
                                            exprOrLeft = new SequenceExpressionLazyAnd(exprOrLeft, right);
    }label_23: ;
    
            {return exprOrLeft;}
    throw new Exception("Missing return statement in function");
  }

  public SequenceExpression ExpressionStrictOr() {
    SequenceExpression exprOrLeft, right;
    exprOrLeft = ExpressionStrictXor();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case PIPE:
        ;
        break;
      default:
        mcc_la1[108] = mcc_gen;
        goto label_24;
      }
      mcc_consume_token(PIPE);
      right = ExpressionStrictXor();
                                            exprOrLeft = new SequenceExpressionStrictOr(exprOrLeft, right);
    }label_24: ;
    
            {return exprOrLeft;}
    throw new Exception("Missing return statement in function");
  }

  public SequenceExpression ExpressionStrictXor() {
    SequenceExpression exprOrLeft, right;
    exprOrLeft = ExpressionStrictAnd();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case CIRCUMFLEX:
        ;
        break;
      default:
        mcc_la1[109] = mcc_gen;
        goto label_25;
      }
      mcc_consume_token(CIRCUMFLEX);
      right = ExpressionStrictAnd();
                                            exprOrLeft = new SequenceExpressionStrictXor(exprOrLeft, right);
    }label_25: ;
    
            {return exprOrLeft;}
    throw new Exception("Missing return statement in function");
  }

  public SequenceExpression ExpressionStrictAnd() {
    SequenceExpression exprOrLeft, right;
    exprOrLeft = ExpressionEquality();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case AMPERSAND:
        ;
        break;
      default:
        mcc_la1[110] = mcc_gen;
        goto label_26;
      }
      mcc_consume_token(AMPERSAND);
      right = ExpressionEquality();
                                           exprOrLeft = new SequenceExpressionStrictAnd(exprOrLeft, right);
    }label_26: ;
    
            {return exprOrLeft;}
    throw new Exception("Missing return statement in function");
  }

  public SequenceExpression ExpressionEquality() {
    SequenceExpression exprOrLeft, right;
    exprOrLeft = ExpressionRelation();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case EQUALITY:
      case INEQUALITY:
      case STRUCTURALEQUAL:
        ;
        break;
      default:
        mcc_la1[111] = mcc_gen;
        goto label_27;
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case EQUALITY:
        mcc_consume_token(EQUALITY);
        right = ExpressionRelation();
                                            exprOrLeft = new SequenceExpressionEqual(exprOrLeft, right);
        break;
      case INEQUALITY:
        mcc_consume_token(INEQUALITY);
        right = ExpressionRelation();
                                            exprOrLeft = new SequenceExpressionNotEqual(exprOrLeft, right);
        break;
      case STRUCTURALEQUAL:
        mcc_consume_token(STRUCTURALEQUAL);
        right = ExpressionRelation();
                                            exprOrLeft = new SequenceExpressionStructuralEqual(exprOrLeft, right);
        break;
      default:
        mcc_la1[112] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }label_27: ;
    
        {return exprOrLeft;}
    throw new Exception("Missing return statement in function");
  }

  public SequenceExpression ExpressionRelation() {
    SequenceExpression exprOrLeft, right;
    exprOrLeft = ExpressionShift();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case LOWEREQUAL:
      case GREATEREQUAL:
      case LANGLE:
      case RANGLE:
      case IN:
        ;
        break;
      default:
        mcc_la1[113] = mcc_gen;
        goto label_28;
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case LANGLE:
        mcc_consume_token(LANGLE);
        right = ExpressionShift();
                                        exprOrLeft = new SequenceExpressionLower(exprOrLeft, right);
        break;
      case RANGLE:
        mcc_consume_token(RANGLE);
        right = ExpressionShift();
                                        exprOrLeft = new SequenceExpressionGreater(exprOrLeft, right);
        break;
      case LOWEREQUAL:
        mcc_consume_token(LOWEREQUAL);
        right = ExpressionShift();
                                         exprOrLeft = new SequenceExpressionLowerEqual(exprOrLeft, right);
        break;
      case GREATEREQUAL:
        mcc_consume_token(GREATEREQUAL);
        right = ExpressionShift();
                                         exprOrLeft = new SequenceExpressionGreaterEqual(exprOrLeft, right);
        break;
      case IN:
        mcc_consume_token(IN);
        right = ExpressionShift();
                                         exprOrLeft = new SequenceExpressionInContainerOrString(exprOrLeft, right);
        break;
      default:
        mcc_la1[114] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }label_28: ;
    
        {return exprOrLeft;}
    throw new Exception("Missing return statement in function");
  }

  public RelOpDirection RelationOp() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case LANGLE:
      mcc_consume_token(LANGLE);
        {return RelOpDirection.Smaller;}
      break;
    case RANGLE:
      mcc_consume_token(RANGLE);
        {return RelOpDirection.Greater;}
      break;
    case LOWEREQUAL:
      mcc_consume_token(LOWEREQUAL);
        {return RelOpDirection.SmallerEqual;}
      break;
    case GREATEREQUAL:
      mcc_consume_token(GREATEREQUAL);
        {return RelOpDirection.GreaterEqual;}
      break;
    default:
      mcc_la1[115] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    throw new Exception("Missing return statement in function");
  }

  public SequenceExpression ExpressionShift() {
    SequenceExpression exprOrLeft, right;
    exprOrLeft = ExpressionAdd();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case LLANGLE:
      case RRANGLE:
      case 79:
        ;
        break;
      default:
        mcc_la1[116] = mcc_gen;
        goto label_29;
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case LLANGLE:
        mcc_consume_token(LLANGLE);
        right = ExpressionAdd();
                                       exprOrLeft = new SequenceExpressionShiftLeft(exprOrLeft, right);
        break;
      case RRANGLE:
        mcc_consume_token(RRANGLE);
        right = ExpressionAdd();
                                       exprOrLeft = new SequenceExpressionShiftRight(exprOrLeft, right);
        break;
      case 79:
        mcc_consume_token(79);
        right = ExpressionAdd();
                                        exprOrLeft = new SequenceExpressionShiftRightUnsigned(exprOrLeft, right);
        break;
      default:
        mcc_la1[117] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }label_29: ;
    
        {return exprOrLeft;}
    throw new Exception("Missing return statement in function");
  }

  public SequenceExpression ExpressionAdd() {
    SequenceExpression exprOrLeft, right;
    exprOrLeft = ExpressionMul();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case PLUS:
      case 80:
        ;
        break;
      default:
        mcc_la1[118] = mcc_gen;
        goto label_30;
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case PLUS:
        mcc_consume_token(PLUS);
        right = ExpressionMul();
                                      exprOrLeft = new SequenceExpressionPlus(exprOrLeft, right);
        break;
      case 80:
        mcc_consume_token(80);
        right = ExpressionMul();
                                      exprOrLeft = new SequenceExpressionMinus(exprOrLeft, right);
        break;
      default:
        mcc_la1[119] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }label_30: ;
    
        {return exprOrLeft;}
    throw new Exception("Missing return statement in function");
  }

  public SequenceExpression ExpressionMul() {
    SequenceExpression exprOrLeft, right;
    exprOrLeft = ExpressionUnary();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case STAR:
      case DIV:
      case PERCENT:
        ;
        break;
      default:
        mcc_la1[120] = mcc_gen;
        goto label_31;
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case STAR:
        mcc_consume_token(STAR);
        right = ExpressionUnary();
                                        exprOrLeft = new SequenceExpressionMul(exprOrLeft, right);
        break;
      case DIV:
        mcc_consume_token(DIV);
        right = ExpressionUnary();
                                        exprOrLeft = new SequenceExpressionDiv(exprOrLeft, right);
        break;
      case PERCENT:
        mcc_consume_token(PERCENT);
        right = ExpressionUnary();
                                        exprOrLeft = new SequenceExpressionMod(exprOrLeft, right);
        break;
      default:
        mcc_la1[121] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }label_31: ;
    
        {return exprOrLeft;}
    throw new Exception("Missing return statement in function");
  }

  public SequenceExpression ExpressionUnary() {
    SequenceExpression seq;
    object type;
    if (mcc_2_102(2147483647)) {
      mcc_consume_token(LPARENTHESIS);
      type = Constant();
      mcc_consume_token(RPARENTHESIS);
      seq = ExpressionBasic();
        {return new SequenceExpressionCast(seq, type);}
    } else {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case EXCLAMATIONMARK:
        mcc_consume_token(EXCLAMATIONMARK);
        seq = ExpressionBasic();
        {return new SequenceExpressionNot(seq);}
        break;
      case 80:
        mcc_consume_token(80);
        seq = ExpressionBasic();
        {return new SequenceExpressionUnaryMinus(seq);}
        break;
      case PLUS:
        mcc_consume_token(PLUS);
        seq = ExpressionBasic();
        {return new SequenceExpressionUnaryPlus(seq);}
        break;
      case BITWISECOMPLEMENT:
        mcc_consume_token(BITWISECOMPLEMENT);
        seq = ExpressionBasic();
        {return new SequenceExpressionBitwiseComplement(seq);}
        break;
      default:
        mcc_la1[122] = mcc_gen;
        if (mcc_2_103(1)) {
          seq = ExpressionBasic();
        {return seq;}
        } else {
          mcc_consume_token(-1);
          throw new ParseException();
        }
        break;
      }
    }
    throw new Exception("Missing return statement in function");
  }

  public SequenceExpression ExpressionBasic() {
    List<SequenceExpression> argExprs = new List<SequenceExpression>();
    SequenceVariable fromVar;
    String elemName;
    String type;
    SequenceExpression expr;
    object constant;
    if (mcc_2_104(3)) {
      expr = RuleQuery();
      expr = SelectorExpression(expr);
        {return expr;}
    } else if (mcc_2_105(3)) {
      expr = MultiRuleQuery();
      expr = SelectorExpression(expr);
        {return expr;}
    } else {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case LBOXBRACKET:
        expr = MappingClause();
        expr = SelectorExpression(expr);
        {return expr;}
        break;
      default:
        mcc_la1[123] = mcc_gen;
        if (mcc_2_106(2147483647)) {
          expr = FunctionCall();
          expr = SelectorExpression(expr);
        {return expr;}
        } else {
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case SCAN:
          case TRYSCAN:
            expr = ScanFunctionCall();
            expr = SelectorExpression(expr);
        {return expr;}
            break;
          default:
            mcc_la1[124] = mcc_gen;
            if (mcc_2_107(2)) {
              constant = Constant();
        {return new SequenceExpressionConstant(constant);}
            } else if (mcc_2_108(2)) {
              expr = InitContainerExpr();
              expr = SelectorExpression(expr);
        {return expr;}
            } else if (mcc_2_109(2)) {
              expr = InitMatchClassExpr();
              expr = SelectorExpression(expr);
        {return expr;}
            } else {
              switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
              case NEW:
                mcc_consume_token(NEW);
                type = TypeNonGeneric();
                expr = ExpressionInitObjectCont(type);
        {return expr;}
                break;
              case DEF:
                mcc_consume_token(DEF);
                mcc_consume_token(LPARENTHESIS);
                Arguments(argExprs);
                mcc_consume_token(RPARENTHESIS);
        {return new SequenceExpressionDef(argExprs.ToArray());}
                break;
              case DOUBLECOLON:
              case WORD:
                fromVar = VariableUse();
                            expr = new SequenceExpressionVariable(fromVar);
                expr = SelectorExpression(expr);
        {return expr;}
                break;
              case AT:
                mcc_consume_token(AT);
                mcc_consume_token(LPARENTHESIS);
                elemName = Text();
                mcc_consume_token(RPARENTHESIS);
        {return new SequenceExpressionElementFromGraph(elemName);}
                break;
              case THIS:
                mcc_consume_token(THIS);
             expr = new SequenceExpressionThis(env.RuleOfMatchThis, env.TypeOfGraphElementThis);
                expr = SelectorExpression(expr);
        {return expr;}
                break;
              case LPARENTHESIS:
                mcc_consume_token(LPARENTHESIS);
                expr = Expression();
                mcc_consume_token(RPARENTHESIS);
        {return expr;}
                break;
              default:
                mcc_la1[125] = mcc_gen;
                mcc_consume_token(-1);
                throw new ParseException();
              }
            }
            break;
          }
        }
        break;
      }
    }
    throw new Exception("Missing return statement in function");
  }

  public SequenceExpression ExpressionInitObjectCont(String internalObjectType) {
    List<KeyValuePair<String, SequenceExpression>> attributes = new List<KeyValuePair<String, SequenceExpression>>();
    KeyValuePair<String, SequenceExpression> attribute;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case LPARENTHESIS:
      mcc_consume_token(LPARENTHESIS);
      mcc_consume_token(RPARENTHESIS);
        {return new SequenceExpressionNew(internalObjectType);}
      break;
    case AT:
      mcc_consume_token(AT);
      mcc_consume_token(LPARENTHESIS);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case WORD:
        attribute = AttributeInitialization();
                                                   attributes.Add(attribute);
        break;
      default:
        mcc_la1[126] = mcc_gen;
        ;
        break;
      }
      while (true) {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case COMMA:
          ;
          break;
        default:
          mcc_la1[127] = mcc_gen;
          goto label_32;
        }
        mcc_consume_token(COMMA);
        attribute = AttributeInitialization();
                                                                                                                              attributes.Add(attribute);
      }label_32: ;
      
      mcc_consume_token(RPARENTHESIS);
        {return new SequenceExpressionNew(internalObjectType, attributes);}
      break;
    default:
      mcc_la1[128] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    throw new Exception("Missing return statement in function");
  }

  public KeyValuePair<String, SequenceExpression> AttributeInitialization() {
    String attribute;
    SequenceExpression expr;
    attribute = Word();
    mcc_consume_token(EQUAL);
    expr = Expression();
        {return new KeyValuePair<String, SequenceExpression>(attribute, expr);}
    throw new Exception("Missing return statement in function");
  }

  public SequenceExpression SelectorExpression(SequenceExpression fromExpr) {
    String methodOrAttrName;
    String extendedMethodName = null, methodNameExtension = null, methodNameExtension2 = null;
    String memberOrAttribute = null;
    String typeName;
    SequenceVariable initArrayAccess = null;
    Tuple<SequenceVariable, SequenceVariable, SequenceVariable, SequenceVariable> arrayAccessWithPreviousAccumulationAccessWithIndexWithValue = null;
    SequenceExpression expr = null, initExpr = null;
    List<SequenceExpression> argExprs = new List<SequenceExpression>();
    List<SequenceVariable> variableList = new List<SequenceVariable>();
    if (mcc_2_116(2)) {
      mcc_consume_token(DOT);
      methodOrAttrName = Word();
      if (mcc_2_114(4)) {
        mcc_consume_token(LANGLE);
        memberOrAttribute = Word();
        mcc_consume_token(RANGLE);
        mcc_consume_token(LPARENTHESIS);
        if (mcc_2_110(1)) {
          Arguments(argExprs);
        } else {
          ;
        }
        mcc_consume_token(RPARENTHESIS);
              expr = env.CreateSequenceExpressionArrayAttributeAccessMethodCall(fromExpr, methodOrAttrName, memberOrAttribute, argExprs);
      } else {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case LANGLE:
          mcc_consume_token(LANGLE);
          if (mcc_2_111(2)) {
            typeName = TypeNonGeneric();
          } else {
            switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
            case WORD:
              typeName = MatchType();
              break;
            default:
              mcc_la1[129] = mcc_gen;
              mcc_consume_token(-1);
              throw new ParseException();
            }
          }
          mcc_consume_token(RANGLE);
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case WORD:
            extendedMethodName = methodOrAttrName;
            methodNameExtension = Word();
                                                                                  extendedMethodName += methodNameExtension;
            mcc_consume_token(LBRACE);
                                                                                                                                     varDecls.PushScope(ScopeType.Computation);
            if (mcc_2_112(2147483647)) {
              initArrayAccess = VariableDefinition();
              mcc_consume_token(SEMI);
            } else {
              ;
            }
            initExpr = Expression();
              varDecls.PopScope(variableList);
            mcc_consume_token(RBRACE);
            methodNameExtension2 = Word();
                                                                                   extendedMethodName += methodNameExtension2;
            break;
          default:
            mcc_la1[130] = mcc_gen;
            ;
            break;
          }
          mcc_consume_token(LBRACE);
              varDecls.PushScope(ScopeType.Computation);
          arrayAccessWithPreviousAccumulationAccessWithIndexWithValue = LambdaExprVarDeclPrefix();
          expr = Expression();
          varDecls.PopScope(variableList);
          mcc_consume_token(RBRACE);
                if(extendedMethodName != null) {
                    expr = env.CreateSequenceExpressionPerElementMethodCall(fromExpr, extendedMethodName, typeName,
                        initArrayAccess, initExpr,
                        arrayAccessWithPreviousAccumulationAccessWithIndexWithValue.Item1, arrayAccessWithPreviousAccumulationAccessWithIndexWithValue.Item2, arrayAccessWithPreviousAccumulationAccessWithIndexWithValue.Item3, arrayAccessWithPreviousAccumulationAccessWithIndexWithValue.Item4, expr);
                } else {
                    expr = env.CreateSequenceExpressionPerElementMethodCall(fromExpr, methodOrAttrName, typeName,
                        arrayAccessWithPreviousAccumulationAccessWithIndexWithValue.Item1, arrayAccessWithPreviousAccumulationAccessWithIndexWithValue.Item3, arrayAccessWithPreviousAccumulationAccessWithIndexWithValue.Item4, expr);
                }
          break;
        default:
          mcc_la1[131] = mcc_gen;
          if (GetToken(0).kind == WORD && GetToken(0).image == "removeIf") {
            mcc_consume_token(LBRACE);
              varDecls.PushScope(ScopeType.Computation);
            arrayAccessWithPreviousAccumulationAccessWithIndexWithValue = LambdaExprVarDeclPrefix();
            expr = Expression();
          varDecls.PopScope(variableList);
            mcc_consume_token(RBRACE);
                expr = env.CreateSequenceExpressionPerElementMethodCall(fromExpr, methodOrAttrName, null,
                    arrayAccessWithPreviousAccumulationAccessWithIndexWithValue.Item1, arrayAccessWithPreviousAccumulationAccessWithIndexWithValue.Item3, arrayAccessWithPreviousAccumulationAccessWithIndexWithValue.Item4, expr);
          } else {
            switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
            case LPARENTHESIS:
              mcc_consume_token(LPARENTHESIS);
              if (mcc_2_113(1)) {
                Arguments(argExprs);
              } else {
                ;
              }
              mcc_consume_token(RPARENTHESIS);
              expr = env.CreateSequenceExpressionFunctionMethodCall(fromExpr, methodOrAttrName, argExprs);
              break;
            default:
              mcc_la1[132] = mcc_gen;
          expr = new SequenceExpressionAttributeOrMatchAccess(fromExpr, methodOrAttrName);
              break;
            }
          }
          break;
        }
      }
      expr = SelectorExpression(expr);
        {return expr;}
    } else {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case DOT:
        mcc_consume_token(DOT);
        mcc_consume_token(VISITED);
        if (mcc_2_115(2)) {
          mcc_consume_token(LBOXBRACKET);
          expr = Expression();
          mcc_consume_token(RBOXBRACKET);
        } else {
          ;
        }
          expr = new SequenceExpressionIsVisited(fromExpr, expr);
        expr = SelectorExpression(expr);
        {return expr;}
        break;
      case LBOXBRACKET:
        mcc_consume_token(LBOXBRACKET);
        expr = Expression();
        mcc_consume_token(RBOXBRACKET);
          expr = new SequenceExpressionContainerAccess(fromExpr, expr);
        expr = SelectorExpression(expr);
        {return expr;}
        break;
      default:
        mcc_la1[133] = mcc_gen;
        {return fromExpr;}
        break;
      }
    }
    throw new Exception("Missing return statement in function");
  }

  public Tuple<SequenceVariable, SequenceVariable, SequenceVariable, SequenceVariable> LambdaExprVarDeclPrefix() {
    SequenceVariable arrayAccess;
    Tuple<SequenceVariable, SequenceVariable, SequenceVariable> previousAccumulationAccessWithIndexWithValue;
    if (mcc_2_117(2147483647)) {
      arrayAccess = VariableDefinition();
      mcc_consume_token(SEMI);
      previousAccumulationAccessWithIndexWithValue = MaybePreviousAccumulationAccessLambdaExprVarDecl();
        {return new Tuple<SequenceVariable, SequenceVariable, SequenceVariable, SequenceVariable>(arrayAccess, previousAccumulationAccessWithIndexWithValue.Item1,
            previousAccumulationAccessWithIndexWithValue.Item2, previousAccumulationAccessWithIndexWithValue.Item3);}
    } else {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case WORD:
        previousAccumulationAccessWithIndexWithValue = MaybePreviousAccumulationAccessLambdaExprVarDecl();
        {return new Tuple<SequenceVariable, SequenceVariable, SequenceVariable, SequenceVariable>(null, previousAccumulationAccessWithIndexWithValue.Item1,
            previousAccumulationAccessWithIndexWithValue.Item2, previousAccumulationAccessWithIndexWithValue.Item3);}
        break;
      default:
        mcc_la1[134] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Exception("Missing return statement in function");
  }

  public Tuple<SequenceVariable, SequenceVariable, SequenceVariable> MaybePreviousAccumulationAccessLambdaExprVarDecl() {
    SequenceVariable previousAccumulationAccess;
    Tuple<SequenceVariable, SequenceVariable> indexWithValue;
    if (mcc_2_118(2147483647)) {
      previousAccumulationAccess = VariableDefinition();
      mcc_consume_token(COMMA);
      indexWithValue = MaybeIndexedLambdaExprVarDecl();
        {return new Tuple<SequenceVariable, SequenceVariable, SequenceVariable>(previousAccumulationAccess, indexWithValue.Item1, indexWithValue.Item2);}
    } else {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case WORD:
        indexWithValue = MaybeIndexedLambdaExprVarDecl();
        {return new Tuple<SequenceVariable, SequenceVariable, SequenceVariable>(null, indexWithValue.Item1, indexWithValue.Item2);}
        break;
      default:
        mcc_la1[135] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Exception("Missing return statement in function");
  }

  public Tuple<SequenceVariable, SequenceVariable> MaybeIndexedLambdaExprVarDecl() {
    SequenceVariable index, var;
    if (mcc_2_119(2147483647)) {
      index = VariableDefinitionNonGeneric();
      mcc_consume_token(ARROW);
      var = VariableDefinition();
      mcc_consume_token(ARROW);
        {return new Tuple<SequenceVariable, SequenceVariable>(index, var);}
    } else {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case WORD:
        var = VariableDefinition();
        mcc_consume_token(ARROW);
        {return new Tuple<SequenceVariable, SequenceVariable>(null, var);}
        break;
      default:
        mcc_la1[136] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Exception("Missing return statement in function");
  }

  public SequenceComputation ProcedureOrMethodCall() {
    String procedure, attrName = null, package = null;
    SequenceVariable fromVar = null;
    List<SequenceExpression> argExprs = new List<SequenceExpression>();
    List<SequenceVariable> returnVars = new List<SequenceVariable>();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case LPARENTHESIS:
      mcc_consume_token(LPARENTHESIS);
      VariableList(returnVars);
      mcc_consume_token(RPARENTHESIS);
      mcc_consume_token(EQUAL);
      break;
    default:
      mcc_la1[137] = mcc_gen;
      ;
      break;
    }
    if (mcc_2_120(2)) {
      package = Word();
      mcc_consume_token(DOUBLECOLON);
    } else {
      ;
    }
    if (mcc_2_122(2)) {
      fromVar = VariableUse();
      mcc_consume_token(DOT);
      if (mcc_2_121(2)) {
        attrName = Word();
        mcc_consume_token(DOT);
      } else {
        ;
      }
    } else {
      ;
    }
    procedure = Word();
    mcc_consume_token(LPARENTHESIS);
    if (mcc_2_123(1)) {
      Arguments(argExprs);
    } else {
      ;
    }
    mcc_consume_token(RPARENTHESIS);
        if(fromVar == null) // procedure call
        {
            {return env.CreateSequenceComputationProcedureCall(procedure, package, argExprs, returnVars);}
        }
        else
        { // method call
            if(attrName == null)
            {
                {return env.CreateSequenceComputationProcedureMethodCall(fromVar, procedure, argExprs, returnVars);}
            } else { // attribute method call
                SequenceExpressionAttributeAccess attrAcc = new SequenceExpressionAttributeAccess(new SequenceExpressionVariable(fromVar), attrName);
                {return env.CreateSequenceComputationProcedureMethodCall(attrAcc, procedure, argExprs, returnVars);}
            }
        }
    throw new Exception("Missing return statement in function");
  }

  public SequenceExpression FunctionCall() {
    String function, package = null;
    List<SequenceExpression> argExprs = new List<SequenceExpression>();
    if (mcc_2_124(2)) {
      package = Word();
      mcc_consume_token(DOUBLECOLON);
    } else {
      ;
    }
    function = Word();
    mcc_consume_token(LPARENTHESIS);
    if (mcc_2_125(1)) {
      Arguments(argExprs);
    } else {
      ;
    }
    mcc_consume_token(RPARENTHESIS);
        {return env.CreateSequenceExpressionFunctionCall(function, package, argExprs);}
    throw new Exception("Missing return statement in function");
  }

  public SequenceExpression ScanFunctionCall() {
    Token function;
    String type = null;
    List<SequenceExpression> argExprs = new List<SequenceExpression>();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case SCAN:
      function = mcc_consume_token(SCAN);
      break;
    case TRYSCAN:
      function = mcc_consume_token(TRYSCAN);
      break;
    default:
      mcc_la1[138] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case LANGLE:
      mcc_consume_token(LANGLE);
      type = TypeOrContainerTypeContinuation();
      break;
    default:
      mcc_la1[139] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(LPARENTHESIS);
    Argument(argExprs);
    mcc_consume_token(RPARENTHESIS);
        if(function.image == "scan")
            {return new SequenceExpressionScan(type, argExprs[0]);}
        else //function.image == "tryscan"
            {return new SequenceExpressionTryScan(type, argExprs[0]);}
    throw new Exception("Missing return statement in function");
  }

  public String TypeOrContainerTypeContinuation() {
    String type;
    String typeParam, typeParamDst;
    if (GetToken(1).kind == WORD && GetToken(1).image == "set") {
      Word();
      mcc_consume_token(LANGLE);
      typeParam = TypeNonGeneric();
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case RANGLE:
        mcc_consume_token(RANGLE);
        mcc_consume_token(RANGLE);
        break;
      case RRANGLE:
        mcc_consume_token(RRANGLE);
        break;
      default:
        mcc_la1[140] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
                                                            type = "set<" + typeParam + ">";
        {return type;}
    } else if (GetToken(1).kind == WORD && GetToken(1).image == "map") {
      Word();
      mcc_consume_token(LANGLE);
      typeParam = TypeNonGeneric();
      mcc_consume_token(COMMA);
      typeParamDst = TypeNonGeneric();
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case RANGLE:
        mcc_consume_token(RANGLE);
        mcc_consume_token(RANGLE);
        break;
      case RRANGLE:
        mcc_consume_token(RRANGLE);
        break;
      default:
        mcc_la1[141] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
                                                                                               type = "map<" + typeParam + "," + typeParamDst + ">";
        {return type;}
    } else if (GetToken(1).kind == WORD && GetToken(1).image == "array") {
      Word();
      mcc_consume_token(LANGLE);
      typeParam = TypeNonGeneric();
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case RANGLE:
        mcc_consume_token(RANGLE);
        mcc_consume_token(RANGLE);
        break;
      case RRANGLE:
        mcc_consume_token(RRANGLE);
        break;
      default:
        mcc_la1[142] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
                                                             type = "array<" + typeParam + ">";
        {return type;}
    } else if (GetToken(1).kind == WORD && GetToken(1).image == "deque") {
      Word();
      mcc_consume_token(LANGLE);
      typeParam = TypeNonGeneric();
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case RANGLE:
        mcc_consume_token(RANGLE);
        mcc_consume_token(RANGLE);
        break;
      case RRANGLE:
        mcc_consume_token(RRANGLE);
        break;
      default:
        mcc_la1[143] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
                                                             type = "deque<" + typeParam + ">";
        {return type;}
    } else {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case WORD:
        type = TypeNonGeneric();
        mcc_consume_token(RANGLE);
        {return type;}
        break;
      default:
        mcc_la1[144] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Exception("Missing return statement in function");
  }

  public Sequence RulePrefixedSequence() {
    SequenceRuleCall rule;
    Sequence seq;
    List<SequenceVariable> variableList = new List<SequenceVariable>();
    mcc_consume_token(LBOXBRACKET);
    mcc_consume_token(FOR);
    mcc_consume_token(LBRACE);
                    varDecls.PushScope(ScopeType.ForRulePrefixedSequence);
    rule = RuleForMultiRuleAllCall(false);
    mcc_consume_token(SEMI);
    seq = RewriteSequence();
                                varDecls.PopScope(variableList);
    mcc_consume_token(RBRACE);
    mcc_consume_token(RBOXBRACKET);
        {return new SequenceRulePrefixedSequence(rule, seq, variableList);}
    throw new Exception("Missing return statement in function");
  }

  public Sequence MultiRulePrefixedSequence() {
    SequenceRuleCall rule;
    Sequence seq;
    List<SequenceVariable> variableList = new List<SequenceVariable>();
    List<SequenceRulePrefixedSequence> rulePrefixedSequences = new List<SequenceRulePrefixedSequence>();
    SequenceMultiRulePrefixedSequence seqMultiRulePrefixedSequence;
    SequenceFilterCallBase filter = null;
    mcc_consume_token(LBOXBRACKET);
    mcc_consume_token(LBOXBRACKET);
    mcc_consume_token(FOR);
    mcc_consume_token(LBRACE);
                        varDecls.PushScope(ScopeType.ForRulePrefixedSequence);
    rule = RuleForMultiRuleAllCall(false);
    mcc_consume_token(SEMI);
    seq = RewriteSequence();
                                varDecls.PopScope(variableList);
                                                                     rulePrefixedSequences.Add(new SequenceRulePrefixedSequence(rule, seq, variableList));
    mcc_consume_token(RBRACE);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case COMMA:
        ;
        break;
      default:
        mcc_la1[145] = mcc_gen;
        goto label_33;
      }
      mcc_consume_token(COMMA);
      mcc_consume_token(FOR);
      mcc_consume_token(LBRACE);
                          varDecls.PushScope(ScopeType.ForRulePrefixedSequence);
      rule = RuleForMultiRuleAllCall(false);
      mcc_consume_token(SEMI);
      seq = RewriteSequence();
                                    varDecls.PopScope(variableList);
                                                                         rulePrefixedSequences.Add(new SequenceRulePrefixedSequence(rule, seq, variableList));
      mcc_consume_token(RBRACE);
    }label_33: ;
    
    mcc_consume_token(RBOXBRACKET);
              seqMultiRulePrefixedSequence = new SequenceMultiRulePrefixedSequence(rulePrefixedSequences);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case BACKSLASH:
        ;
        break;
      default:
        mcc_la1[146] = mcc_gen;
        goto label_34;
      }
      mcc_consume_token(BACKSLASH);
      filter = Filter(null, true);
                                           seqMultiRulePrefixedSequence.AddFilterCall(filter);
    }label_34: ;
    
    mcc_consume_token(RBOXBRACKET);
        {return seqMultiRulePrefixedSequence;}
    throw new Exception("Missing return statement in function");
  }

  public Sequence MultiRuleAllCall(bool returnsArrays) {
    Sequence seq;
    List<Sequence> sequences = new List<Sequence>();
    SequenceMultiRuleAllCall seqMultiRuleAll;
    SequenceFilterCallBase filter = null;
    mcc_consume_token(LBOXBRACKET);
    mcc_consume_token(LBOXBRACKET);
    seq = RuleForMultiRuleAllCall(returnsArrays);
                                                         sequences.Add(seq);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case COMMA:
        ;
        break;
      default:
        mcc_la1[147] = mcc_gen;
        goto label_35;
      }
      mcc_consume_token(COMMA);
      seq = RuleForMultiRuleAllCall(returnsArrays);
                                                           sequences.Add(seq);
    }label_35: ;
    
    mcc_consume_token(RBOXBRACKET);
              seqMultiRuleAll = new SequenceMultiRuleAllCall(sequences);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case BACKSLASH:
        ;
        break;
      default:
        mcc_la1[148] = mcc_gen;
        goto label_36;
      }
      mcc_consume_token(BACKSLASH);
      filter = Filter(null, true);
                                           seqMultiRuleAll.AddFilterCall(filter);
    }label_36: ;
    
    mcc_consume_token(RBOXBRACKET);
        {return seqMultiRuleAll;}
    throw new Exception("Missing return statement in function");
  }

  public SequenceRuleCall RuleForMultiRuleAllCall(bool returnsArrays) {
    bool special = false, test = false;
    String str, package = null;
    List<SequenceExpression> argExprs = new List<SequenceExpression>();
    List<SequenceVariable> returnVars = new List<SequenceVariable>();
    SequenceRuleCall ruleCall;
    SequenceFilterCallBase filter = null;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case LPARENTHESIS:
      mcc_consume_token(LPARENTHESIS);
      VariableList(returnVars);
      mcc_consume_token(RPARENTHESIS);
      mcc_consume_token(EQUAL);
      break;
    default:
      mcc_la1[149] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case PERCENT:
    case QUESTIONMARK:
      if (mcc_2_126(2)) {
        mcc_consume_token(QUESTIONMARK);
        mcc_consume_token(PERCENT);
                                test = true; special = true;
      } else if (mcc_2_127(2)) {
        mcc_consume_token(PERCENT);
        mcc_consume_token(QUESTIONMARK);
                                                                                        special = true; test = true;
      } else {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case QUESTIONMARK:
          mcc_consume_token(QUESTIONMARK);
                                                                                                                               test = true;
          break;
        case PERCENT:
          mcc_consume_token(PERCENT);
                                                                                                                                                      special = true;
          break;
        default:
          mcc_la1[150] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      mcc_la1[151] = mcc_gen;
      ;
      break;
    }
    if (mcc_2_128(2)) {
      package = Word();
      mcc_consume_token(DOUBLECOLON);
    } else {
      ;
    }
    str = Word();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case LPARENTHESIS:
      mcc_consume_token(LPARENTHESIS);
      if (mcc_2_129(1)) {
        Arguments(argExprs);
      } else {
        ;
      }
      mcc_consume_token(RPARENTHESIS);
      break;
    default:
      mcc_la1[152] = mcc_gen;
      ;
      break;
    }
            ruleCall = env.CreateSequenceRuleCall(str, package, argExprs, returnVars, null,
                special, test, returnsArrays);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case BACKSLASH:
        ;
        break;
      default:
        mcc_la1[153] = mcc_gen;
        goto label_37;
      }
      mcc_consume_token(BACKSLASH);
      filter = Filter(ruleCall, false);
                                                    ruleCall.AddFilterCall(filter);
    }label_37: ;
    
                {return ruleCall;}
    throw new Exception("Missing return statement in function");
  }

  public void RuleLookahead() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case LPARENTHESIS:
      mcc_consume_token(LPARENTHESIS);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case WORD:
        Word();
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case COLON:
          mcc_consume_token(COLON);
          if (GetToken(1).kind == WORD && (GetToken(1).image == "set" || GetToken(1).image == "array" || GetToken(1).image == "deque")) {
            Word();
            mcc_consume_token(LANGLE);
            TypeNonGeneric();
            mcc_consume_token(RANGLE);
          } else if (GetToken(1).kind == WORD && GetToken(1).image == "map") {
            Word();
            mcc_consume_token(LANGLE);
            TypeNonGeneric();
            mcc_consume_token(COMMA);
            TypeNonGeneric();
            mcc_consume_token(RANGLE);
          } else {
            switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
            case WORD:
              TypeNonGeneric();
              break;
            default:
              mcc_la1[154] = mcc_gen;
              mcc_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        default:
          mcc_la1[155] = mcc_gen;
          ;
          break;
        }
        break;
      case DOUBLECOLON:
        mcc_consume_token(DOUBLECOLON);
        Word();
        break;
      default:
        mcc_la1[156] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      while (true) {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case COMMA:
          ;
          break;
        default:
          mcc_la1[157] = mcc_gen;
          goto label_38;
        }
        mcc_consume_token(COMMA);
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case WORD:
          Word();
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case COLON:
            mcc_consume_token(COLON);
            if (GetToken(1).kind == WORD && (GetToken(1).image == "set" || GetToken(1).image == "array" || GetToken(1).image == "deque")) {
              Word();
              mcc_consume_token(LANGLE);
              TypeNonGeneric();
              mcc_consume_token(RANGLE);
            } else if (GetToken(1).kind == WORD && GetToken(1).image == "map") {
              Word();
              mcc_consume_token(LANGLE);
              TypeNonGeneric();
              mcc_consume_token(COMMA);
              TypeNonGeneric();
              mcc_consume_token(RANGLE);
            } else {
              switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
              case WORD:
                TypeNonGeneric();
                break;
              default:
                mcc_la1[158] = mcc_gen;
                mcc_consume_token(-1);
                throw new ParseException();
              }
            }
            break;
          default:
            mcc_la1[159] = mcc_gen;
            ;
            break;
          }
          break;
        case DOUBLECOLON:
          mcc_consume_token(DOUBLECOLON);
          Word();
          break;
        default:
          mcc_la1[160] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
      }label_38: ;
      
      mcc_consume_token(RPARENTHESIS);
      mcc_consume_token(EQUAL);
      break;
    default:
      mcc_la1[161] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case DOLLAR:
    case LBOXBRACKET:
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case DOLLAR:
        mcc_consume_token(DOLLAR);
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case PERCENT:
          mcc_consume_token(PERCENT);
          break;
        default:
          mcc_la1[162] = mcc_gen;
          ;
          break;
        }
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case DOUBLECOLON:
        case WORD:
          Variable();
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case COMMA:
            mcc_consume_token(COMMA);
            switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
            case DOUBLECOLON:
            case WORD:
              Variable();
              break;
            case STAR:
              mcc_consume_token(STAR);
              break;
            default:
              mcc_la1[163] = mcc_gen;
              mcc_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            mcc_la1[164] = mcc_gen;
            ;
            break;
          }
          break;
        default:
          mcc_la1[165] = mcc_gen;
          ;
          break;
        }
        break;
      default:
        mcc_la1[166] = mcc_gen;
        ;
        break;
      }
      mcc_consume_token(LBOXBRACKET);
      break;
    case DOUBLECOLON:
    case PERCENT:
    case QUESTIONMARK:
    case WORD:
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case PERCENT:
      case QUESTIONMARK:
        if (mcc_2_130(2)) {
          mcc_consume_token(QUESTIONMARK);
          mcc_consume_token(PERCENT);
        } else if (mcc_2_131(2)) {
          mcc_consume_token(PERCENT);
          mcc_consume_token(QUESTIONMARK);
        } else {
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case QUESTIONMARK:
            mcc_consume_token(QUESTIONMARK);
            break;
          case PERCENT:
            mcc_consume_token(PERCENT);
            break;
          default:
            mcc_la1[167] = mcc_gen;
            mcc_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        mcc_la1[168] = mcc_gen;
        ;
        break;
      }
      if (mcc_2_132(2)) {
        Word();
      } else {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case DOUBLECOLON:
        case WORD:
          Variable();
          mcc_consume_token(DOT);
          break;
        default:
          mcc_la1[169] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case COUNT:
      mcc_consume_token(COUNT);
      mcc_consume_token(LBOXBRACKET);
      break;
    default:
      mcc_la1[170] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
  }

  public Sequence Rule() {
    bool special = false, test = false, parenthesis = false;
    String str, package = null;
    bool chooseRandSpecified = false, chooseRandSpecified2 = false, choice = false;
    SequenceVariable varChooseRand = null, varChooseRand2 = null, subgraph = null, countResult = null;
    List<SequenceExpression> argExprs = new List<SequenceExpression>();
    List<SequenceVariable> returnVars = new List<SequenceVariable>();
    SequenceRuleAllCall ruleAllCall = null;
    SequenceRuleCountAllCall ruleCountAllCall = null;
    SequenceRuleCall ruleCall = null;
    SequenceSequenceCall sequenceCall = null;
    SequenceFilterCallBase filter = null;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case LPARENTHESIS:
      mcc_consume_token(LPARENTHESIS);
      VariableList(returnVars);
      mcc_consume_token(RPARENTHESIS);
      mcc_consume_token(EQUAL);
      break;
    default:
      mcc_la1[171] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case DOLLAR:
    case LBOXBRACKET:
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case DOLLAR:
        mcc_consume_token(DOLLAR);
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case PERCENT:
          mcc_consume_token(PERCENT);
                       choice = true;
          break;
        default:
          mcc_la1[172] = mcc_gen;
          ;
          break;
        }
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case DOUBLECOLON:
        case WORD:
          varChooseRand = Variable();
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case COMMA:
            mcc_consume_token(COMMA);
            switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
            case DOUBLECOLON:
            case WORD:
              varChooseRand2 = Variable();
              break;
            case STAR:
              mcc_consume_token(STAR);
              break;
            default:
              mcc_la1[173] = mcc_gen;
              mcc_consume_token(-1);
              throw new ParseException();
            }
                                                                                                              chooseRandSpecified2 = true;
            break;
          default:
            mcc_la1[174] = mcc_gen;
            ;
            break;
          }
          break;
        default:
          mcc_la1[175] = mcc_gen;
          ;
          break;
        }
                                                                                                                                                    chooseRandSpecified = true;
        break;
      default:
        mcc_la1[176] = mcc_gen;
        ;
        break;
      }
      mcc_consume_token(LBOXBRACKET);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case PERCENT:
      case QUESTIONMARK:
        if (mcc_2_133(2)) {
          mcc_consume_token(QUESTIONMARK);
          mcc_consume_token(PERCENT);
                                    test = true; special = true;
        } else if (mcc_2_134(2)) {
          mcc_consume_token(PERCENT);
          mcc_consume_token(QUESTIONMARK);
                                                                                            special = true; test = true;
        } else {
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case QUESTIONMARK:
            mcc_consume_token(QUESTIONMARK);
                                                                                                                                   test = true;
            break;
          case PERCENT:
            mcc_consume_token(PERCENT);
                                                                                                                                                          special = true;
            break;
          default:
            mcc_la1[177] = mcc_gen;
            mcc_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        mcc_la1[178] = mcc_gen;
        ;
        break;
      }
      if (mcc_2_135(2)) {
        subgraph = Variable();
        mcc_consume_token(DOT);
      } else {
        ;
      }
      if (mcc_2_136(2)) {
        package = Word();
        mcc_consume_token(DOUBLECOLON);
      } else {
        ;
      }
      str = Word();
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case LPARENTHESIS:
        mcc_consume_token(LPARENTHESIS);
        if (mcc_2_137(1)) {
          Arguments(argExprs);
        } else {
          ;
        }
        mcc_consume_token(RPARENTHESIS);
        break;
      default:
        mcc_la1[179] = mcc_gen;
        ;
        break;
      }
            ruleAllCall = env.CreateSequenceRuleAllCall(str, package, argExprs, returnVars, subgraph,
                    special, test, chooseRandSpecified, varChooseRand, chooseRandSpecified2, varChooseRand2, choice);
      while (true) {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case BACKSLASH:
          ;
          break;
        default:
          mcc_la1[180] = mcc_gen;
          goto label_39;
        }
        mcc_consume_token(BACKSLASH);
        filter = Filter(ruleAllCall, false);
                                                       ruleAllCall.AddFilterCall(filter);
      }label_39: ;
      
      mcc_consume_token(RBOXBRACKET);
            {return ruleAllCall;}
      break;
    case COUNT:
      mcc_consume_token(COUNT);
      mcc_consume_token(LBOXBRACKET);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case PERCENT:
      case QUESTIONMARK:
        if (mcc_2_138(2)) {
          mcc_consume_token(QUESTIONMARK);
          mcc_consume_token(PERCENT);
                                    test = true; special = true;
        } else if (mcc_2_139(2)) {
          mcc_consume_token(PERCENT);
          mcc_consume_token(QUESTIONMARK);
                                                                                            special = true; test = true;
        } else {
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case QUESTIONMARK:
            mcc_consume_token(QUESTIONMARK);
                                                                                                                                   test = true;
            break;
          case PERCENT:
            mcc_consume_token(PERCENT);
                                                                                                                                                          special = true;
            break;
          default:
            mcc_la1[181] = mcc_gen;
            mcc_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        mcc_la1[182] = mcc_gen;
        ;
        break;
      }
      if (mcc_2_140(2)) {
        subgraph = Variable();
        mcc_consume_token(DOT);
      } else {
        ;
      }
      if (mcc_2_141(2)) {
        package = Word();
        mcc_consume_token(DOUBLECOLON);
      } else {
        ;
      }
      str = Word();
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case LPARENTHESIS:
        mcc_consume_token(LPARENTHESIS);
        if (mcc_2_142(1)) {
          Arguments(argExprs);
        } else {
          ;
        }
        mcc_consume_token(RPARENTHESIS);
        break;
      default:
        mcc_la1[183] = mcc_gen;
        ;
        break;
      }
            ruleCountAllCall = env.CreateSequenceRuleCountAllCall(str, package, argExprs, returnVars, subgraph,
                    special, test);
      while (true) {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case BACKSLASH:
          ;
          break;
        default:
          mcc_la1[184] = mcc_gen;
          goto label_40;
        }
        mcc_consume_token(BACKSLASH);
        filter = Filter(ruleCountAllCall, false);
                                                            ruleCountAllCall.AddFilterCall(filter);
      }label_40: ;
      
      mcc_consume_token(RBOXBRACKET);
      mcc_consume_token(ASSIGN_TO);
      countResult = Variable();
            ruleCountAllCall.AddCountResult(countResult);
            {return ruleCountAllCall;}
      break;
    case DOUBLECOLON:
    case PERCENT:
    case QUESTIONMARK:
    case WORD:
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case PERCENT:
      case QUESTIONMARK:
        if (mcc_2_143(2)) {
          mcc_consume_token(QUESTIONMARK);
          mcc_consume_token(PERCENT);
                                test = true; special = true;
        } else if (mcc_2_144(2)) {
          mcc_consume_token(PERCENT);
          mcc_consume_token(QUESTIONMARK);
                                                                                        special = true; test = true;
        } else {
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case QUESTIONMARK:
            mcc_consume_token(QUESTIONMARK);
                                                                                                                               test = true;
            break;
          case PERCENT:
            mcc_consume_token(PERCENT);
                                                                                                                                                      special = true;
            break;
          default:
            mcc_la1[185] = mcc_gen;
            mcc_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        mcc_la1[186] = mcc_gen;
        ;
        break;
      }
      if (mcc_2_145(2)) {
        subgraph = Variable();
        mcc_consume_token(DOT);
      } else {
        ;
      }
      if (mcc_2_146(2)) {
        package = Word();
        mcc_consume_token(DOUBLECOLON);
      } else {
        ;
      }
      str = Word();
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case LPARENTHESIS:
        mcc_consume_token(LPARENTHESIS);
        if (mcc_2_147(1)) {
          Arguments(argExprs);
        } else {
          ;
        }
        mcc_consume_token(RPARENTHESIS);
                                                     parenthesis = true;
        break;
      default:
        mcc_la1[187] = mcc_gen;
        ;
        break;
      }
            if(!parenthesis && returnVars.Count == 0)
            {
                SequenceVariable var = varDecls.Lookup(str);
                if(var != null)
                {
                    if(var.Type != "" && var.Type != "boolean")
                        {throw new SequenceParserExceptionTypeMismatch(str, "untyped or bool", var.Type);}
                    if(subgraph != null)
                        {throw new SequenceParserExceptionSubgraphError(str, subgraph.Name);}

                    if(env.IsRuleName(str, package))
                        warnings.Add("WARNING: resolving " + str + " to a variable, while a rule of same name exists (apply parenthesis so it is resolved to a rule call)");
                    if(env.IsSequenceName(str, package))
                        warnings.Add("WARNING: resolving " + str + " to a variable, while a sequence of same name exists (apply parenthesis so it is resolved to a sequence call)");

                    {return new SequenceBooleanComputation(new SequenceExpressionVariable(var), null, special);}
                }
            }

            if(env.IsSequenceName(str, package)) {
                sequenceCall = env.CreateSequenceSequenceCall(str, package, argExprs, returnVars, subgraph,
                                special);
            } else {
                ruleCall = env.CreateSequenceRuleCall(str, package, argExprs, returnVars, subgraph,
                                special, test, false);
            }
      while (true) {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case BACKSLASH:
          ;
          break;
        default:
          mcc_la1[188] = mcc_gen;
          goto label_41;
        }
        mcc_consume_token(BACKSLASH);
        filter = Filter(ruleCall, false);
                    if(varDecls.Lookup(str) != null)
                        {throw new SequenceParserExceptionFilterError(str, filter.ToString());}
                    if(sequenceCall != null) {
                        List<SequenceFilterCallBase> filters = new List<SequenceFilterCallBase>();
                        filters.Add(filter);
                        {throw new SequenceParserExceptionFilterError(str, FiltersToString(filters));}
                    }
                    ruleCall.AddFilterCall(filter);
      }label_41: ;
      
                if(sequenceCall != null)
                    {return sequenceCall;}
                else
                    {return ruleCall;}
      break;
    default:
      mcc_la1[189] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    throw new Exception("Missing return statement in function");
  }

  public SequenceExpression RuleQuery() {
    bool special = false, test = false;
    String str, package = null;
    SequenceVariable subgraph = null; // maybe todo - remove
    List<SequenceExpression> argExprs = new List<SequenceExpression>();
    SequenceRuleAllCall ruleAllCall = null;
    SequenceFilterCallBase filter = null;
    mcc_consume_token(LBOXBRACKET);
    if (mcc_2_148(2)) {
      mcc_consume_token(QUESTIONMARK);
      mcc_consume_token(PERCENT);
                                 test = true; special = true;
    } else if (mcc_2_149(2)) {
      mcc_consume_token(PERCENT);
      mcc_consume_token(QUESTIONMARK);
                                                                                         special = true; test = true;
    } else {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case QUESTIONMARK:
        mcc_consume_token(QUESTIONMARK);
                                                                                                                                test = true;
        break;
      default:
        mcc_la1[190] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }
    if (mcc_2_150(2)) {
      subgraph = Variable();
      mcc_consume_token(DOT);
    } else {
      ;
    }
    if (mcc_2_151(2)) {
      package = Word();
      mcc_consume_token(DOUBLECOLON);
    } else {
      ;
    }
    str = Word();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case LPARENTHESIS:
      mcc_consume_token(LPARENTHESIS);
      if (mcc_2_152(1)) {
        Arguments(argExprs);
      } else {
        ;
      }
      mcc_consume_token(RPARENTHESIS);
      break;
    default:
      mcc_la1[191] = mcc_gen;
      ;
      break;
    }
        ruleAllCall = env.CreateSequenceRuleAllCall(str, package, argExprs, new List<SequenceVariable>(), subgraph,
                special, test, false, null, false, null, false);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case BACKSLASH:
        ;
        break;
      default:
        mcc_la1[192] = mcc_gen;
        goto label_42;
      }
      mcc_consume_token(BACKSLASH);
      filter = Filter(ruleAllCall, false);
                                                   ruleAllCall.AddFilterCall(filter);
    }label_42: ;
    
    mcc_consume_token(RBOXBRACKET);
        {return new SequenceExpressionRuleQuery(ruleAllCall);}
    throw new Exception("Missing return statement in function");
  }

  public SequenceExpression MultiRuleQuery() {
    Sequence seq;
    List<Sequence> sequences = new List<Sequence>();
    SequenceMultiRuleAllCall seqMultiRuleAll;
    SequenceFilterCallBase filter = null;
    String matchClassPackage = null;
    String matchClassName = null;
    mcc_consume_token(LBOXBRACKET);
    mcc_consume_token(QUESTIONMARK);
    mcc_consume_token(LBOXBRACKET);
    seq = RuleForMultiRuleQuery();
                                              sequences.Add(seq);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case COMMA:
        ;
        break;
      default:
        mcc_la1[193] = mcc_gen;
        goto label_43;
      }
      mcc_consume_token(COMMA);
      seq = RuleForMultiRuleQuery();
                                            sequences.Add(seq);
    }label_43: ;
    
    mcc_consume_token(RBOXBRACKET);
              seqMultiRuleAll = new SequenceMultiRuleAllCall(sequences);
    while (true) {
      if (mcc_2_153(2)) {
        ;
      } else {
        goto label_44;
      }
      mcc_consume_token(BACKSLASH);
      filter = Filter(null, true);
                                                        seqMultiRuleAll.AddFilterCall(filter);
    }label_44: ;
    
    mcc_consume_token(BACKSLASH);
    mcc_consume_token(LANGLE);
    mcc_consume_token(CLASS);
    if (mcc_2_154(2)) {
      matchClassPackage = Word();
      mcc_consume_token(DOUBLECOLON);
    } else {
      ;
    }
    matchClassName = Word();
    mcc_consume_token(RANGLE);
    mcc_consume_token(RBOXBRACKET);
        {return new SequenceExpressionMultiRuleQuery(seqMultiRuleAll, env.GetPackagePrefixedMatchClassName(matchClassName, matchClassPackage));}
    throw new Exception("Missing return statement in function");
  }

  public SequenceRuleCall RuleForMultiRuleQuery() {
    bool special = false;
    String str, package = null;
    List<SequenceExpression> argExprs = new List<SequenceExpression>();
    List<SequenceVariable> returnVars = new List<SequenceVariable>();
    SequenceRuleCall ruleCall;
    SequenceFilterCallBase filter = null;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case PERCENT:
      mcc_consume_token(PERCENT);
           special = true;
      break;
    default:
      mcc_la1[194] = mcc_gen;
      ;
      break;
    }
    if (mcc_2_155(2)) {
      package = Word();
      mcc_consume_token(DOUBLECOLON);
    } else {
      ;
    }
    str = Word();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case LPARENTHESIS:
      mcc_consume_token(LPARENTHESIS);
      if (mcc_2_156(1)) {
        Arguments(argExprs);
      } else {
        ;
      }
      mcc_consume_token(RPARENTHESIS);
      break;
    default:
      mcc_la1[195] = mcc_gen;
      ;
      break;
    }
        ruleCall = env.CreateSequenceRuleCall(str, package, argExprs, returnVars, null,
            special, true, false);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case BACKSLASH:
        ;
        break;
      default:
        mcc_la1[196] = mcc_gen;
        goto label_45;
      }
      mcc_consume_token(BACKSLASH);
      filter = Filter(ruleCall, false);
                                                ruleCall.AddFilterCall(filter);
    }label_45: ;
    
            {return ruleCall;}
    throw new Exception("Missing return statement in function");
  }

  public SequenceExpression MappingClause() {
    SequenceRuleCall rule;
    Sequence seq;
    List<SequenceVariable> variableList = new List<SequenceVariable>();
    List<SequenceRulePrefixedSequence> rulePrefixedSequences = new List<SequenceRulePrefixedSequence>();
    SequenceMultiRulePrefixedSequence seqMultiRulePrefixedSequence;
    SequenceFilterCallBase filter = null;
    mcc_consume_token(LBOXBRACKET);
    mcc_consume_token(COLON);
    mcc_consume_token(FOR);
    mcc_consume_token(LBRACE);
                    varDecls.PushScope(ScopeType.ForRulePrefixedSequence);
    rule = RuleForMappingMultiRulePrefixedSequence();
    mcc_consume_token(SEMI);
    seq = RewriteSequence();
                                    varDecls.PopScope(variableList);
                                                                         rulePrefixedSequences.Add(new SequenceRulePrefixedSequence(rule, seq, variableList));
    mcc_consume_token(RBRACE);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case COMMA:
        ;
        break;
      default:
        mcc_la1[197] = mcc_gen;
        goto label_46;
      }
      mcc_consume_token(COMMA);
      mcc_consume_token(FOR);
      mcc_consume_token(LBRACE);
                              varDecls.PushScope(ScopeType.ForRulePrefixedSequence);
      rule = RuleForMappingMultiRulePrefixedSequence();
      mcc_consume_token(SEMI);
      seq = RewriteSequence();
                                        varDecls.PopScope(variableList);
                                                                             rulePrefixedSequences.Add(new SequenceRulePrefixedSequence(rule, seq, variableList));
      mcc_consume_token(RBRACE);
    }label_46: ;
    
              seqMultiRulePrefixedSequence = new SequenceMultiRulePrefixedSequence(rulePrefixedSequences);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case BACKSLASH:
        ;
        break;
      default:
        mcc_la1[198] = mcc_gen;
        goto label_47;
      }
      mcc_consume_token(BACKSLASH);
      filter = Filter(null, true);
                                               seqMultiRulePrefixedSequence.AddFilterCall(filter);
    }label_47: ;
    
    mcc_consume_token(COLON);
    mcc_consume_token(RBOXBRACKET);
        {return new SequenceExpressionMappingClause(seqMultiRulePrefixedSequence);}
    throw new Exception("Missing return statement in function");
  }

  public SequenceRuleCall RuleForMappingMultiRulePrefixedSequence() {
    bool special = false;
    String str, package = null;
    List<SequenceExpression> argExprs = new List<SequenceExpression>();
    List<SequenceVariable> returnVars = new List<SequenceVariable>();
    SequenceRuleCall ruleCall;
    SequenceFilterCallBase filter = null;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case LPARENTHESIS:
      mcc_consume_token(LPARENTHESIS);
      VariableList(returnVars);
      mcc_consume_token(RPARENTHESIS);
      mcc_consume_token(EQUAL);
      break;
    default:
      mcc_la1[199] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case PERCENT:
      mcc_consume_token(PERCENT);
               special = true;
      break;
    default:
      mcc_la1[200] = mcc_gen;
      ;
      break;
    }
    if (mcc_2_157(2)) {
      package = Word();
      mcc_consume_token(DOUBLECOLON);
    } else {
      ;
    }
    str = Word();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case LPARENTHESIS:
      mcc_consume_token(LPARENTHESIS);
      if (mcc_2_158(1)) {
        Arguments(argExprs);
      } else {
        ;
      }
      mcc_consume_token(RPARENTHESIS);
      break;
    default:
      mcc_la1[201] = mcc_gen;
      ;
      break;
    }
            ruleCall = env.CreateSequenceRuleCall(str, package, argExprs, returnVars, null,
                special, false, false);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case BACKSLASH:
        ;
        break;
      default:
        mcc_la1[202] = mcc_gen;
        goto label_48;
      }
      mcc_consume_token(BACKSLASH);
      filter = Filter(ruleCall, false);
                                                    ruleCall.AddFilterCall(filter);
    }label_48: ;
    
                {return ruleCall;}
    throw new Exception("Missing return statement in function");
  }

  public SequenceFilterCallBase Filter(SequenceRuleCall ruleCall, bool isMatchClassFilter) {
    String id, package = null;
    SequenceFilterCallBase filter = null;
    if (mcc_2_159(2)) {
      package = Word();
      mcc_consume_token(DOUBLECOLON);
    } else {
      ;
    }
    id = Word();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case DOT:
      mcc_consume_token(DOT);
      filter = FilterMatchClassContinuation(ruleCall, isMatchClassFilter, package, id);
            {return filter;}
      break;
    default:
      mcc_la1[203] = mcc_gen;
      filter = FilterRuleContinuation(ruleCall, isMatchClassFilter, package, id);
            {return filter;}
      break;
    }
    throw new Exception("Missing return statement in function");
  }

  public SequenceFilterCallBase FilterMatchClassContinuation(SequenceRuleCall ruleCall, bool isMatchClassFilter, String matchClassPackage, String matchClass) {
    String filterBase, package = null;
    List<String> words = new List<String>();
    SequenceFilterCallBase filter = null;
    if (mcc_2_161(2)) {
      filterBase = Word();
      mcc_consume_token(LANGLE);
      WordList(words);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case RANGLE:
        mcc_consume_token(RANGLE);
        break;
      case RRANGLE:
        mcc_consume_token(RRANGLE);
        break;
      default:
        mcc_la1[204] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      filter = FilterMatchClassContinuationMember(ruleCall, isMatchClassFilter, matchClassPackage, matchClass, filterBase, words);
        {return filter;}
    } else {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case WORD:
        if (mcc_2_160(2)) {
          package = Word();
          mcc_consume_token(DOUBLECOLON);
        } else {
          ;
        }
        filterBase = Word();
        filter = FilterMatchClassContinuationNonMember(ruleCall, isMatchClassFilter, matchClassPackage, matchClass, package, filterBase);
        {return filter;}
        break;
      default:
        mcc_la1[205] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Exception("Missing return statement in function");
  }

  public SequenceFilterCallBase FilterMatchClassContinuationMember(SequenceRuleCall ruleCall, bool isMatchClassFilter, String matchClassPackage, String matchClass, String filterBase, List<String> words) {
    String package = null;
    String filterExtension = null, filterExtension2 = null;
    List<SequenceExpression> argExprs = new List<SequenceExpression>();
    SequenceExpression initExpr = null, lambdaExpr = null;
    Tuple<SequenceVariable, SequenceVariable, SequenceVariable, SequenceVariable> arrayAccessWithPreviousAccumulationAccessWithIndexWithValue = null;
    List<SequenceVariable> variableList = new List<SequenceVariable>();
    SequenceVariable initArrayAccess = null;
    if (mcc_2_162(2)) {
      filterExtension = Word();
                                           filterBase += filterExtension;
      mcc_consume_token(LANGLE);
      WordList(words);
      mcc_consume_token(RANGLE);
      filterExtension2 = Word();
                                                                                                                              filterBase += filterExtension2;
      mcc_consume_token(LANGLE);
      WordList(words);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case RANGLE:
        mcc_consume_token(RANGLE);
        break;
      case RRANGLE:
        mcc_consume_token(RRANGLE);
        break;
      default:
        mcc_la1[206] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case WORD:
      filterExtension = Word();
                               filterBase += filterExtension;
      mcc_consume_token(LBRACE);
                                                                      varDecls.PushScope(ScopeType.Computation);
      if (mcc_2_163(2147483647)) {
        initArrayAccess = VariableDefinition();
        mcc_consume_token(SEMI);
      } else {
        ;
      }
      initExpr = Expression();
          varDecls.PopScope(variableList);
      mcc_consume_token(RBRACE);
      filterExtension2 = Word();
                                                                           filterBase += filterExtension2;
      break;
    default:
      mcc_la1[207] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case LBRACE:
      mcc_consume_token(LBRACE);
            varDecls.PushScope(ScopeType.Computation);
      arrayAccessWithPreviousAccumulationAccessWithIndexWithValue = LambdaExprVarDeclPrefix();
      lambdaExpr = Expression();
          varDecls.PopScope(variableList);
      mcc_consume_token(RBRACE);
      break;
    default:
      mcc_la1[208] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case LPARENTHESIS:
      mcc_consume_token(LPARENTHESIS);
      mcc_consume_token(RPARENTHESIS);
      break;
    default:
      mcc_la1[209] = mcc_gen;
      ;
      break;
    }
        if(!isMatchClassFilter)
            {throw new ParseException("A match class specifier is only admissible for filters of multi rule call or multi rule backtracking constructs.");}

        if(!env.IsAutoGeneratedBaseFilterName(filterBase) && !env.IsPerElementBaseFilterName(filterBase))
            {throw new ParseException("Unknown def-variable-based filter " + filterBase + "! Available are: orderAscendingBy, orderDescendingBy, groupBy, keepSameAsFirst, keepSameAsLast, keepOneForEach, keepOneForEachAccumulateBy and assign, removeIf, assignStartWithAccumulateBy.");}
        else
        {
            if(lambdaExpr != null)
            {
                if(initExpr != null) {
                    {return env.CreateSequenceMatchClassFilterCall(matchClass, matchClassPackage, package, filterBase, words,
                        initArrayAccess, initExpr,
                        arrayAccessWithPreviousAccumulationAccessWithIndexWithValue.Item1, arrayAccessWithPreviousAccumulationAccessWithIndexWithValue.Item2,
                        arrayAccessWithPreviousAccumulationAccessWithIndexWithValue.Item3, arrayAccessWithPreviousAccumulationAccessWithIndexWithValue.Item4, lambdaExpr);}
                } else {
                    {return env.CreateSequenceMatchClassFilterCall(matchClass, matchClassPackage, package, filterBase, words,
                        arrayAccessWithPreviousAccumulationAccessWithIndexWithValue.Item1, arrayAccessWithPreviousAccumulationAccessWithIndexWithValue.Item3, arrayAccessWithPreviousAccumulationAccessWithIndexWithValue.Item4, lambdaExpr);}
                }
            }
            else
                {return env.CreateSequenceMatchClassFilterCall(matchClass, matchClassPackage, package, filterBase, words, argExprs);}
        }
    throw new Exception("Missing return statement in function");
  }

  public SequenceFilterCallBase FilterMatchClassContinuationNonMember(SequenceRuleCall ruleCall, bool isMatchClassFilter, String matchClassPackage, String matchClass, String package, String filterBase) {
    List<SequenceExpression> argExprs = new List<SequenceExpression>();
    SequenceExpression lambdaExpr = null;
    Tuple<SequenceVariable, SequenceVariable, SequenceVariable, SequenceVariable> arrayAccessWithPreviousAccumulationAccessWithIndexWithValue = null;
    List<String> words = new List<String>();
    List<SequenceVariable> variableList = new List<SequenceVariable>();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case LBRACE:
      mcc_consume_token(LBRACE);
            varDecls.PushScope(ScopeType.Computation);
      arrayAccessWithPreviousAccumulationAccessWithIndexWithValue = LambdaExprVarDeclPrefix();
      lambdaExpr = Expression();
          varDecls.PopScope(variableList);
      mcc_consume_token(RBRACE);
      break;
    default:
      mcc_la1[210] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case LPARENTHESIS:
      mcc_consume_token(LPARENTHESIS);
      if (mcc_2_164(1)) {
        Arguments(argExprs);
      } else {
        ;
      }
      mcc_consume_token(RPARENTHESIS);
      break;
    default:
      mcc_la1[211] = mcc_gen;
      ;
      break;
    }
        if(!isMatchClassFilter)
            {throw new ParseException("A match class specifier is only admissible for filters of multi rule call or multi rule backtracking constructs.");}

        if(lambdaExpr != null)
        {
            {return env.CreateSequenceMatchClassFilterCall(matchClass, matchClassPackage, package, filterBase, words,
                arrayAccessWithPreviousAccumulationAccessWithIndexWithValue.Item1, arrayAccessWithPreviousAccumulationAccessWithIndexWithValue.Item3, arrayAccessWithPreviousAccumulationAccessWithIndexWithValue.Item4, lambdaExpr);}
        }
        else if(env.IsAutoSuppliedFilterName(filterBase))
        {
            if(argExprs.Count != 1)
                {throw new ParseException("The auto-supplied filter " + filterBase + " expects exactly one parameter!");}

            {return env.CreateSequenceMatchClassFilterCall(matchClass, matchClassPackage, package, filterBase, words, argExprs);}
        }
        else
        {
            if(filterBase == "auto")
                {throw new ParseException("The auto filter is not available for multi rule call or multi rule backtracking constructs.");}

            {return env.CreateSequenceMatchClassFilterCall(matchClass, matchClassPackage, package, filterBase, words, argExprs);}
        }
    throw new Exception("Missing return statement in function");
  }

  public SequenceFilterCallBase FilterRuleContinuation(SequenceRuleCall ruleCall, bool isMatchClassFilter, String package, String filterBase) {
    List<String> words = new List<String>();
    SequenceFilterCallBase filter = null;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case LANGLE:
      mcc_consume_token(LANGLE);
      WordList(words);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case RANGLE:
        mcc_consume_token(RANGLE);
        break;
      case RRANGLE:
        mcc_consume_token(RRANGLE);
        break;
      default:
        mcc_la1[212] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      filter = FilterRuleContinuationMember(ruleCall, isMatchClassFilter, package, filterBase, words);
        {return filter;}
      break;
    default:
      mcc_la1[213] = mcc_gen;
      filter = FilterRuleContinuationNonMember(ruleCall, isMatchClassFilter, package, filterBase);
        {return filter;}
      break;
    }
    throw new Exception("Missing return statement in function");
  }

  public SequenceFilterCallBase FilterRuleContinuationMember(SequenceRuleCall ruleCall, bool isMatchClassFilter, String package, String filterBase, List<String> words) {
    String filterExtension = null, filterExtension2 = null;
    List<SequenceExpression> argExprs = new List<SequenceExpression>();
    SequenceExpression initExpr = null, lambdaExpr = null;
    Tuple<SequenceVariable, SequenceVariable, SequenceVariable, SequenceVariable> arrayAccessWithPreviousAccumulationAccessWithIndexWithValue = null;
    List<SequenceVariable> variableList = new List<SequenceVariable>();
    SequenceVariable initArrayAccess = null;
    if (mcc_2_165(2)) {
      filterExtension = Word();
                                           filterBase += filterExtension;
      mcc_consume_token(LANGLE);
      WordList(words);
      mcc_consume_token(RANGLE);
      filterExtension2 = Word();
                                                                                                                              filterBase += filterExtension2;
      mcc_consume_token(LANGLE);
      WordList(words);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case RANGLE:
        mcc_consume_token(RANGLE);
        break;
      case RRANGLE:
        mcc_consume_token(RRANGLE);
        break;
      default:
        mcc_la1[214] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case WORD:
      filterExtension = Word();
                               filterBase += filterExtension;
      mcc_consume_token(LBRACE);
                                                                      varDecls.PushScope(ScopeType.Computation);
      if (mcc_2_166(2147483647)) {
        initArrayAccess = VariableDefinition();
        mcc_consume_token(SEMI);
      } else {
        ;
      }
      initExpr = Expression();
          varDecls.PopScope(variableList);
      mcc_consume_token(RBRACE);
      filterExtension2 = Word();
                                                                           filterBase += filterExtension2;
      break;
    default:
      mcc_la1[215] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case LBRACE:
      mcc_consume_token(LBRACE);
            varDecls.PushScope(ScopeType.Computation);
      arrayAccessWithPreviousAccumulationAccessWithIndexWithValue = LambdaExprVarDeclPrefix();
      lambdaExpr = Expression();
          varDecls.PopScope(variableList);
      mcc_consume_token(RBRACE);
      break;
    default:
      mcc_la1[216] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case LPARENTHESIS:
      mcc_consume_token(LPARENTHESIS);
      mcc_consume_token(RPARENTHESIS);
      break;
    default:
      mcc_la1[217] = mcc_gen;
      ;
      break;
    }
        if(isMatchClassFilter)
            {throw new ParseException("A match class specifier is required for filters of multi rule call or multi rule backtracking constructs.");}

        if(!env.IsAutoGeneratedBaseFilterName(filterBase) && !env.IsPerElementBaseFilterName(filterBase))
            {throw new ParseException("Unknown def-variable-based filter " + filterBase + "! Available are: orderAscendingBy, orderDescendingBy, groupBy, keepSameAsFirst, keepSameAsLast, keepOneForEach, keepOneForEachAccumulateBy and assign, removeIf, assignStartWithAccumulateBy.");}
        else
        {
            if(lambdaExpr != null)
            {
                if(initExpr != null) {
                    {return env.CreateSequenceFilterCall(ruleCall.Name, ruleCall.Package, package, filterBase, words,
                        initArrayAccess, initExpr,
                        arrayAccessWithPreviousAccumulationAccessWithIndexWithValue.Item1, arrayAccessWithPreviousAccumulationAccessWithIndexWithValue.Item2,
                        arrayAccessWithPreviousAccumulationAccessWithIndexWithValue.Item3, arrayAccessWithPreviousAccumulationAccessWithIndexWithValue.Item4, lambdaExpr);}
                } else {
                    {return env.CreateSequenceFilterCall(ruleCall.Name, ruleCall.Package, package, filterBase, words,
                        arrayAccessWithPreviousAccumulationAccessWithIndexWithValue.Item1, arrayAccessWithPreviousAccumulationAccessWithIndexWithValue.Item3, arrayAccessWithPreviousAccumulationAccessWithIndexWithValue.Item4, lambdaExpr);}
                }
            }
            else
                {return env.CreateSequenceFilterCall(ruleCall.Name, ruleCall.Package, package, filterBase, words, argExprs);}
        }
    throw new Exception("Missing return statement in function");
  }

  public SequenceFilterCallBase FilterRuleContinuationNonMember(SequenceRuleCall ruleCall, bool isMatchClassFilter, String package, String filterBase) {
    List<SequenceExpression> argExprs = new List<SequenceExpression>();
    SequenceExpression lambdaExpr = null;
    Tuple<SequenceVariable, SequenceVariable, SequenceVariable, SequenceVariable> arrayAccessWithPreviousAccumulationAccessWithIndexWithValue = null;
    List<String> words = new List<String>();
    List<SequenceVariable> variableList = new List<SequenceVariable>();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case LBRACE:
      mcc_consume_token(LBRACE);
            varDecls.PushScope(ScopeType.Computation);
      arrayAccessWithPreviousAccumulationAccessWithIndexWithValue = LambdaExprVarDeclPrefix();
      lambdaExpr = Expression();
          varDecls.PopScope(variableList);
      mcc_consume_token(RBRACE);
      break;
    default:
      mcc_la1[218] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case LPARENTHESIS:
      mcc_consume_token(LPARENTHESIS);
      if (mcc_2_167(1)) {
        Arguments(argExprs);
      } else {
        ;
      }
      mcc_consume_token(RPARENTHESIS);
      break;
    default:
      mcc_la1[219] = mcc_gen;
      ;
      break;
    }
        if(isMatchClassFilter)
            {throw new ParseException("A match class specifier is required for filters of multi rule call or multi rule backtracking constructs.");}

        if(lambdaExpr != null)
        {
            {return env.CreateSequenceFilterCall(ruleCall.Name, ruleCall.Package, package, filterBase, words,
                arrayAccessWithPreviousAccumulationAccessWithIndexWithValue.Item1, arrayAccessWithPreviousAccumulationAccessWithIndexWithValue.Item3, arrayAccessWithPreviousAccumulationAccessWithIndexWithValue.Item4, lambdaExpr);}
        }
        else if(env.IsAutoSuppliedFilterName(filterBase))
        {
            if(argExprs.Count != 1)
                {throw new ParseException("The auto-supplied filter " + filterBase + " expects exactly one parameter!");}

            {return env.CreateSequenceFilterCall(ruleCall.Name, ruleCall.Package, package, filterBase, words, argExprs);}
        }
        else
        {
            if(filterBase == "auto")
            {
                if(isMatchClassFilter)
                    {throw new ParseException("The auto filter is not available for multi rule call or multi rule backtracking constructs.");}

                {return env.CreateSequenceFilterCall(ruleCall.Name, ruleCall.Package, package, "auto", words, argExprs);}
            }

            {return env.CreateSequenceFilterCall(ruleCall.Name, ruleCall.Package, package, filterBase, words, argExprs);}
        }
    throw new Exception("Missing return statement in function");
  }

  public void WordList(List<String> words) {
    String word;
    word = Word();
                  words.Add(word);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case COMMA:
        ;
        break;
      default:
        mcc_la1[220] = mcc_gen;
        goto label_49;
      }
      mcc_consume_token(COMMA);
      word = Word();
                                                         words.Add(word);
    }label_49: ;
    
  }

  String RemoveTypeSuffix(String value)  {
    if (value.EndsWith("y") || value.EndsWith("Y")
        || value.EndsWith("s") || value.EndsWith("S")
        || value.EndsWith("l") || value.EndsWith("L"))
        return value.Substring(0, value.Length - 1);
    else
        return value;
  }

  String FiltersToString(List<SequenceFilterCallBase> filters)  {
    StringBuilder sb = new StringBuilder();
    bool first = true;
    for(int i=0; i<filters.Count; ++i)
    {
        if(first)
            first = false;
        else
            sb.Append("\\");
        sb.Append(filters[i].ToString());
    }
    return sb.ToString();
  }

  private bool mcc_2_1(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_1(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(0, xla); }
  }

  private bool mcc_2_2(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_2(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(1, xla); }
  }

  private bool mcc_2_3(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_3(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(2, xla); }
  }

  private bool mcc_2_4(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_4(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(3, xla); }
  }

  private bool mcc_2_5(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_5(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(4, xla); }
  }

  private bool mcc_2_6(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_6(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(5, xla); }
  }

  private bool mcc_2_7(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_7(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(6, xla); }
  }

  private bool mcc_2_8(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_8(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(7, xla); }
  }

  private bool mcc_2_9(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_9(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(8, xla); }
  }

  private bool mcc_2_10(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_10(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(9, xla); }
  }

  private bool mcc_2_11(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_11(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(10, xla); }
  }

  private bool mcc_2_12(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_12(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(11, xla); }
  }

  private bool mcc_2_13(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_13(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(12, xla); }
  }

  private bool mcc_2_14(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_14(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(13, xla); }
  }

  private bool mcc_2_15(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_15(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(14, xla); }
  }

  private bool mcc_2_16(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_16(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(15, xla); }
  }

  private bool mcc_2_17(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_17(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(16, xla); }
  }

  private bool mcc_2_18(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_18(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(17, xla); }
  }

  private bool mcc_2_19(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_19(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(18, xla); }
  }

  private bool mcc_2_20(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_20(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(19, xla); }
  }

  private bool mcc_2_21(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_21(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(20, xla); }
  }

  private bool mcc_2_22(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_22(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(21, xla); }
  }

  private bool mcc_2_23(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_23(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(22, xla); }
  }

  private bool mcc_2_24(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_24(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(23, xla); }
  }

  private bool mcc_2_25(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_25(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(24, xla); }
  }

  private bool mcc_2_26(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_26(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(25, xla); }
  }

  private bool mcc_2_27(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_27(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(26, xla); }
  }

  private bool mcc_2_28(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_28(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(27, xla); }
  }

  private bool mcc_2_29(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_29(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(28, xla); }
  }

  private bool mcc_2_30(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_30(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(29, xla); }
  }

  private bool mcc_2_31(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_31(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(30, xla); }
  }

  private bool mcc_2_32(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_32(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(31, xla); }
  }

  private bool mcc_2_33(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_33(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(32, xla); }
  }

  private bool mcc_2_34(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_34(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(33, xla); }
  }

  private bool mcc_2_35(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_35(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(34, xla); }
  }

  private bool mcc_2_36(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_36(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(35, xla); }
  }

  private bool mcc_2_37(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_37(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(36, xla); }
  }

  private bool mcc_2_38(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_38(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(37, xla); }
  }

  private bool mcc_2_39(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_39(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(38, xla); }
  }

  private bool mcc_2_40(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_40(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(39, xla); }
  }

  private bool mcc_2_41(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_41(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(40, xla); }
  }

  private bool mcc_2_42(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_42(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(41, xla); }
  }

  private bool mcc_2_43(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_43(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(42, xla); }
  }

  private bool mcc_2_44(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_44(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(43, xla); }
  }

  private bool mcc_2_45(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_45(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(44, xla); }
  }

  private bool mcc_2_46(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_46(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(45, xla); }
  }

  private bool mcc_2_47(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_47(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(46, xla); }
  }

  private bool mcc_2_48(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_48(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(47, xla); }
  }

  private bool mcc_2_49(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_49(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(48, xla); }
  }

  private bool mcc_2_50(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_50(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(49, xla); }
  }

  private bool mcc_2_51(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_51(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(50, xla); }
  }

  private bool mcc_2_52(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_52(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(51, xla); }
  }

  private bool mcc_2_53(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_53(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(52, xla); }
  }

  private bool mcc_2_54(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_54(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(53, xla); }
  }

  private bool mcc_2_55(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_55(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(54, xla); }
  }

  private bool mcc_2_56(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_56(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(55, xla); }
  }

  private bool mcc_2_57(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_57(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(56, xla); }
  }

  private bool mcc_2_58(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_58(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(57, xla); }
  }

  private bool mcc_2_59(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_59(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(58, xla); }
  }

  private bool mcc_2_60(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_60(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(59, xla); }
  }

  private bool mcc_2_61(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_61(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(60, xla); }
  }

  private bool mcc_2_62(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_62(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(61, xla); }
  }

  private bool mcc_2_63(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_63(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(62, xla); }
  }

  private bool mcc_2_64(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_64(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(63, xla); }
  }

  private bool mcc_2_65(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_65(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(64, xla); }
  }

  private bool mcc_2_66(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_66(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(65, xla); }
  }

  private bool mcc_2_67(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_67(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(66, xla); }
  }

  private bool mcc_2_68(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_68(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(67, xla); }
  }

  private bool mcc_2_69(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_69(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(68, xla); }
  }

  private bool mcc_2_70(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_70(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(69, xla); }
  }

  private bool mcc_2_71(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_71(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(70, xla); }
  }

  private bool mcc_2_72(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_72(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(71, xla); }
  }

  private bool mcc_2_73(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_73(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(72, xla); }
  }

  private bool mcc_2_74(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_74(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(73, xla); }
  }

  private bool mcc_2_75(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_75(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(74, xla); }
  }

  private bool mcc_2_76(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_76(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(75, xla); }
  }

  private bool mcc_2_77(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_77(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(76, xla); }
  }

  private bool mcc_2_78(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_78(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(77, xla); }
  }

  private bool mcc_2_79(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_79(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(78, xla); }
  }

  private bool mcc_2_80(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_80(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(79, xla); }
  }

  private bool mcc_2_81(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_81(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(80, xla); }
  }

  private bool mcc_2_82(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_82(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(81, xla); }
  }

  private bool mcc_2_83(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_83(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(82, xla); }
  }

  private bool mcc_2_84(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_84(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(83, xla); }
  }

  private bool mcc_2_85(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_85(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(84, xla); }
  }

  private bool mcc_2_86(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_86(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(85, xla); }
  }

  private bool mcc_2_87(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_87(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(86, xla); }
  }

  private bool mcc_2_88(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_88(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(87, xla); }
  }

  private bool mcc_2_89(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_89(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(88, xla); }
  }

  private bool mcc_2_90(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_90(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(89, xla); }
  }

  private bool mcc_2_91(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_91(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(90, xla); }
  }

  private bool mcc_2_92(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_92(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(91, xla); }
  }

  private bool mcc_2_93(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_93(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(92, xla); }
  }

  private bool mcc_2_94(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_94(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(93, xla); }
  }

  private bool mcc_2_95(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_95(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(94, xla); }
  }

  private bool mcc_2_96(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_96(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(95, xla); }
  }

  private bool mcc_2_97(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_97(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(96, xla); }
  }

  private bool mcc_2_98(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_98(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(97, xla); }
  }

  private bool mcc_2_99(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_99(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(98, xla); }
  }

  private bool mcc_2_100(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_100(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(99, xla); }
  }

  private bool mcc_2_101(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_101(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(100, xla); }
  }

  private bool mcc_2_102(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_102(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(101, xla); }
  }

  private bool mcc_2_103(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_103(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(102, xla); }
  }

  private bool mcc_2_104(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_104(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(103, xla); }
  }

  private bool mcc_2_105(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_105(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(104, xla); }
  }

  private bool mcc_2_106(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_106(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(105, xla); }
  }

  private bool mcc_2_107(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_107(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(106, xla); }
  }

  private bool mcc_2_108(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_108(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(107, xla); }
  }

  private bool mcc_2_109(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_109(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(108, xla); }
  }

  private bool mcc_2_110(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_110(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(109, xla); }
  }

  private bool mcc_2_111(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_111(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(110, xla); }
  }

  private bool mcc_2_112(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_112(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(111, xla); }
  }

  private bool mcc_2_113(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_113(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(112, xla); }
  }

  private bool mcc_2_114(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_114(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(113, xla); }
  }

  private bool mcc_2_115(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_115(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(114, xla); }
  }

  private bool mcc_2_116(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_116(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(115, xla); }
  }

  private bool mcc_2_117(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_117(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(116, xla); }
  }

  private bool mcc_2_118(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_118(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(117, xla); }
  }

  private bool mcc_2_119(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_119(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(118, xla); }
  }

  private bool mcc_2_120(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_120(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(119, xla); }
  }

  private bool mcc_2_121(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_121(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(120, xla); }
  }

  private bool mcc_2_122(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_122(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(121, xla); }
  }

  private bool mcc_2_123(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_123(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(122, xla); }
  }

  private bool mcc_2_124(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_124(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(123, xla); }
  }

  private bool mcc_2_125(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_125(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(124, xla); }
  }

  private bool mcc_2_126(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_126(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(125, xla); }
  }

  private bool mcc_2_127(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_127(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(126, xla); }
  }

  private bool mcc_2_128(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_128(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(127, xla); }
  }

  private bool mcc_2_129(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_129(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(128, xla); }
  }

  private bool mcc_2_130(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_130(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(129, xla); }
  }

  private bool mcc_2_131(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_131(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(130, xla); }
  }

  private bool mcc_2_132(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_132(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(131, xla); }
  }

  private bool mcc_2_133(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_133(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(132, xla); }
  }

  private bool mcc_2_134(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_134(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(133, xla); }
  }

  private bool mcc_2_135(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_135(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(134, xla); }
  }

  private bool mcc_2_136(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_136(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(135, xla); }
  }

  private bool mcc_2_137(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_137(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(136, xla); }
  }

  private bool mcc_2_138(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_138(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(137, xla); }
  }

  private bool mcc_2_139(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_139(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(138, xla); }
  }

  private bool mcc_2_140(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_140(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(139, xla); }
  }

  private bool mcc_2_141(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_141(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(140, xla); }
  }

  private bool mcc_2_142(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_142(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(141, xla); }
  }

  private bool mcc_2_143(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_143(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(142, xla); }
  }

  private bool mcc_2_144(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_144(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(143, xla); }
  }

  private bool mcc_2_145(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_145(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(144, xla); }
  }

  private bool mcc_2_146(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_146(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(145, xla); }
  }

  private bool mcc_2_147(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_147(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(146, xla); }
  }

  private bool mcc_2_148(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_148(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(147, xla); }
  }

  private bool mcc_2_149(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_149(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(148, xla); }
  }

  private bool mcc_2_150(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_150(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(149, xla); }
  }

  private bool mcc_2_151(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_151(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(150, xla); }
  }

  private bool mcc_2_152(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_152(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(151, xla); }
  }

  private bool mcc_2_153(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_153(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(152, xla); }
  }

  private bool mcc_2_154(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_154(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(153, xla); }
  }

  private bool mcc_2_155(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_155(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(154, xla); }
  }

  private bool mcc_2_156(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_156(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(155, xla); }
  }

  private bool mcc_2_157(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_157(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(156, xla); }
  }

  private bool mcc_2_158(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_158(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(157, xla); }
  }

  private bool mcc_2_159(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_159(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(158, xla); }
  }

  private bool mcc_2_160(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_160(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(159, xla); }
  }

  private bool mcc_2_161(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_161(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(160, xla); }
  }

  private bool mcc_2_162(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_162(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(161, xla); }
  }

  private bool mcc_2_163(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_163(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(162, xla); }
  }

  private bool mcc_2_164(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_164(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(163, xla); }
  }

  private bool mcc_2_165(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_165(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(164, xla); }
  }

  private bool mcc_2_166(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_166(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(165, xla); }
  }

  private bool mcc_2_167(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_167(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(166, xla); }
  }

  private bool mcc_3_71() {
    if (mcc_3R_81()) return true;
    return false;
  }

  private bool mcc_3_74() {
    if (mcc_scan_token(IN)) return true;
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_71()) mcc_scanpos = xsp;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    if (mcc_scan_token(SEMI)) return true;
    if (mcc_3R_284()) return true;
    if (mcc_scan_token(RBRACE)) return true;
    return false;
  }

  private bool mcc_3R_482() {
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_50()) return true;
    if (mcc_3R_481()) return true;
    if (mcc_3R_54()) return true;
    return false;
  }

  private bool mcc_3R_477() {
    if (mcc_3R_481()) return true;
    if (mcc_3R_54()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_482()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_82() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LPARENTHESIS)) return true;
    if (mcc_3R_50()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_477()) mcc_scanpos = xsp;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    if (mcc_scan_token(RBRACE)) return true;
    if (mcc_scan_token(SEMI)) return true;
    if (mcc_3R_284()) return true;
    if (mcc_scan_token(RBRACE)) return true;
    return false;
  }

  private bool mcc_3_70() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(EQUALITY)) return true;
    if (mcc_3R_54()) return true;
    if (mcc_scan_token(RBRACE)) return true;
    if (mcc_scan_token(SEMI)) return true;
    if (mcc_3R_284()) return true;
    if (mcc_scan_token(RBRACE)) return true;
    return false;
  }

  private bool mcc_3_73() {
    if (mcc_scan_token(IN)) return true;
    if (mcc_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_70()) {
    mcc_scanpos = xsp;
    if (mcc_3R_82()) return true;
    }
    return false;
  }

  private bool mcc_3_72() {
    if (mcc_scan_token(IN)) return true;
    if (mcc_scan_token(LBOXBRACKET)) return true;
    if (mcc_scan_token(QUESTIONMARK)) return true;
    if (mcc_3R_100()) return true;
    if (mcc_scan_token(RBOXBRACKET)) return true;
    if (mcc_scan_token(SEMI)) return true;
    if (mcc_3R_284()) return true;
    if (mcc_scan_token(RBRACE)) return true;
    return false;
  }

  private bool mcc_3R_246() {
    if (mcc_scan_token(FOR)) return true;
    if (mcc_scan_token(LBRACE)) return true;
    if (mcc_3R_86()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_72()) {
    mcc_scanpos = xsp;
    if (mcc_3_73()) {
    mcc_scanpos = xsp;
    if (mcc_3_74()) {
    mcc_scanpos = xsp;
    if (mcc_3_75()) {
    mcc_scanpos = xsp;
    if (mcc_3R_457()) return true;
    }
    }
    }
    }
    return false;
  }

  private bool mcc_3R_456() {
    if (mcc_scan_token(SEMI)) return true;
    if (mcc_3R_284()) return true;
    return false;
  }

  private bool mcc_3R_245() {
    if (mcc_scan_token(IF)) return true;
    if (mcc_scan_token(LBRACE)) return true;
    if (mcc_3R_284()) return true;
    if (mcc_scan_token(SEMI)) return true;
    if (mcc_3R_284()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_456()) mcc_scanpos = xsp;
    if (mcc_scan_token(RBRACE)) return true;
    return false;
  }

  private bool mcc_3R_143() {
    if (mcc_scan_token(PERCENT)) return true;
    return false;
  }

  private bool mcc_3R_244() {
    if (mcc_scan_token(DIV)) return true;
    if (mcc_3R_284()) return true;
    if (mcc_scan_token(DIV)) return true;
    return false;
  }

  private bool mcc_3R_243() {
    if (mcc_scan_token(LLANGLE)) return true;
    if (mcc_3R_100()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(47)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(46)) return true;
    }
    if (mcc_3R_284()) return true;
    xsp = mcc_scanpos;
    if (mcc_scan_token(34)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(32)) return true;
    }
    return false;
  }

  private bool mcc_3_92() {
    if (mcc_scan_token(LLANGLE)) return true;
    if (mcc_3R_91()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(47)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(46)) return true;
    }
    if (mcc_3R_284()) return true;
    if (mcc_scan_token(RRANGLE)) return true;
    return false;
  }

  private bool mcc_3_91() {
    if (mcc_scan_token(LLANGLE)) return true;
    if (mcc_3R_90()) return true;
    if (mcc_scan_token(RRANGLE)) return true;
    return false;
  }

  private bool mcc_3R_242() {
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_284()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3R_455() {
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_100()) return true;
    return false;
  }

  private bool mcc_3R_241() {
    if (mcc_scan_token(LPARENTHESIS)) return true;
    if (mcc_3R_284()) return true;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private bool mcc_3R_99() {
    if (mcc_scan_token(DOLLAR)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_143()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_454() {
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_171()) return true;
    if (mcc_3R_284()) return true;
    return false;
  }

  private bool mcc_3_90() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_99()) mcc_scanpos = xsp;
    if (mcc_scan_token(LBRACE)) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_100()) return true;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_455()) { mcc_scanpos = xsp; break; }
    }
    if (mcc_scan_token(RANGLE)) return true;
    if (mcc_scan_token(RBRACE)) return true;
    return false;
  }

  private bool mcc_3R_98() {
    if (mcc_scan_token(PERCENT)) return true;
    return false;
  }

  private bool mcc_3R_453() {
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_284()) return true;
    return false;
  }

  private bool mcc_3_89() {
    if (mcc_scan_token(DOLLAR)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_98()) mcc_scanpos = xsp;
    if (mcc_scan_token(DOT)) return true;
    if (mcc_scan_token(LPARENTHESIS)) return true;
    if (mcc_3R_171()) return true;
    if (mcc_3R_284()) return true;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_454()) { mcc_scanpos = xsp; break; }
    }
    if (mcc_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private bool mcc_3R_97() {
    if (mcc_scan_token(PERCENT)) return true;
    return false;
  }

  private bool mcc_3R_452() {
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_284()) return true;
    return false;
  }

  private bool mcc_3_88() {
    if (mcc_scan_token(DOLLAR)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_97()) mcc_scanpos = xsp;
    if (mcc_scan_token(AMPERSAND)) return true;
    if (mcc_scan_token(LPARENTHESIS)) return true;
    if (mcc_3R_284()) return true;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_453()) { mcc_scanpos = xsp; break; }
    }
    if (mcc_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private bool mcc_3R_96() {
    if (mcc_scan_token(PERCENT)) return true;
    return false;
  }

  private bool mcc_3R_451() {
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_284()) return true;
    return false;
  }

  private bool mcc_3_87() {
    if (mcc_scan_token(DOLLAR)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_96()) mcc_scanpos = xsp;
    if (mcc_scan_token(PIPE)) return true;
    if (mcc_scan_token(LPARENTHESIS)) return true;
    if (mcc_3R_284()) return true;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_452()) { mcc_scanpos = xsp; break; }
    }
    if (mcc_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private bool mcc_3R_95() {
    if (mcc_scan_token(PERCENT)) return true;
    return false;
  }

  private bool mcc_3R_450() {
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_284()) return true;
    return false;
  }

  private bool mcc_3_86() {
    if (mcc_scan_token(DOLLAR)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_95()) mcc_scanpos = xsp;
    if (mcc_scan_token(DOUBLEAMPERSAND)) return true;
    if (mcc_scan_token(LPARENTHESIS)) return true;
    if (mcc_3R_284()) return true;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_451()) { mcc_scanpos = xsp; break; }
    }
    if (mcc_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private bool mcc_3R_94() {
    if (mcc_scan_token(PERCENT)) return true;
    return false;
  }

  private bool mcc_3_85() {
    if (mcc_scan_token(DOLLAR)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_94()) mcc_scanpos = xsp;
    if (mcc_scan_token(DOUBLEPIPE)) return true;
    if (mcc_scan_token(LPARENTHESIS)) return true;
    if (mcc_3R_284()) return true;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_450()) { mcc_scanpos = xsp; break; }
    }
    if (mcc_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private bool mcc_3_84() {
    if (mcc_3R_93()) return true;
    return false;
  }

  private bool mcc_3R_240() {
    if (mcc_scan_token(DOUBLECOLON)) return true;
    if (mcc_3R_50()) return true;
    return false;
  }

  private bool mcc_3R_239() {
    if (mcc_3R_100()) return true;
    return false;
  }

  private bool mcc_3R_423() {
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_50()) return true;
    return false;
  }

  private bool mcc_3_83() {
    if (mcc_3R_92()) return true;
    return false;
  }

  private bool mcc_3R_89() {
    if (mcc_scan_token(PERCENT)) return true;
    return false;
  }

  private bool mcc_3_82() {
    if (mcc_3R_91()) return true;
    return false;
  }

  private bool mcc_3R_88() {
    if (mcc_scan_token(PERCENT)) return true;
    return false;
  }

  private bool mcc_3_81() {
    if (mcc_3R_90()) return true;
    return false;
  }

  private bool mcc_3_80() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_89()) mcc_scanpos = xsp;
    if (mcc_scan_token(FALSE)) return true;
    return false;
  }

  private bool mcc_3_79() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_88()) mcc_scanpos = xsp;
    if (mcc_scan_token(TRUE)) return true;
    return false;
  }

  private bool mcc_3R_449() {
    if (mcc_3R_86()) return true;
    return false;
  }

  private bool mcc_3_69() {
    if (mcc_3R_77()) return true;
    return false;
  }

  private bool mcc_3R_416() {
    if (mcc_3R_50()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_423()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3_68() {
    if (mcc_3R_76()) return true;
    return false;
  }

  private bool mcc_3_78() {
    if (mcc_3R_87()) return true;
    return false;
  }

  private bool mcc_3R_238() {
    if (mcc_scan_token(YIELD)) return true;
    if (mcc_3R_84()) return true;
    if (mcc_scan_token(EQUAL)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_68()) {
    mcc_scanpos = xsp;
    if (mcc_3_69()) {
    mcc_scanpos = xsp;
    if (mcc_3R_449()) return true;
    }
    }
    return false;
  }

  private bool mcc_3R_79() {
    if (mcc_scan_token(PERCENT)) return true;
    return false;
  }

  private bool mcc_3R_237() {
    if (mcc_3R_87()) return true;
    return false;
  }

  private bool mcc_3R_448() {
    if (mcc_scan_token(LPARENTHESIS)) return true;
    if (mcc_3R_284()) return true;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private bool mcc_3R_462() {
    if (mcc_scan_token(PERCENT)) return true;
    return false;
  }

  private bool mcc_3R_447() {
    if (mcc_scan_token(DOLLAR)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_462()) mcc_scanpos = xsp;
    if (mcc_scan_token(LPARENTHESIS)) return true;
    if (mcc_3R_171()) return true;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private bool mcc_3_67() {
    if (mcc_scan_token(DOLLAR)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_79()) mcc_scanpos = xsp;
    if (mcc_scan_token(LPARENTHESIS)) return true;
    if (mcc_3R_80()) return true;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private bool mcc_3_167() {
    if (mcc_3R_81()) return true;
    return false;
  }

  private bool mcc_3_66() {
    if (mcc_scan_token(DOLLAR)) return true;
    if (mcc_scan_token(PERCENT)) return true;
    if (mcc_scan_token(LPARENTHESIS)) return true;
    if (mcc_3R_78()) return true;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private bool mcc_3R_433() {
    if (mcc_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_167()) mcc_scanpos = xsp;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private bool mcc_3R_432() {
    if (mcc_scan_token(LBRACE)) return true;
    if (mcc_3R_379()) return true;
    if (mcc_3R_54()) return true;
    if (mcc_scan_token(RBRACE)) return true;
    return false;
  }

  private bool mcc_3R_420() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_432()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_433()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_446() {
    if (mcc_3R_86()) return true;
    return false;
  }

  private bool mcc_3R_445() {
    if (mcc_3R_461()) return true;
    return false;
  }

  private bool mcc_3_64() {
    if (mcc_3R_76()) return true;
    return false;
  }

  private bool mcc_3_65() {
    if (mcc_3R_77()) return true;
    return false;
  }

  private bool mcc_3_63() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LPARENTHESIS)) return true;
    return false;
  }

  private bool mcc_3R_444() {
    if (mcc_3R_76()) return true;
    return false;
  }

  private bool mcc_3_77() {
    if (mcc_3R_86()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(5)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(19)) return true;
    }
    return false;
  }

  private bool mcc_3R_443() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LPARENTHESIS)) return true;
    return false;
  }

  private bool mcc_3_166() {
    if (mcc_3R_87()) return true;
    if (mcc_scan_token(SEMI)) return true;
    return false;
  }

  private bool mcc_3R_199() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_236()) {
    mcc_scanpos = xsp;
    if (mcc_3R_237()) {
    mcc_scanpos = xsp;
    if (mcc_3R_238()) {
    mcc_scanpos = xsp;
    if (mcc_3_79()) {
    mcc_scanpos = xsp;
    if (mcc_3_80()) {
    mcc_scanpos = xsp;
    if (mcc_3_81()) {
    mcc_scanpos = xsp;
    if (mcc_3_82()) {
    mcc_scanpos = xsp;
    if (mcc_3_83()) {
    mcc_scanpos = xsp;
    if (mcc_3R_239()) {
    mcc_scanpos = xsp;
    if (mcc_3R_240()) {
    mcc_scanpos = xsp;
    if (mcc_3_85()) {
    mcc_scanpos = xsp;
    if (mcc_3_86()) {
    mcc_scanpos = xsp;
    if (mcc_3_87()) {
    mcc_scanpos = xsp;
    if (mcc_3_88()) {
    mcc_scanpos = xsp;
    if (mcc_3_89()) {
    mcc_scanpos = xsp;
    if (mcc_3_90()) {
    mcc_scanpos = xsp;
    if (mcc_3R_241()) {
    mcc_scanpos = xsp;
    if (mcc_3R_242()) {
    mcc_scanpos = xsp;
    if (mcc_3_91()) {
    mcc_scanpos = xsp;
    if (mcc_3_92()) {
    mcc_scanpos = xsp;
    if (mcc_3R_243()) {
    mcc_scanpos = xsp;
    if (mcc_3R_244()) {
    mcc_scanpos = xsp;
    if (mcc_3R_245()) {
    mcc_scanpos = xsp;
    if (mcc_3R_246()) {
    mcc_scanpos = xsp;
    if (mcc_3R_247()) {
    mcc_scanpos = xsp;
    if (mcc_3_93()) {
    mcc_scanpos = xsp;
    if (mcc_3R_248()) {
    mcc_scanpos = xsp;
    if (mcc_3R_249()) {
    mcc_scanpos = xsp;
    if (mcc_3R_250()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private bool mcc_3R_236() {
    if (mcc_3R_86()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(5)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(19)) return true;
    }
    xsp = mcc_scanpos;
    if (mcc_3R_443()) {
    mcc_scanpos = xsp;
    if (mcc_3R_444()) {
    mcc_scanpos = xsp;
    if (mcc_3_65()) {
    mcc_scanpos = xsp;
    if (mcc_3R_445()) {
    mcc_scanpos = xsp;
    if (mcc_3R_446()) {
    mcc_scanpos = xsp;
    if (mcc_3_66()) {
    mcc_scanpos = xsp;
    if (mcc_3_67()) {
    mcc_scanpos = xsp;
    if (mcc_3R_447()) {
    mcc_scanpos = xsp;
    if (mcc_3R_448()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private bool mcc_3R_431() {
    if (mcc_scan_token(LPARENTHESIS)) return true;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private bool mcc_3R_436() {
    if (mcc_3R_87()) return true;
    if (mcc_scan_token(SEMI)) return true;
    return false;
  }

  private bool mcc_3R_430() {
    if (mcc_scan_token(LBRACE)) return true;
    if (mcc_3R_379()) return true;
    if (mcc_3R_54()) return true;
    if (mcc_scan_token(RBRACE)) return true;
    return false;
  }

  private bool mcc_3R_429() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_436()) mcc_scanpos = xsp;
    if (mcc_3R_54()) return true;
    if (mcc_scan_token(RBRACE)) return true;
    if (mcc_3R_50()) return true;
    return false;
  }

  private bool mcc_3_165() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_416()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_416()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(32)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(34)) return true;
    }
    return false;
  }

  private bool mcc_3R_419() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_165()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_429()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_430()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_431()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_478() {
    if (mcc_scan_token(STAR)) return true;
    return false;
  }

  private bool mcc_3R_460() {
    if (mcc_scan_token(PLUS)) return true;
    return false;
  }

  private bool mcc_3_61() {
    if (mcc_3R_54()) return true;
    return false;
  }

  private bool mcc_3R_459() {
    if (mcc_scan_token(STAR)) return true;
    return false;
  }

  private bool mcc_3R_410() {
    if (mcc_3R_420()) return true;
    return false;
  }

  private bool mcc_3R_75() {
    if (mcc_scan_token(COLON)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_61()) {
    mcc_scanpos = xsp;
    if (mcc_3R_478()) return true;
    }
    return false;
  }

  private bool mcc_3R_395() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_409()) {
    mcc_scanpos = xsp;
    if (mcc_3R_410()) return true;
    }
    return false;
  }

  private bool mcc_3R_409() {
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_416()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(32)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(34)) return true;
    }
    if (mcc_3R_419()) return true;
    return false;
  }

  private bool mcc_3_62() {
    if (mcc_3R_54()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_75()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_253() {
    if (mcc_scan_token(LBOXBRACKET)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_62()) {
    mcc_scanpos = xsp;
    if (mcc_3R_459()) {
    mcc_scanpos = xsp;
    if (mcc_3R_460()) return true;
    }
    }
    if (mcc_scan_token(RBOXBRACKET)) return true;
    return false;
  }

  private bool mcc_3R_252() {
    if (mcc_scan_token(PLUS)) return true;
    return false;
  }

  private bool mcc_3R_200() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_251()) {
    mcc_scanpos = xsp;
    if (mcc_3R_252()) {
    mcc_scanpos = xsp;
    if (mcc_3R_253()) return true;
    }
    }
    return false;
  }

  private bool mcc_3R_251() {
    if (mcc_scan_token(STAR)) return true;
    return false;
  }

  private bool mcc_3_164() {
    if (mcc_3R_81()) return true;
    return false;
  }

  private bool mcc_3R_163() {
    if (mcc_3R_199()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_200()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_428() {
    if (mcc_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_164()) mcc_scanpos = xsp;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private bool mcc_3R_427() {
    if (mcc_scan_token(LBRACE)) return true;
    if (mcc_3R_379()) return true;
    if (mcc_3R_54()) return true;
    if (mcc_scan_token(RBRACE)) return true;
    return false;
  }

  private bool mcc_3R_418() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_427()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_428()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_167() {
    return false;
  }

  private bool mcc_3R_166() {
    if (mcc_scan_token(BAND_TO)) return true;
    if (mcc_3R_86()) return true;
    return false;
  }

  private bool mcc_3R_165() {
    if (mcc_scan_token(BOR_TO)) return true;
    if (mcc_3R_86()) return true;
    return false;
  }

  private bool mcc_3R_164() {
    if (mcc_scan_token(ASSIGN_TO)) return true;
    if (mcc_3R_86()) return true;
    return false;
  }

  private bool mcc_3R_442() {
    return false;
  }

  private bool mcc_3R_119() {
    if (mcc_3R_163()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_164()) {
    mcc_scanpos = xsp;
    if (mcc_3R_165()) {
    mcc_scanpos = xsp;
    if (mcc_3R_166()) {
    mcc_scanpos = xsp;
    if (mcc_3R_167()) return true;
    }
    }
    }
    return false;
  }

  private bool mcc_3_163() {
    if (mcc_3R_87()) return true;
    if (mcc_scan_token(SEMI)) return true;
    return false;
  }

  private bool mcc_3R_441() {
    if (mcc_scan_token(BAND_TO)) return true;
    if (mcc_3R_86()) return true;
    return false;
  }

  private bool mcc_3R_117() {
    if (mcc_scan_token(PERCENT)) return true;
    return false;
  }

  private bool mcc_3R_440() {
    if (mcc_scan_token(BOR_TO)) return true;
    if (mcc_3R_86()) return true;
    return false;
  }

  private bool mcc_3R_426() {
    if (mcc_scan_token(LPARENTHESIS)) return true;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private bool mcc_3R_439() {
    if (mcc_scan_token(ASSIGN_TO)) return true;
    if (mcc_3R_86()) return true;
    return false;
  }

  private bool mcc_3R_435() {
    if (mcc_3R_87()) return true;
    if (mcc_scan_token(SEMI)) return true;
    return false;
  }

  private bool mcc_3R_425() {
    if (mcc_scan_token(LBRACE)) return true;
    if (mcc_3R_379()) return true;
    if (mcc_3R_54()) return true;
    if (mcc_scan_token(RBRACE)) return true;
    return false;
  }

  private bool mcc_3R_424() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_435()) mcc_scanpos = xsp;
    if (mcc_3R_54()) return true;
    if (mcc_scan_token(RBRACE)) return true;
    if (mcc_3R_50()) return true;
    return false;
  }

  private bool mcc_3_162() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_416()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_416()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(32)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(34)) return true;
    }
    return false;
  }

  private bool mcc_3R_118() {
    if (mcc_scan_token(EXCLAMATIONMARK)) return true;
    if (mcc_3R_163()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_439()) {
    mcc_scanpos = xsp;
    if (mcc_3R_440()) {
    mcc_scanpos = xsp;
    if (mcc_3R_441()) {
    mcc_scanpos = xsp;
    if (mcc_3R_442()) return true;
    }
    }
    }
    return false;
  }

  private bool mcc_3R_74() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_118()) {
    mcc_scanpos = xsp;
    if (mcc_3R_119()) return true;
    }
    return false;
  }

  private bool mcc_3R_417() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_162()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_424()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_425()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_426()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_116() {
    if (mcc_scan_token(PERCENT)) return true;
    return false;
  }

  private bool mcc_3R_73() {
    if (mcc_scan_token(DOLLAR)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_117()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3_60() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_73()) mcc_scanpos = xsp;
    if (mcc_scan_token(AMPERSAND)) return true;
    if (mcc_3R_74()) return true;
    return false;
  }

  private bool mcc_3_160() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(DOUBLECOLON)) return true;
    return false;
  }

  private bool mcc_3R_408() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_160()) mcc_scanpos = xsp;
    if (mcc_3R_50()) return true;
    if (mcc_3R_418()) return true;
    return false;
  }

  private bool mcc_3R_72() {
    if (mcc_3R_74()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3_60()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3_161() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_416()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(32)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(34)) return true;
    }
    if (mcc_3R_417()) return true;
    return false;
  }

  private bool mcc_3R_394() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_161()) {
    mcc_scanpos = xsp;
    if (mcc_3R_408()) return true;
    }
    return false;
  }

  private bool mcc_3R_115() {
    if (mcc_scan_token(PERCENT)) return true;
    return false;
  }

  private bool mcc_3R_71() {
    if (mcc_scan_token(DOLLAR)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_116()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3_59() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_71()) mcc_scanpos = xsp;
    if (mcc_scan_token(CIRCUMFLEX)) return true;
    if (mcc_3R_72()) return true;
    return false;
  }

  private bool mcc_3R_376() {
    if (mcc_3R_395()) return true;
    return false;
  }

  private bool mcc_3R_70() {
    if (mcc_3R_72()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3_59()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_375() {
    if (mcc_scan_token(DOT)) return true;
    if (mcc_3R_394()) return true;
    return false;
  }

  private bool mcc_3R_159() {
    if (mcc_scan_token(QUESTIONMARK)) return true;
    return false;
  }

  private bool mcc_3_158() {
    if (mcc_3R_81()) return true;
    return false;
  }

  private bool mcc_3R_114() {
    if (mcc_scan_token(PERCENT)) return true;
    return false;
  }

  private bool mcc_3_159() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(DOUBLECOLON)) return true;
    return false;
  }

  private bool mcc_3R_108() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_159()) mcc_scanpos = xsp;
    if (mcc_3R_50()) return true;
    xsp = mcc_scanpos;
    if (mcc_3R_375()) {
    mcc_scanpos = xsp;
    if (mcc_3R_376()) return true;
    }
    return false;
  }

  private bool mcc_3R_370() {
    if (mcc_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_158()) mcc_scanpos = xsp;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private bool mcc_3R_371() {
    if (mcc_scan_token(BACKSLASH)) return true;
    if (mcc_3R_108()) return true;
    return false;
  }

  private bool mcc_3R_69() {
    if (mcc_scan_token(DOLLAR)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_115()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3_58() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_69()) mcc_scanpos = xsp;
    if (mcc_scan_token(PIPE)) return true;
    if (mcc_3R_70()) return true;
    return false;
  }

  private bool mcc_3R_68() {
    if (mcc_3R_70()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3_58()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3_157() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(DOUBLECOLON)) return true;
    return false;
  }

  private bool mcc_3R_369() {
    if (mcc_scan_token(PERCENT)) return true;
    return false;
  }

  private bool mcc_3R_113() {
    if (mcc_scan_token(PERCENT)) return true;
    return false;
  }

  private bool mcc_3R_368() {
    if (mcc_scan_token(LPARENTHESIS)) return true;
    if (mcc_3R_300()) return true;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    if (mcc_scan_token(EQUAL)) return true;
    return false;
  }

  private bool mcc_3R_356() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_368()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_369()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_3_157()) mcc_scanpos = xsp;
    if (mcc_3R_50()) return true;
    xsp = mcc_scanpos;
    if (mcc_3R_370()) mcc_scanpos = xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_371()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_67() {
    if (mcc_scan_token(DOLLAR)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_114()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3_57() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_67()) mcc_scanpos = xsp;
    if (mcc_scan_token(DOUBLEAMPERSAND)) return true;
    if (mcc_3R_68()) return true;
    return false;
  }

  private bool mcc_3R_358() {
    if (mcc_scan_token(BACKSLASH)) return true;
    if (mcc_3R_108()) return true;
    return false;
  }

  private bool mcc_3R_66() {
    if (mcc_3R_68()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3_57()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_357() {
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_scan_token(FOR)) return true;
    if (mcc_scan_token(LBRACE)) return true;
    if (mcc_3R_356()) return true;
    if (mcc_scan_token(SEMI)) return true;
    if (mcc_3R_284()) return true;
    if (mcc_scan_token(RBRACE)) return true;
    return false;
  }

  private bool mcc_3R_162() {
    if (mcc_scan_token(PERCENT)) return true;
    return false;
  }

  private bool mcc_3R_230() {
    if (mcc_scan_token(PERCENT)) return true;
    return false;
  }

  private bool mcc_3R_112() {
    if (mcc_scan_token(PERCENT)) return true;
    return false;
  }

  private bool mcc_3R_65() {
    if (mcc_scan_token(DOLLAR)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_113()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3_56() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_65()) mcc_scanpos = xsp;
    if (mcc_scan_token(DOUBLEPIPE)) return true;
    if (mcc_3R_66()) return true;
    return false;
  }

  private bool mcc_3R_480() {
    if (mcc_scan_token(PERCENT)) return true;
    return false;
  }

  private bool mcc_3R_195() {
    if (mcc_scan_token(LBOXBRACKET)) return true;
    if (mcc_scan_token(COLON)) return true;
    if (mcc_scan_token(FOR)) return true;
    if (mcc_scan_token(LBRACE)) return true;
    if (mcc_3R_356()) return true;
    if (mcc_scan_token(SEMI)) return true;
    if (mcc_3R_284()) return true;
    if (mcc_scan_token(RBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_357()) { mcc_scanpos = xsp; break; }
    }
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_358()) { mcc_scanpos = xsp; break; }
    }
    if (mcc_scan_token(COLON)) return true;
    if (mcc_scan_token(RBOXBRACKET)) return true;
    return false;
  }

  private bool mcc_3R_64() {
    if (mcc_3R_66()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3_56()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3_156() {
    if (mcc_3R_81()) return true;
    return false;
  }

  private bool mcc_3_149() {
    if (mcc_scan_token(PERCENT)) return true;
    if (mcc_scan_token(QUESTIONMARK)) return true;
    return false;
  }

  private bool mcc_3R_366() {
    if (mcc_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_156()) mcc_scanpos = xsp;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private bool mcc_3R_367() {
    if (mcc_scan_token(BACKSLASH)) return true;
    if (mcc_3R_108()) return true;
    return false;
  }

  private bool mcc_3R_111() {
    if (mcc_scan_token(DOLLAR)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_162()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_62() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_111()) mcc_scanpos = xsp;
    if (mcc_scan_token(THENRIGHT)) return true;
    if (mcc_3R_64()) return true;
    return false;
  }

  private bool mcc_3R_229() {
    if (mcc_scan_token(QUESTIONMARK)) return true;
    return false;
  }

  private bool mcc_3R_313() {
    if (mcc_scan_token(PERCENT)) return true;
    return false;
  }

  private bool mcc_3R_63() {
    if (mcc_scan_token(DOLLAR)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_112()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3_154() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(DOUBLECOLON)) return true;
    return false;
  }

  private bool mcc_3_55() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_63()) mcc_scanpos = xsp;
    if (mcc_scan_token(THENLEFT)) return true;
    if (mcc_3R_64()) return true;
    return false;
  }

  private bool mcc_3_155() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(DOUBLECOLON)) return true;
    return false;
  }

  private bool mcc_3R_365() {
    if (mcc_scan_token(PERCENT)) return true;
    return false;
  }

  private bool mcc_3R_479() {
    if (mcc_scan_token(QUESTIONMARK)) return true;
    return false;
  }

  private bool mcc_3R_354() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_365()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_3_155()) mcc_scanpos = xsp;
    if (mcc_3R_50()) return true;
    xsp = mcc_scanpos;
    if (mcc_3R_366()) mcc_scanpos = xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_367()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3_54() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_55()) {
    mcc_scanpos = xsp;
    if (mcc_3R_62()) return true;
    }
    return false;
  }

  private bool mcc_3_151() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(DOUBLECOLON)) return true;
    return false;
  }

  private bool mcc_3R_284() {
    if (mcc_3R_64()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3_54()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3_153() {
    if (mcc_scan_token(BACKSLASH)) return true;
    if (mcc_3R_108()) return true;
    return false;
  }

  private bool mcc_3R_312() {
    if (mcc_scan_token(QUESTIONMARK)) return true;
    return false;
  }

  private bool mcc_3R_355() {
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_354()) return true;
    return false;
  }

  private bool mcc_3R_104() {
    if (mcc_scan_token(LBOXBRACKET)) return true;
    if (mcc_scan_token(QUESTIONMARK)) return true;
    if (mcc_scan_token(LBOXBRACKET)) return true;
    if (mcc_3R_354()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_355()) { mcc_scanpos = xsp; break; }
    }
    if (mcc_scan_token(RBOXBRACKET)) return true;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3_153()) { mcc_scanpos = xsp; break; }
    }
    if (mcc_scan_token(BACKSLASH)) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_scan_token(CLASS)) return true;
    xsp = mcc_scanpos;
    if (mcc_3_154()) mcc_scanpos = xsp;
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    if (mcc_scan_token(RBOXBRACKET)) return true;
    return false;
  }

  private bool mcc_3_152() {
    if (mcc_3R_81()) return true;
    return false;
  }

  private bool mcc_3R_352() {
    if (mcc_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_152()) mcc_scanpos = xsp;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private bool mcc_3R_353() {
    if (mcc_scan_token(BACKSLASH)) return true;
    if (mcc_3R_108()) return true;
    return false;
  }

  private bool mcc_3_148() {
    if (mcc_scan_token(QUESTIONMARK)) return true;
    if (mcc_scan_token(PERCENT)) return true;
    return false;
  }

  private bool mcc_3_150() {
    if (mcc_3R_86()) return true;
    if (mcc_scan_token(DOT)) return true;
    return false;
  }

  private bool mcc_3R_103() {
    if (mcc_scan_token(LBOXBRACKET)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_148()) {
    mcc_scanpos = xsp;
    if (mcc_3_149()) {
    mcc_scanpos = xsp;
    if (mcc_3R_159()) return true;
    }
    }
    xsp = mcc_scanpos;
    if (mcc_3_150()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_3_151()) mcc_scanpos = xsp;
    if (mcc_3R_50()) return true;
    xsp = mcc_scanpos;
    if (mcc_3R_352()) mcc_scanpos = xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_353()) { mcc_scanpos = xsp; break; }
    }
    if (mcc_scan_token(RBOXBRACKET)) return true;
    return false;
  }

  private bool mcc_3_144() {
    if (mcc_scan_token(PERCENT)) return true;
    if (mcc_scan_token(QUESTIONMARK)) return true;
    return false;
  }

  private bool mcc_3_53() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(DOUBLECOLON)) return true;
    return false;
  }

  private bool mcc_3R_224() {
    if (mcc_scan_token(PERCENT)) return true;
    return false;
  }

  private bool mcc_3R_51() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_53()) mcc_scanpos = xsp;
    if (mcc_3R_50()) return true;
    return false;
  }

  private bool mcc_3_139() {
    if (mcc_scan_token(PERCENT)) return true;
    if (mcc_scan_token(QUESTIONMARK)) return true;
    return false;
  }

  private bool mcc_3_146() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(DOUBLECOLON)) return true;
    return false;
  }

  private bool mcc_3R_109() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_scan_token(CLASS)) return true;
    if (mcc_3R_51()) return true;
    return false;
  }

  private bool mcc_3R_491() {
    if (mcc_3R_86()) return true;
    return false;
  }

  private bool mcc_3R_303() {
    if (mcc_scan_token(BACKSLASH)) return true;
    if (mcc_3R_108()) return true;
    return false;
  }

  private bool mcc_3R_52() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_52()) {
    mcc_scanpos = xsp;
    if (mcc_3R_109()) return true;
    }
    return false;
  }

  private bool mcc_3_52() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_51()) return true;
    return false;
  }

  private bool mcc_3_51() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_scan_token(CLASS)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(GREATEREQUAL)) return true;
    return false;
  }

  private bool mcc_3_134() {
    if (mcc_scan_token(PERCENT)) return true;
    if (mcc_scan_token(QUESTIONMARK)) return true;
    return false;
  }

  private bool mcc_3R_484() {
    if (mcc_scan_token(COMMA)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_491()) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(22)) return true;
    }
    return false;
  }

  private bool mcc_3R_291() {
    if (mcc_scan_token(RANGLE)) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3R_61() {
    if (mcc_scan_token(RANGLE)) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3R_223() {
    if (mcc_scan_token(QUESTIONMARK)) return true;
    return false;
  }

  private bool mcc_3_50() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_scan_token(CLASS)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3R_191() {
    if (mcc_3R_86()) return true;
    if (mcc_scan_token(DOT)) return true;
    return false;
  }

  private bool mcc_3_141() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(DOUBLECOLON)) return true;
    return false;
  }

  private bool mcc_3_49() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(GREATEREQUAL)) return true;
    return false;
  }

  private bool mcc_3R_274() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_scan_token(CLASS)) return true;
    if (mcc_3R_51()) return true;
    return false;
  }

  private bool mcc_3_48() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3R_273() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_scan_token(CLASS)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3_147() {
    if (mcc_3R_81()) return true;
    return false;
  }

  private bool mcc_3R_272() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_51()) return true;
    return false;
  }

  private bool mcc_3_136() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(DOUBLECOLON)) return true;
    return false;
  }

  private bool mcc_3R_302() {
    if (mcc_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_147()) mcc_scanpos = xsp;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private bool mcc_3R_222() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_271()) {
    mcc_scanpos = xsp;
    if (mcc_3R_272()) {
    mcc_scanpos = xsp;
    if (mcc_3R_273()) {
    mcc_scanpos = xsp;
    if (mcc_3R_274()) return true;
    }
    }
    }
    return false;
  }

  private bool mcc_3R_271() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3_132() {
    if (mcc_3R_50()) return true;
    return false;
  }

  private bool mcc_3R_311() {
    if (mcc_3R_86()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_484()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3_47() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_52()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    if (mcc_scan_token(GREATEREQUAL)) return true;
    return false;
  }

  private bool mcc_3_142() {
    if (mcc_3R_81()) return true;
    return false;
  }

  private bool mcc_3_145() {
    if (mcc_3R_86()) return true;
    if (mcc_scan_token(DOT)) return true;
    return false;
  }

  private bool mcc_3_143() {
    if (mcc_scan_token(QUESTIONMARK)) return true;
    if (mcc_scan_token(PERCENT)) return true;
    return false;
  }

  private bool mcc_3R_193() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_143()) {
    mcc_scanpos = xsp;
    if (mcc_3_144()) {
    mcc_scanpos = xsp;
    if (mcc_3R_229()) {
    mcc_scanpos = xsp;
    if (mcc_3R_230()) return true;
    }
    }
    }
    return false;
  }

  private bool mcc_3R_475() {
    if (mcc_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_142()) mcc_scanpos = xsp;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private bool mcc_3R_147() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_193()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_3_145()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_3_146()) mcc_scanpos = xsp;
    if (mcc_3R_50()) return true;
    xsp = mcc_scanpos;
    if (mcc_3R_302()) mcc_scanpos = xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_303()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_476() {
    if (mcc_scan_token(BACKSLASH)) return true;
    if (mcc_3R_108()) return true;
    return false;
  }

  private bool mcc_3_46() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(GREATEREQUAL)) return true;
    return false;
  }

  private bool mcc_3_43() {
    if (mcc_scan_token(LBOXBRACKET)) return true;
    return false;
  }

  private bool mcc_3R_290() {
    if (mcc_scan_token(RANGLE)) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3R_60() {
    if (mcc_scan_token(RANGLE)) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3R_270() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_52()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_43()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3_45() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_52()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_61()) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(34)) return true;
    }
    return false;
  }

  private bool mcc_3R_474() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_138()) {
    mcc_scanpos = xsp;
    if (mcc_3_139()) {
    mcc_scanpos = xsp;
    if (mcc_3R_479()) {
    mcc_scanpos = xsp;
    if (mcc_3R_480()) return true;
    }
    }
    }
    return false;
  }

  private bool mcc_3_42() {
    if (mcc_scan_token(LBOXBRACKET)) return true;
    return false;
  }

  private bool mcc_3_137() {
    if (mcc_3R_81()) return true;
    return false;
  }

  private bool mcc_3_138() {
    if (mcc_scan_token(QUESTIONMARK)) return true;
    if (mcc_scan_token(PERCENT)) return true;
    return false;
  }

  private bool mcc_3R_269() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_51()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_42()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3_140() {
    if (mcc_3R_86()) return true;
    if (mcc_scan_token(DOT)) return true;
    return false;
  }

  private bool mcc_3R_289() {
    if (mcc_scan_token(RANGLE)) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3R_472() {
    if (mcc_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_137()) mcc_scanpos = xsp;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private bool mcc_3_44() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3R_473() {
    if (mcc_scan_token(BACKSLASH)) return true;
    if (mcc_3R_108()) return true;
    return false;
  }

  private bool mcc_3_41() {
    if (mcc_scan_token(LBOXBRACKET)) return true;
    return false;
  }

  private bool mcc_3R_146() {
    if (mcc_scan_token(COUNT)) return true;
    if (mcc_scan_token(LBOXBRACKET)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_474()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_3_140()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_3_141()) mcc_scanpos = xsp;
    if (mcc_3R_50()) return true;
    xsp = mcc_scanpos;
    if (mcc_3R_475()) mcc_scanpos = xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_476()) { mcc_scanpos = xsp; break; }
    }
    if (mcc_scan_token(RBOXBRACKET)) return true;
    if (mcc_scan_token(ASSIGN_TO)) return true;
    if (mcc_3R_86()) return true;
    return false;
  }

  private bool mcc_3R_268() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_52()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_291()) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(34)) return true;
    }
    xsp = mcc_scanpos;
    if (mcc_3_41()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_310() {
    if (mcc_scan_token(PERCENT)) return true;
    return false;
  }

  private bool mcc_3_40() {
    if (mcc_scan_token(LBOXBRACKET)) return true;
    return false;
  }

  private bool mcc_3_133() {
    if (mcc_scan_token(QUESTIONMARK)) return true;
    if (mcc_scan_token(PERCENT)) return true;
    return false;
  }

  private bool mcc_3R_301() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_133()) {
    mcc_scanpos = xsp;
    if (mcc_3_134()) {
    mcc_scanpos = xsp;
    if (mcc_3R_312()) {
    mcc_scanpos = xsp;
    if (mcc_3R_313()) return true;
    }
    }
    }
    return false;
  }

  private bool mcc_3R_221() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_267()) {
    mcc_scanpos = xsp;
    lookingAhead = true;
    mcc_semLA = GetToken(3).kind == WORD && GetToken(3).image == "match";
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_268()) {
    mcc_scanpos = xsp;
    if (mcc_3R_269()) {
    mcc_scanpos = xsp;
    lookingAhead = true;
    mcc_semLA = GetToken(3).kind == WORD && GetToken(3).image == "match";
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_270()) return true;
    }
    }
    }
    return false;
  }

  private bool mcc_3R_267() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_40()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_295() {
    if (mcc_3R_86()) return true;
    return false;
  }

  private bool mcc_3_127() {
    if (mcc_scan_token(PERCENT)) return true;
    if (mcc_scan_token(QUESTIONMARK)) return true;
    return false;
  }

  private bool mcc_3_135() {
    if (mcc_3R_86()) return true;
    if (mcc_scan_token(DOT)) return true;
    return false;
  }

  private bool mcc_3R_192() {
    if (mcc_scan_token(DOLLAR)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_310()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_311()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_59() {
    if (mcc_scan_token(RANGLE)) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3_39() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_52()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    if (mcc_scan_token(GREATEREQUAL)) return true;
    return false;
  }

  private bool mcc_3R_279() {
    if (mcc_scan_token(COMMA)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_295()) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(22)) return true;
    }
    return false;
  }

  private bool mcc_3_131() {
    if (mcc_scan_token(PERCENT)) return true;
    if (mcc_scan_token(QUESTIONMARK)) return true;
    return false;
  }

  private bool mcc_3R_145() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_192()) mcc_scanpos = xsp;
    if (mcc_scan_token(LBOXBRACKET)) return true;
    xsp = mcc_scanpos;
    if (mcc_3R_301()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_3_135()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_3_136()) mcc_scanpos = xsp;
    if (mcc_3R_50()) return true;
    xsp = mcc_scanpos;
    if (mcc_3R_472()) mcc_scanpos = xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_473()) { mcc_scanpos = xsp; break; }
    }
    if (mcc_scan_token(RBOXBRACKET)) return true;
    return false;
  }

  private bool mcc_3R_227() {
    if (mcc_scan_token(DOUBLECOLON)) return true;
    if (mcc_3R_50()) return true;
    return false;
  }

  private bool mcc_3_38() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(GREATEREQUAL)) return true;
    return false;
  }

  private bool mcc_3_35() {
    if (mcc_scan_token(LBOXBRACKET)) return true;
    return false;
  }

  private bool mcc_3R_294() {
    if (mcc_3R_51()) return true;
    return false;
  }

  private bool mcc_3R_144() {
    if (mcc_scan_token(LPARENTHESIS)) return true;
    if (mcc_3R_300()) return true;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    if (mcc_scan_token(EQUAL)) return true;
    return false;
  }

  private bool mcc_3R_292() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3R_293() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3R_100() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_144()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_145()) {
    mcc_scanpos = xsp;
    if (mcc_3R_146()) {
    mcc_scanpos = xsp;
    if (mcc_3R_147()) return true;
    }
    }
    return false;
  }

  private bool mcc_3R_266() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_52()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_35()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_228() {
    if (mcc_3R_86()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_279()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_278() {
    if (mcc_scan_token(COLON)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    lookingAhead = true;
    mcc_semLA = GetToken(1).kind == WORD && (GetToken(1).image == "set" || GetToken(1).image == "array" || GetToken(1).image == "deque");
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_292()) {
    mcc_scanpos = xsp;
    lookingAhead = true;
    mcc_semLA = GetToken(1).kind == WORD && GetToken(1).image == "map";
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_293()) {
    mcc_scanpos = xsp;
    if (mcc_3R_294()) return true;
    }
    }
    return false;
  }

  private bool mcc_3_37() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_52()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_60()) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(34)) return true;
    }
    return false;
  }

  private bool mcc_3_34() {
    if (mcc_scan_token(LBOXBRACKET)) return true;
    return false;
  }

  private bool mcc_3R_265() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_51()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_34()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_187() {
    if (mcc_scan_token(DOUBLECOLON)) return true;
    if (mcc_3R_50()) return true;
    return false;
  }

  private bool mcc_3R_277() {
    if (mcc_3R_51()) return true;
    return false;
  }

  private bool mcc_3R_276() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3_36() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3_33() {
    if (mcc_scan_token(LBOXBRACKET)) return true;
    return false;
  }

  private bool mcc_3R_226() {
    if (mcc_3R_50()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_278()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_275() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3R_264() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_52()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_290()) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(34)) return true;
    }
    xsp = mcc_scanpos;
    if (mcc_3_33()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_142() {
    if (mcc_scan_token(COUNT)) return true;
    if (mcc_scan_token(LBOXBRACKET)) return true;
    return false;
  }

  private bool mcc_3_130() {
    if (mcc_scan_token(QUESTIONMARK)) return true;
    if (mcc_scan_token(PERCENT)) return true;
    return false;
  }

  private bool mcc_3R_190() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_130()) {
    mcc_scanpos = xsp;
    if (mcc_3_131()) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(40)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(39)) return true;
    }
    }
    }
    return false;
  }

  private bool mcc_3R_141() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_190()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_3_132()) {
    mcc_scanpos = xsp;
    if (mcc_3R_191()) return true;
    }
    return false;
  }

  private bool mcc_3R_189() {
    if (mcc_scan_token(DOLLAR)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(39)) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_228()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_225() {
    if (mcc_scan_token(COLON)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    lookingAhead = true;
    mcc_semLA = GetToken(1).kind == WORD && (GetToken(1).image == "set" || GetToken(1).image == "array" || GetToken(1).image == "deque");
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_275()) {
    mcc_scanpos = xsp;
    lookingAhead = true;
    mcc_semLA = GetToken(1).kind == WORD && GetToken(1).image == "map";
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_276()) {
    mcc_scanpos = xsp;
    if (mcc_3R_277()) return true;
    }
    }
    return false;
  }

  private bool mcc_3R_188() {
    if (mcc_scan_token(COMMA)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_226()) {
    mcc_scanpos = xsp;
    if (mcc_3R_227()) return true;
    }
    return false;
  }

  private bool mcc_3_32() {
    if (mcc_scan_token(LBOXBRACKET)) return true;
    return false;
  }

  private bool mcc_3R_140() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_189()) mcc_scanpos = xsp;
    if (mcc_scan_token(LBOXBRACKET)) return true;
    return false;
  }

  private bool mcc_3R_220() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_263()) {
    mcc_scanpos = xsp;
    lookingAhead = true;
    mcc_semLA = GetToken(3).kind == WORD && GetToken(3).image == "match";
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_264()) {
    mcc_scanpos = xsp;
    if (mcc_3R_265()) {
    mcc_scanpos = xsp;
    lookingAhead = true;
    mcc_semLA = GetToken(3).kind == WORD && GetToken(3).image == "match";
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_266()) return true;
    }
    }
    }
    return false;
  }

  private bool mcc_3R_263() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_32()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_186() {
    if (mcc_3R_50()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_225()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3_31() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_52()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    if (mcc_scan_token(GREATEREQUAL)) return true;
    return false;
  }

  private bool mcc_3_129() {
    if (mcc_3R_81()) return true;
    return false;
  }

  private bool mcc_3R_139() {
    if (mcc_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_186()) {
    mcc_scanpos = xsp;
    if (mcc_3R_187()) return true;
    }
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_188()) { mcc_scanpos = xsp; break; }
    }
    if (mcc_scan_token(RPARENTHESIS)) return true;
    if (mcc_scan_token(EQUAL)) return true;
    return false;
  }

  private bool mcc_3R_470() {
    if (mcc_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_129()) mcc_scanpos = xsp;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private bool mcc_3R_93() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_139()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_140()) {
    mcc_scanpos = xsp;
    if (mcc_3R_141()) {
    mcc_scanpos = xsp;
    if (mcc_3R_142()) return true;
    }
    }
    return false;
  }

  private bool mcc_3R_471() {
    if (mcc_scan_token(BACKSLASH)) return true;
    if (mcc_3R_108()) return true;
    return false;
  }

  private bool mcc_3_27() {
    if (mcc_scan_token(LBRACE)) return true;
    return false;
  }

  private bool mcc_3_30() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(GREATEREQUAL)) return true;
    return false;
  }

  private bool mcc_3R_288() {
    if (mcc_scan_token(RANGLE)) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3R_58() {
    if (mcc_scan_token(RANGLE)) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3R_262() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_52()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_27()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3_29() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_52()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_59()) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(34)) return true;
    }
    return false;
  }

  private bool mcc_3_26() {
    if (mcc_scan_token(LBRACE)) return true;
    return false;
  }

  private bool mcc_3R_261() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_51()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_26()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3_128() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(DOUBLECOLON)) return true;
    return false;
  }

  private bool mcc_3_126() {
    if (mcc_scan_token(QUESTIONMARK)) return true;
    if (mcc_scan_token(PERCENT)) return true;
    return false;
  }

  private bool mcc_3R_185() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_126()) {
    mcc_scanpos = xsp;
    if (mcc_3_127()) {
    mcc_scanpos = xsp;
    if (mcc_3R_223()) {
    mcc_scanpos = xsp;
    if (mcc_3R_224()) return true;
    }
    }
    }
    return false;
  }

  private bool mcc_3_25() {
    if (mcc_scan_token(LBRACE)) return true;
    return false;
  }

  private bool mcc_3_28() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3R_260() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_52()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_289()) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(34)) return true;
    }
    xsp = mcc_scanpos;
    if (mcc_3_25()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_184() {
    if (mcc_scan_token(LPARENTHESIS)) return true;
    if (mcc_3R_300()) return true;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    if (mcc_scan_token(EQUAL)) return true;
    return false;
  }

  private bool mcc_3R_138() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_184()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_185()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_3_128()) mcc_scanpos = xsp;
    if (mcc_3R_50()) return true;
    xsp = mcc_scanpos;
    if (mcc_3R_470()) mcc_scanpos = xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_471()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3_24() {
    if (mcc_scan_token(LBRACE)) return true;
    return false;
  }

  private bool mcc_3R_219() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_259()) {
    mcc_scanpos = xsp;
    lookingAhead = true;
    mcc_semLA = GetToken(5).kind == WORD && GetToken(5).image == "match";
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_260()) {
    mcc_scanpos = xsp;
    if (mcc_3R_261()) {
    mcc_scanpos = xsp;
    lookingAhead = true;
    mcc_semLA = GetToken(5).kind == WORD && GetToken(5).image == "match";
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_262()) return true;
    }
    }
    }
    return false;
  }

  private bool mcc_3R_259() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_24()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3_23() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_52()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    if (mcc_scan_token(GREATEREQUAL)) return true;
    return false;
  }

  private bool mcc_3R_466() {
    if (mcc_scan_token(BACKSLASH)) return true;
    if (mcc_3R_108()) return true;
    return false;
  }

  private bool mcc_3R_465() {
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_138()) return true;
    return false;
  }

  private bool mcc_3_22() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(GREATEREQUAL)) return true;
    return false;
  }

  private bool mcc_3R_401() {
    if (mcc_scan_token(RANGLE)) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3_19() {
    if (mcc_scan_token(LBRACE)) return true;
    return false;
  }

  private bool mcc_3_18() {
    if (mcc_scan_token(LBRACE)) return true;
    return false;
  }

  private bool mcc_3R_258() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_52()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_19()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_91() {
    if (mcc_scan_token(LBOXBRACKET)) return true;
    if (mcc_scan_token(LBOXBRACKET)) return true;
    if (mcc_3R_138()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_465()) { mcc_scanpos = xsp; break; }
    }
    if (mcc_scan_token(RBOXBRACKET)) return true;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_466()) { mcc_scanpos = xsp; break; }
    }
    if (mcc_scan_token(RBOXBRACKET)) return true;
    return false;
  }

  private bool mcc_3_21() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_52()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_58()) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(34)) return true;
    }
    return false;
  }

  private bool mcc_3R_257() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_51()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_18()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3_20() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3R_464() {
    if (mcc_scan_token(BACKSLASH)) return true;
    if (mcc_3R_108()) return true;
    return false;
  }

  private bool mcc_3_17() {
    if (mcc_scan_token(LBRACE)) return true;
    return false;
  }

  private bool mcc_3_16() {
    if (mcc_scan_token(LBRACE)) return true;
    return false;
  }

  private bool mcc_3R_256() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_52()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_288()) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(34)) return true;
    }
    xsp = mcc_scanpos;
    if (mcc_3_17()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_463() {
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_scan_token(FOR)) return true;
    if (mcc_scan_token(LBRACE)) return true;
    if (mcc_3R_138()) return true;
    if (mcc_scan_token(SEMI)) return true;
    if (mcc_3R_284()) return true;
    if (mcc_scan_token(RBRACE)) return true;
    return false;
  }

  private bool mcc_3R_403() {
    if (mcc_scan_token(RANGLE)) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3R_218() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_255()) {
    mcc_scanpos = xsp;
    lookingAhead = true;
    mcc_semLA = GetToken(3).kind == WORD && GetToken(3).image == "match";
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_256()) {
    mcc_scanpos = xsp;
    if (mcc_3R_257()) {
    mcc_scanpos = xsp;
    lookingAhead = true;
    mcc_semLA = GetToken(3).kind == WORD && GetToken(3).image == "match";
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_258()) return true;
    }
    }
    }
    return false;
  }

  private bool mcc_3R_255() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_16()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_90() {
    if (mcc_scan_token(LBOXBRACKET)) return true;
    if (mcc_scan_token(LBOXBRACKET)) return true;
    if (mcc_scan_token(FOR)) return true;
    if (mcc_scan_token(LBRACE)) return true;
    if (mcc_3R_138()) return true;
    if (mcc_scan_token(SEMI)) return true;
    if (mcc_3R_284()) return true;
    if (mcc_scan_token(RBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_463()) { mcc_scanpos = xsp; break; }
    }
    if (mcc_scan_token(RBOXBRACKET)) return true;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_464()) { mcc_scanpos = xsp; break; }
    }
    if (mcc_scan_token(RBOXBRACKET)) return true;
    return false;
  }

  private bool mcc_3R_402() {
    if (mcc_scan_token(RANGLE)) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3R_183() {
    if (mcc_3R_51()) return true;
    return false;
  }

  private bool mcc_3R_399() {
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_86()) return true;
    return false;
  }

  private bool mcc_3R_182() {
    if (mcc_3R_222()) return true;
    return false;
  }

  private bool mcc_3R_400() {
    if (mcc_scan_token(RANGLE)) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3R_92() {
    if (mcc_scan_token(LBOXBRACKET)) return true;
    if (mcc_scan_token(FOR)) return true;
    if (mcc_scan_token(LBRACE)) return true;
    if (mcc_3R_138()) return true;
    if (mcc_scan_token(SEMI)) return true;
    if (mcc_3R_284()) return true;
    if (mcc_scan_token(RBRACE)) return true;
    if (mcc_scan_token(RBOXBRACKET)) return true;
    return false;
  }

  private bool mcc_3R_181() {
    if (mcc_3R_221()) return true;
    return false;
  }

  private bool mcc_3R_180() {
    if (mcc_3R_220()) return true;
    return false;
  }

  private bool mcc_3_121() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(DOT)) return true;
    return false;
  }

  private bool mcc_3R_179() {
    if (mcc_3R_219()) return true;
    return false;
  }

  private bool mcc_3R_347() {
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_372()) return true;
    return false;
  }

  private bool mcc_3R_384() {
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3R_137() {
    Token xsp;
    xsp = mcc_scanpos;
    lookingAhead = true;
    mcc_semLA = GetToken(1).kind == WORD && GetToken(1).image == "set";
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_178()) {
    mcc_scanpos = xsp;
    lookingAhead = true;
    mcc_semLA = GetToken(1).kind == WORD && GetToken(1).image == "map";
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_179()) {
    mcc_scanpos = xsp;
    lookingAhead = true;
    mcc_semLA = GetToken(1).kind == WORD && GetToken(1).image == "array";
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_180()) {
    mcc_scanpos = xsp;
    lookingAhead = true;
    mcc_semLA = GetToken(1).kind == WORD && GetToken(1).image == "deque";
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_181()) {
    mcc_scanpos = xsp;
    lookingAhead = true;
    mcc_semLA = GetToken(1).kind == WORD && GetToken(1).image == "match";
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_182()) {
    mcc_scanpos = xsp;
    if (mcc_3R_183()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private bool mcc_3R_178() {
    if (mcc_3R_218()) return true;
    return false;
  }

  private bool mcc_3R_383() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_51()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_403()) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(34)) return true;
    }
    return false;
  }

  private bool mcc_3R_382() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_51()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_402()) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(34)) return true;
    }
    return false;
  }

  private bool mcc_3R_381() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_51()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_401()) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(34)) return true;
    }
    return false;
  }

  private bool mcc_3R_300() {
    if (mcc_3R_86()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_399()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_372() {
    Token xsp;
    xsp = mcc_scanpos;
    lookingAhead = true;
    mcc_semLA = GetToken(1).kind == WORD && GetToken(1).image == "set";
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_380()) {
    mcc_scanpos = xsp;
    lookingAhead = true;
    mcc_semLA = GetToken(1).kind == WORD && GetToken(1).image == "map";
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_381()) {
    mcc_scanpos = xsp;
    lookingAhead = true;
    mcc_semLA = GetToken(1).kind == WORD && GetToken(1).image == "array";
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_382()) {
    mcc_scanpos = xsp;
    lookingAhead = true;
    mcc_semLA = GetToken(1).kind == WORD && GetToken(1).image == "deque";
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_383()) {
    mcc_scanpos = xsp;
    if (mcc_3R_384()) return true;
    }
    }
    }
    }
    return false;
  }

  private bool mcc_3R_380() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_51()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_400()) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(34)) return true;
    }
    return false;
  }

  private bool mcc_3R_134() {
    if (mcc_scan_token(DOUBLECOLON)) return true;
    if (mcc_3R_50()) return true;
    return false;
  }

  private bool mcc_3_125() {
    if (mcc_3R_81()) return true;
    return false;
  }

  private bool mcc_3_122() {
    if (mcc_3R_84()) return true;
    if (mcc_scan_token(DOT)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_121()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_196() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(61)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(62)) return true;
    }
    xsp = mcc_scanpos;
    if (mcc_3R_347()) mcc_scanpos = xsp;
    if (mcc_scan_token(LPARENTHESIS)) return true;
    if (mcc_3R_132()) return true;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private bool mcc_3R_133() {
    if (mcc_3R_50()) return true;
    return false;
  }

  private bool mcc_3R_84() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_133()) {
    mcc_scanpos = xsp;
    if (mcc_3R_134()) return true;
    }
    return false;
  }

  private bool mcc_3_123() {
    if (mcc_3R_81()) return true;
    return false;
  }

  private bool mcc_3_124() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(DOUBLECOLON)) return true;
    return false;
  }

  private bool mcc_3R_105() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_124()) mcc_scanpos = xsp;
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LPARENTHESIS)) return true;
    xsp = mcc_scanpos;
    if (mcc_3_125()) mcc_scanpos = xsp;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private bool mcc_3R_107() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(COLON)) return true;
    if (mcc_3R_51()) return true;
    return false;
  }

  private bool mcc_3_120() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(DOUBLECOLON)) return true;
    return false;
  }

  private bool mcc_3R_317() {
    if (mcc_scan_token(LPARENTHESIS)) return true;
    if (mcc_3R_300()) return true;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    if (mcc_scan_token(EQUAL)) return true;
    return false;
  }

  private bool mcc_3R_314() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_317()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_3_120()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_3_122()) mcc_scanpos = xsp;
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LPARENTHESIS)) return true;
    xsp = mcc_scanpos;
    if (mcc_3_123()) mcc_scanpos = xsp;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private bool mcc_3_119() {
    if (mcc_3R_107()) return true;
    if (mcc_scan_token(ARROW)) return true;
    if (mcc_3R_87()) return true;
    if (mcc_scan_token(ARROW)) return true;
    return false;
  }

  private bool mcc_3R_87() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(COLON)) return true;
    if (mcc_3R_137()) return true;
    return false;
  }

  private bool mcc_3R_438() {
    if (mcc_3R_87()) return true;
    if (mcc_scan_token(ARROW)) return true;
    return false;
  }

  private bool mcc_3R_434() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_437()) {
    mcc_scanpos = xsp;
    if (mcc_3R_438()) return true;
    }
    return false;
  }

  private bool mcc_3R_437() {
    if (mcc_3R_107()) return true;
    if (mcc_scan_token(ARROW)) return true;
    if (mcc_3R_87()) return true;
    if (mcc_scan_token(ARROW)) return true;
    return false;
  }

  private bool mcc_3R_136() {
    if (mcc_scan_token(DOUBLECOLON)) return true;
    if (mcc_3R_50()) return true;
    return false;
  }

  private bool mcc_3_118() {
    if (mcc_3R_87()) return true;
    if (mcc_scan_token(COMMA)) return true;
    return false;
  }

  private bool mcc_3R_422() {
    if (mcc_3R_434()) return true;
    return false;
  }

  private bool mcc_3R_411() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_421()) {
    mcc_scanpos = xsp;
    if (mcc_3R_422()) return true;
    }
    return false;
  }

  private bool mcc_3R_421() {
    if (mcc_3R_87()) return true;
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_434()) return true;
    return false;
  }

  private bool mcc_3R_57() {
    if (mcc_scan_token(RANGLE)) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3R_407() {
    if (mcc_scan_token(RANGLE)) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3R_177() {
    if (mcc_scan_token(COLON)) return true;
    if (mcc_3R_137()) return true;
    return false;
  }

  private bool mcc_3R_234() {
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_132()) return true;
    return false;
  }

  private bool mcc_3_117() {
    if (mcc_3R_87()) return true;
    if (mcc_scan_token(SEMI)) return true;
    return false;
  }

  private bool mcc_3R_398() {
    if (mcc_3R_411()) return true;
    return false;
  }

  private bool mcc_3R_135() {
    if (mcc_3R_50()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_177()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_86() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_135()) {
    mcc_scanpos = xsp;
    if (mcc_3R_136()) return true;
    }
    return false;
  }

  private bool mcc_3R_379() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_397()) {
    mcc_scanpos = xsp;
    if (mcc_3R_398()) return true;
    }
    return false;
  }

  private bool mcc_3R_397() {
    if (mcc_3R_87()) return true;
    if (mcc_scan_token(SEMI)) return true;
    if (mcc_3R_411()) return true;
    return false;
  }

  private bool mcc_3R_56() {
    if (mcc_scan_token(RANGLE)) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3R_406() {
    if (mcc_scan_token(RANGLE)) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3R_81() {
    if (mcc_3R_132()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_234()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_405() {
    if (mcc_scan_token(RANGLE)) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3_115() {
    if (mcc_scan_token(LBOXBRACKET)) return true;
    if (mcc_3R_54()) return true;
    if (mcc_scan_token(RBOXBRACKET)) return true;
    return false;
  }

  private bool mcc_3R_350() {
    return false;
  }

  private bool mcc_3R_377() {
    if (mcc_3R_222()) return true;
    return false;
  }

  private bool mcc_3R_415() {
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_54()) return true;
    return false;
  }

  private bool mcc_3R_392() {
    if (mcc_scan_token(LPARENTHESIS)) return true;
    if (mcc_3R_54()) return true;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private bool mcc_3R_349() {
    if (mcc_scan_token(LBOXBRACKET)) return true;
    if (mcc_3R_54()) return true;
    if (mcc_scan_token(RBOXBRACKET)) return true;
    if (mcc_3R_346()) return true;
    return false;
  }

  private bool mcc_3_15() {
    if (mcc_3R_54()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_415()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_374() {
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_393()) return true;
    return false;
  }

  private bool mcc_3R_55() {
    if (mcc_scan_token(RANGLE)) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3_14() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_52()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_57()) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(34)) return true;
    }
    return false;
  }

  private bool mcc_3_13() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3R_348() {
    if (mcc_scan_token(DOT)) return true;
    if (mcc_scan_token(VISITED)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_115()) mcc_scanpos = xsp;
    if (mcc_3R_346()) return true;
    return false;
  }

  private bool mcc_3R_391() {
    if (mcc_scan_token(LBOXBRACKET)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_15()) mcc_scanpos = xsp;
    if (mcc_scan_token(RBOXBRACKET)) return true;
    return false;
  }

  private bool mcc_3_113() {
    if (mcc_3R_81()) return true;
    return false;
  }

  private bool mcc_3R_364() {
    return false;
  }

  private bool mcc_3R_217() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_52()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_407()) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(34)) return true;
    }
    return false;
  }

  private bool mcc_3R_363() {
    if (mcc_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_113()) mcc_scanpos = xsp;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private bool mcc_3R_216() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3R_176() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_216()) {
    mcc_scanpos = xsp;
    lookingAhead = true;
    mcc_semLA = GetToken(3).kind == WORD && GetToken(3).image == "match";
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_217()) return true;
    }
    xsp = mcc_scanpos;
    if (mcc_3R_391()) {
    mcc_scanpos = xsp;
    if (mcc_3R_392()) return true;
    }
    return false;
  }

  private bool mcc_3R_414() {
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_54()) return true;
    return false;
  }

  private bool mcc_3R_362() {
    if (mcc_scan_token(LBRACE)) return true;
    if (mcc_3R_379()) return true;
    if (mcc_3R_54()) return true;
    if (mcc_scan_token(RBRACE)) return true;
    return false;
  }

  private bool mcc_3_112() {
    if (mcc_3R_87()) return true;
    if (mcc_scan_token(SEMI)) return true;
    return false;
  }

  private bool mcc_3R_390() {
    if (mcc_scan_token(LPARENTHESIS)) return true;
    if (mcc_3R_54()) return true;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private bool mcc_3_12() {
    if (mcc_3R_54()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_414()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3_11() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_52()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_56()) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(34)) return true;
    }
    return false;
  }

  private bool mcc_3_10() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3R_389() {
    if (mcc_scan_token(LBOXBRACKET)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_12()) mcc_scanpos = xsp;
    if (mcc_scan_token(RBOXBRACKET)) return true;
    return false;
  }

  private bool mcc_3R_396() {
    if (mcc_3R_87()) return true;
    if (mcc_scan_token(SEMI)) return true;
    return false;
  }

  private bool mcc_3_111() {
    if (mcc_3R_51()) return true;
    return false;
  }

  private bool mcc_3R_378() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_396()) mcc_scanpos = xsp;
    if (mcc_3R_54()) return true;
    if (mcc_scan_token(RBRACE)) return true;
    if (mcc_3R_50()) return true;
    return false;
  }

  private bool mcc_3R_215() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_52()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_406()) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(34)) return true;
    }
    return false;
  }

  private bool mcc_3_110() {
    if (mcc_3R_81()) return true;
    return false;
  }

  private bool mcc_3R_53() {
    if (mcc_scan_token(RANGLE)) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3R_404() {
    if (mcc_scan_token(RANGLE)) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3R_214() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3R_361() {
    if (mcc_scan_token(LANGLE)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_111()) {
    mcc_scanpos = xsp;
    if (mcc_3R_377()) return true;
    }
    if (mcc_scan_token(RANGLE)) return true;
    xsp = mcc_scanpos;
    if (mcc_3R_378()) mcc_scanpos = xsp;
    if (mcc_scan_token(LBRACE)) return true;
    if (mcc_3R_379()) return true;
    if (mcc_3R_54()) return true;
    if (mcc_scan_token(RBRACE)) return true;
    return false;
  }

  private bool mcc_3R_175() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_214()) {
    mcc_scanpos = xsp;
    lookingAhead = true;
    mcc_semLA = GetToken(3).kind == WORD && GetToken(3).image == "match";
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_215()) return true;
    }
    xsp = mcc_scanpos;
    if (mcc_3R_389()) {
    mcc_scanpos = xsp;
    if (mcc_3R_390()) return true;
    }
    return false;
  }

  private bool mcc_3R_413() {
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_54()) return true;
    if (mcc_scan_token(ARROW)) return true;
    if (mcc_3R_54()) return true;
    return false;
  }

  private bool mcc_3_114() {
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    if (mcc_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_110()) mcc_scanpos = xsp;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private bool mcc_3R_388() {
    if (mcc_scan_token(LPARENTHESIS)) return true;
    if (mcc_3R_54()) return true;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private bool mcc_3_116() {
    if (mcc_scan_token(DOT)) return true;
    if (mcc_3R_50()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_114()) {
    mcc_scanpos = xsp;
    if (mcc_3R_361()) {
    mcc_scanpos = xsp;
    lookingAhead = true;
    mcc_semLA = GetToken(0).kind == WORD && GetToken(0).image == "removeIf";
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_362()) {
    mcc_scanpos = xsp;
    if (mcc_3R_363()) {
    mcc_scanpos = xsp;
    if (mcc_3R_364()) return true;
    }
    }
    }
    }
    if (mcc_3R_346()) return true;
    return false;
  }

  private bool mcc_3R_346() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_116()) {
    mcc_scanpos = xsp;
    if (mcc_3R_348()) {
    mcc_scanpos = xsp;
    if (mcc_3R_349()) {
    mcc_scanpos = xsp;
    if (mcc_3R_350()) return true;
    }
    }
    }
    return false;
  }

  private bool mcc_3_9() {
    if (mcc_3R_54()) return true;
    if (mcc_scan_token(ARROW)) return true;
    if (mcc_3R_54()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_413()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3_8() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_52()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_55()) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(34)) return true;
    }
    return false;
  }

  private bool mcc_3_7() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3R_387() {
    if (mcc_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_9()) mcc_scanpos = xsp;
    if (mcc_scan_token(RBRACE)) return true;
    return false;
  }

  private bool mcc_3R_213() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_52()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_405()) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(34)) return true;
    }
    return false;
  }

  private bool mcc_3R_212() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3R_393() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(EQUAL)) return true;
    if (mcc_3R_54()) return true;
    return false;
  }

  private bool mcc_3R_174() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_212()) {
    mcc_scanpos = xsp;
    lookingAhead = true;
    mcc_semLA = GetToken(5).kind == WORD && GetToken(5).image == "match";
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_213()) return true;
    }
    xsp = mcc_scanpos;
    if (mcc_3R_387()) {
    mcc_scanpos = xsp;
    if (mcc_3R_388()) return true;
    }
    return false;
  }

  private bool mcc_3R_412() {
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_54()) return true;
    return false;
  }

  private bool mcc_3R_373() {
    if (mcc_3R_393()) return true;
    return false;
  }

  private bool mcc_3R_386() {
    if (mcc_scan_token(LPARENTHESIS)) return true;
    if (mcc_3R_54()) return true;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private bool mcc_3_6() {
    if (mcc_3R_54()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_412()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3_5() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_52()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_53()) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(34)) return true;
    }
    return false;
  }

  private bool mcc_3_4() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3R_360() {
    if (mcc_scan_token(AT)) return true;
    if (mcc_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_373()) mcc_scanpos = xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_374()) { mcc_scanpos = xsp; break; }
    }
    if (mcc_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private bool mcc_3R_385() {
    if (mcc_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_6()) mcc_scanpos = xsp;
    if (mcc_scan_token(RBRACE)) return true;
    return false;
  }

  private bool mcc_3R_351() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_359()) {
    mcc_scanpos = xsp;
    if (mcc_3R_360()) return true;
    }
    return false;
  }

  private bool mcc_3R_359() {
    if (mcc_scan_token(LPARENTHESIS)) return true;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private bool mcc_3R_211() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_52()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_404()) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(34)) return true;
    }
    return false;
  }

  private bool mcc_3R_210() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3R_129() {
    Token xsp;
    xsp = mcc_scanpos;
    lookingAhead = true;
    mcc_semLA = GetToken(1).kind == WORD && GetToken(1).image == "set";
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_173()) {
    mcc_scanpos = xsp;
    lookingAhead = true;
    mcc_semLA = GetToken(1).kind == WORD && GetToken(1).image == "map";
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_174()) {
    mcc_scanpos = xsp;
    lookingAhead = true;
    mcc_semLA = GetToken(1).kind == WORD && GetToken(1).image == "array";
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_175()) {
    mcc_scanpos = xsp;
    lookingAhead = true;
    mcc_semLA = GetToken(1).kind == WORD && GetToken(1).image == "deque";
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_176()) return true;
    }
    }
    }
    return false;
  }

  private bool mcc_3R_173() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_210()) {
    mcc_scanpos = xsp;
    lookingAhead = true;
    mcc_semLA = GetToken(3).kind == WORD && GetToken(3).image == "match";
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_211()) return true;
    }
    xsp = mcc_scanpos;
    if (mcc_3R_385()) {
    mcc_scanpos = xsp;
    if (mcc_3R_386()) return true;
    }
    return false;
  }

  private bool mcc_3R_158() {
    if (mcc_scan_token(LPARENTHESIS)) return true;
    if (mcc_3R_54()) return true;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private bool mcc_3R_157() {
    if (mcc_scan_token(THIS)) return true;
    if (mcc_3R_346()) return true;
    return false;
  }

  private bool mcc_3R_156() {
    if (mcc_scan_token(AT)) return true;
    if (mcc_scan_token(LPARENTHESIS)) return true;
    if (mcc_3R_78()) return true;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private bool mcc_3R_77() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(51)) mcc_scanpos = xsp;
    if (mcc_3R_129()) return true;
    return false;
  }

  private bool mcc_3_3() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(DOUBLECOLON)) return true;
    return false;
  }

  private bool mcc_3R_155() {
    if (mcc_3R_84()) return true;
    if (mcc_3R_346()) return true;
    return false;
  }

  private bool mcc_3R_154() {
    if (mcc_scan_token(DEF)) return true;
    if (mcc_scan_token(LPARENTHESIS)) return true;
    if (mcc_3R_81()) return true;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private bool mcc_3R_461() {
    if (mcc_scan_token(NEW)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_3R_351()) return true;
    return false;
  }

  private bool mcc_3R_197() {
    return false;
  }

  private bool mcc_3R_153() {
    if (mcc_scan_token(NEW)) return true;
    if (mcc_3R_51()) return true;
    if (mcc_3R_351()) return true;
    return false;
  }

  private bool mcc_3_109() {
    if (mcc_3R_106()) return true;
    if (mcc_3R_346()) return true;
    return false;
  }

  private bool mcc_3R_160() {
    Token xsp;
    xsp = mcc_scanpos;
    lookingAhead = true;
    mcc_semLA = GetToken(1).kind == WORD && GetToken(1).image == "match";
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_197()) return true;
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_scan_token(CLASS)) return true;
    xsp = mcc_scanpos;
    if (mcc_3_3()) mcc_scanpos = xsp;
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    if (mcc_scan_token(LPARENTHESIS)) return true;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private bool mcc_3_108() {
    if (mcc_3R_77()) return true;
    if (mcc_3R_346()) return true;
    return false;
  }

  private bool mcc_3_107() {
    if (mcc_3R_76()) return true;
    return false;
  }

  private bool mcc_3_106() {
    if (mcc_3R_105()) return true;
    return false;
  }

  private bool mcc_3R_106() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(51)) mcc_scanpos = xsp;
    if (mcc_3R_160()) return true;
    return false;
  }

  private bool mcc_3R_152() {
    if (mcc_3R_196()) return true;
    if (mcc_3R_346()) return true;
    return false;
  }

  private bool mcc_3R_151() {
    if (mcc_3R_105()) return true;
    if (mcc_3R_346()) return true;
    return false;
  }

  private bool mcc_3R_150() {
    if (mcc_3R_195()) return true;
    if (mcc_3R_346()) return true;
    return false;
  }

  private bool mcc_3R_128() {
    if (mcc_3R_50()) return true;
    return false;
  }

  private bool mcc_3_105() {
    if (mcc_3R_104()) return true;
    if (mcc_3R_346()) return true;
    return false;
  }

  private bool mcc_3R_102() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_104()) {
    mcc_scanpos = xsp;
    if (mcc_3_105()) {
    mcc_scanpos = xsp;
    if (mcc_3R_150()) {
    mcc_scanpos = xsp;
    if (mcc_3R_151()) {
    mcc_scanpos = xsp;
    if (mcc_3R_152()) {
    mcc_scanpos = xsp;
    if (mcc_3_107()) {
    mcc_scanpos = xsp;
    if (mcc_3_108()) {
    mcc_scanpos = xsp;
    if (mcc_3_109()) {
    mcc_scanpos = xsp;
    if (mcc_3R_153()) {
    mcc_scanpos = xsp;
    if (mcc_3R_154()) {
    mcc_scanpos = xsp;
    if (mcc_3R_155()) {
    mcc_scanpos = xsp;
    if (mcc_3R_156()) {
    mcc_scanpos = xsp;
    if (mcc_3R_157()) {
    mcc_scanpos = xsp;
    if (mcc_3R_158()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private bool mcc_3_104() {
    if (mcc_3R_103()) return true;
    if (mcc_3R_346()) return true;
    return false;
  }

  private bool mcc_3_2() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(DOUBLECOLON)) return true;
    if (mcc_3R_50()) return true;
    return false;
  }

  private bool mcc_3_103() {
    if (mcc_3R_102()) return true;
    return false;
  }

  private bool mcc_3_1() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(DOUBLECOLON)) return true;
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(DOUBLECOLON)) return true;
    if (mcc_3R_50()) return true;
    return false;
  }

  private bool mcc_3R_127() {
    if (mcc_scan_token(NULL)) return true;
    return false;
  }

  private bool mcc_3R_126() {
    if (mcc_scan_token(FALSE)) return true;
    return false;
  }

  private bool mcc_3R_342() {
    if (mcc_scan_token(BITWISECOMPLEMENT)) return true;
    if (mcc_3R_102()) return true;
    return false;
  }

  private bool mcc_3R_125() {
    if (mcc_scan_token(TRUE)) return true;
    return false;
  }

  private bool mcc_3R_124() {
    if (mcc_3R_172()) return true;
    return false;
  }

  private bool mcc_3R_341() {
    if (mcc_scan_token(PLUS)) return true;
    if (mcc_3R_102()) return true;
    return false;
  }

  private bool mcc_3R_123() {
    if (mcc_3R_171()) return true;
    return false;
  }

  private bool mcc_3R_122() {
    if (mcc_3R_170()) return true;
    return false;
  }

  private bool mcc_3R_121() {
    if (mcc_3R_169()) return true;
    return false;
  }

  private bool mcc_3_102() {
    if (mcc_scan_token(LPARENTHESIS)) return true;
    if (mcc_3R_76()) return true;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private bool mcc_3R_340() {
    if (mcc_scan_token(80)) return true;
    if (mcc_3R_102()) return true;
    return false;
  }

  private bool mcc_3R_76() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_121()) {
    mcc_scanpos = xsp;
    if (mcc_3R_122()) {
    mcc_scanpos = xsp;
    if (mcc_3R_123()) {
    mcc_scanpos = xsp;
    if (mcc_3R_124()) {
    mcc_scanpos = xsp;
    if (mcc_3R_125()) {
    mcc_scanpos = xsp;
    if (mcc_3R_126()) {
    mcc_scanpos = xsp;
    if (mcc_3R_127()) {
    mcc_scanpos = xsp;
    if (mcc_3_1()) {
    mcc_scanpos = xsp;
    if (mcc_3_2()) {
    mcc_scanpos = xsp;
    lookingAhead = true;
    mcc_semLA = GetToken(1).kind == WORD && varDecls.Lookup(GetToken(1).image) == null
                && TypesHelper.GetInheritanceType(GetToken(1).image, env.Model) != null;
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_128()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private bool mcc_3R_339() {
    if (mcc_scan_token(EXCLAMATIONMARK)) return true;
    if (mcc_3R_102()) return true;
    return false;
  }

  private bool mcc_3R_334() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_338()) {
    mcc_scanpos = xsp;
    if (mcc_3R_339()) {
    mcc_scanpos = xsp;
    if (mcc_3R_340()) {
    mcc_scanpos = xsp;
    if (mcc_3R_341()) {
    mcc_scanpos = xsp;
    if (mcc_3R_342()) {
    mcc_scanpos = xsp;
    if (mcc_3_103()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private bool mcc_3R_338() {
    if (mcc_scan_token(LPARENTHESIS)) return true;
    if (mcc_3R_76()) return true;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    if (mcc_3R_102()) return true;
    return false;
  }

  private bool mcc_3R_345() {
    if (mcc_scan_token(PERCENT)) return true;
    if (mcc_3R_334()) return true;
    return false;
  }

  private bool mcc_3R_132() {
    if (mcc_3R_54()) return true;
    return false;
  }

  private bool mcc_3R_344() {
    if (mcc_scan_token(DIV)) return true;
    if (mcc_3R_334()) return true;
    return false;
  }

  private bool mcc_3R_335() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_343()) {
    mcc_scanpos = xsp;
    if (mcc_3R_344()) {
    mcc_scanpos = xsp;
    if (mcc_3R_345()) return true;
    }
    }
    return false;
  }

  private bool mcc_3R_343() {
    if (mcc_scan_token(STAR)) return true;
    if (mcc_3R_334()) return true;
    return false;
  }

  private bool mcc_3R_329() {
    if (mcc_3R_334()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_335()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_337() {
    if (mcc_scan_token(80)) return true;
    if (mcc_3R_329()) return true;
    return false;
  }

  private bool mcc_3R_330() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_336()) {
    mcc_scanpos = xsp;
    if (mcc_3R_337()) return true;
    }
    return false;
  }

  private bool mcc_3R_336() {
    if (mcc_scan_token(PLUS)) return true;
    if (mcc_3R_329()) return true;
    return false;
  }

  private bool mcc_3R_171() {
    if (mcc_scan_token(NUMDOUBLE)) return true;
    return false;
  }

  private bool mcc_3R_322() {
    if (mcc_3R_329()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_330()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_333() {
    if (mcc_scan_token(79)) return true;
    if (mcc_3R_322()) return true;
    return false;
  }

  private bool mcc_3R_332() {
    if (mcc_scan_token(RRANGLE)) return true;
    if (mcc_3R_322()) return true;
    return false;
  }

  private bool mcc_3R_323() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_331()) {
    mcc_scanpos = xsp;
    if (mcc_3R_332()) {
    mcc_scanpos = xsp;
    if (mcc_3R_333()) return true;
    }
    }
    return false;
  }

  private bool mcc_3R_331() {
    if (mcc_scan_token(LLANGLE)) return true;
    if (mcc_3R_322()) return true;
    return false;
  }

  private bool mcc_3R_170() {
    if (mcc_scan_token(NUMFLOAT)) return true;
    return false;
  }

  private bool mcc_3R_316() {
    if (mcc_3R_322()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_323()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_488() {
    if (mcc_scan_token(GREATEREQUAL)) return true;
    return false;
  }

  private bool mcc_3R_209() {
    if (mcc_scan_token(HEXNUMBER_LONG)) return true;
    return false;
  }

  private bool mcc_3R_487() {
    if (mcc_scan_token(LOWEREQUAL)) return true;
    return false;
  }

  private bool mcc_3R_208() {
    if (mcc_scan_token(HEXNUMBER_SHORT)) return true;
    return false;
  }

  private bool mcc_3R_486() {
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3R_207() {
    if (mcc_scan_token(HEXNUMBER_BYTE)) return true;
    return false;
  }

  private bool mcc_3R_485() {
    if (mcc_scan_token(LANGLE)) return true;
    return false;
  }

  private bool mcc_3R_481() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_485()) {
    mcc_scanpos = xsp;
    if (mcc_3R_486()) {
    mcc_scanpos = xsp;
    if (mcc_3R_487()) {
    mcc_scanpos = xsp;
    if (mcc_3R_488()) return true;
    }
    }
    }
    return false;
  }

  private bool mcc_3R_206() {
    if (mcc_scan_token(HEXNUMBER)) return true;
    return false;
  }

  private bool mcc_3R_205() {
    if (mcc_scan_token(NUMBER_LONG)) return true;
    return false;
  }

  private bool mcc_3R_328() {
    if (mcc_scan_token(IN)) return true;
    if (mcc_3R_316()) return true;
    return false;
  }

  private bool mcc_3R_327() {
    if (mcc_scan_token(GREATEREQUAL)) return true;
    if (mcc_3R_316()) return true;
    return false;
  }

  private bool mcc_3R_326() {
    if (mcc_scan_token(LOWEREQUAL)) return true;
    if (mcc_3R_316()) return true;
    return false;
  }

  private bool mcc_3R_325() {
    if (mcc_scan_token(RANGLE)) return true;
    if (mcc_3R_316()) return true;
    return false;
  }

  private bool mcc_3R_318() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_324()) {
    mcc_scanpos = xsp;
    if (mcc_3R_325()) {
    mcc_scanpos = xsp;
    if (mcc_3R_326()) {
    mcc_scanpos = xsp;
    if (mcc_3R_327()) {
    mcc_scanpos = xsp;
    if (mcc_3R_328()) return true;
    }
    }
    }
    }
    return false;
  }

  private bool mcc_3R_324() {
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_316()) return true;
    return false;
  }

  private bool mcc_3R_204() {
    if (mcc_scan_token(NUMBER_SHORT)) return true;
    return false;
  }

  private bool mcc_3R_203() {
    if (mcc_scan_token(NUMBER_BYTE)) return true;
    return false;
  }

  private bool mcc_3R_309() {
    if (mcc_3R_316()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_318()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_169() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_202()) {
    mcc_scanpos = xsp;
    if (mcc_3R_203()) {
    mcc_scanpos = xsp;
    if (mcc_3R_204()) {
    mcc_scanpos = xsp;
    if (mcc_3R_205()) {
    mcc_scanpos = xsp;
    if (mcc_3R_206()) {
    mcc_scanpos = xsp;
    if (mcc_3R_207()) {
    mcc_scanpos = xsp;
    if (mcc_3R_208()) {
    mcc_scanpos = xsp;
    if (mcc_3R_209()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private bool mcc_3R_202() {
    if (mcc_scan_token(NUMBER)) return true;
    return false;
  }

  private bool mcc_3R_321() {
    if (mcc_scan_token(STRUCTURALEQUAL)) return true;
    if (mcc_3R_309()) return true;
    return false;
  }

  private bool mcc_3R_320() {
    if (mcc_scan_token(INEQUALITY)) return true;
    if (mcc_3R_309()) return true;
    return false;
  }

  private bool mcc_3R_315() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_319()) {
    mcc_scanpos = xsp;
    if (mcc_3R_320()) {
    mcc_scanpos = xsp;
    if (mcc_3R_321()) return true;
    }
    }
    return false;
  }

  private bool mcc_3R_319() {
    if (mcc_scan_token(EQUALITY)) return true;
    if (mcc_3R_309()) return true;
    return false;
  }

  private bool mcc_3R_131() {
    if (mcc_scan_token(HEXNUMBER)) return true;
    return false;
  }

  private bool mcc_3R_299() {
    if (mcc_3R_309()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_315()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_308() {
    if (mcc_scan_token(AMPERSAND)) return true;
    if (mcc_3R_299()) return true;
    return false;
  }

  private bool mcc_3R_130() {
    if (mcc_scan_token(NUMBER)) return true;
    return false;
  }

  private bool mcc_3R_80() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_130()) {
    mcc_scanpos = xsp;
    if (mcc_3R_131()) return true;
    }
    return false;
  }

  private bool mcc_3R_296() {
    if (mcc_3R_299()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_308()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_298() {
    if (mcc_scan_token(CIRCUMFLEX)) return true;
    if (mcc_3R_296()) return true;
    return false;
  }

  private bool mcc_3R_78() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(76)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(77)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(78)) return true;
    }
    }
    return false;
  }

  private bool mcc_3R_282() {
    if (mcc_3R_296()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_298()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_287() {
    if (mcc_scan_token(PIPE)) return true;
    if (mcc_3R_282()) return true;
    return false;
  }

  private bool mcc_3R_172() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(76)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(77)) return true;
    }
    return false;
  }

  private bool mcc_3R_235() {
    if (mcc_3R_282()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_287()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_50() {
    if (mcc_scan_token(WORD)) return true;
    return false;
  }

  private bool mcc_3R_254() {
    if (mcc_scan_token(DOUBLEAMPERSAND)) return true;
    if (mcc_3R_235()) return true;
    return false;
  }

  private bool mcc_3R_198() {
    if (mcc_3R_235()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_254()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_120() {
    if (mcc_scan_token(QUESTIONMARK)) return true;
    if (mcc_3R_54()) return true;
    if (mcc_scan_token(COLON)) return true;
    if (mcc_3R_54()) return true;
    return false;
  }

  private bool mcc_3R_201() {
    if (mcc_scan_token(DOUBLEPIPE)) return true;
    if (mcc_3R_198()) return true;
    return false;
  }

  private bool mcc_3R_161() {
    if (mcc_3R_198()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_201()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_168() {
    if (mcc_scan_token(BACKSLASH)) return true;
    if (mcc_3R_161()) return true;
    return false;
  }

  private bool mcc_3R_110() {
    if (mcc_3R_161()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_168()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_54() {
    if (mcc_3R_110()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_120()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3_100() {
    if (mcc_3R_101()) return true;
    if (mcc_scan_token(EQUAL)) return true;
    return false;
  }

  private bool mcc_3_101() {
    if (mcc_3R_54()) return true;
    return false;
  }

  private bool mcc_3_99() {
    if (mcc_3R_87()) return true;
    if (mcc_scan_token(GREATEREQUAL)) return true;
    return false;
  }

  private bool mcc_3R_490() {
    if (mcc_3R_101()) return true;
    if (mcc_scan_token(EQUAL)) return true;
    if (mcc_3R_483()) return true;
    return false;
  }

  private bool mcc_3R_489() {
    if (mcc_3R_87()) return true;
    if (mcc_scan_token(GREATEREQUAL)) return true;
    if (mcc_3R_483()) return true;
    return false;
  }

  private bool mcc_3R_483() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_489()) {
    mcc_scanpos = xsp;
    if (mcc_3R_490()) {
    mcc_scanpos = xsp;
    if (mcc_3_101()) return true;
    }
    }
    return false;
  }

  private bool mcc_3R_281() {
    if (mcc_scan_token(LBOXBRACKET)) return true;
    if (mcc_3R_54()) return true;
    if (mcc_scan_token(RBOXBRACKET)) return true;
    return false;
  }

  private bool mcc_3R_233() {
    return false;
  }

  private bool mcc_3R_232() {
    if (mcc_scan_token(LBOXBRACKET)) return true;
    if (mcc_3R_54()) return true;
    if (mcc_scan_token(RBOXBRACKET)) return true;
    return false;
  }

  private bool mcc_3R_231() {
    if (mcc_scan_token(DOT)) return true;
    if (mcc_scan_token(VISITED)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_281()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_280() {
    if (mcc_scan_token(LBOXBRACKET)) return true;
    if (mcc_3R_54()) return true;
    if (mcc_scan_token(RBOXBRACKET)) return true;
    return false;
  }

  private bool mcc_3_98() {
    if (mcc_scan_token(DOT)) return true;
    if (mcc_3R_50()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_280()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_194() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_98()) {
    mcc_scanpos = xsp;
    if (mcc_3R_231()) {
    mcc_scanpos = xsp;
    if (mcc_3R_232()) {
    mcc_scanpos = xsp;
    if (mcc_3R_233()) return true;
    }
    }
    }
    return false;
  }

  private bool mcc_3R_149() {
    if (mcc_3R_84()) return true;
    if (mcc_3R_194()) return true;
    return false;
  }

  private bool mcc_3_97() {
    if (mcc_3R_87()) return true;
    return false;
  }

  private bool mcc_3R_148() {
    if (mcc_scan_token(YIELD)) return true;
    if (mcc_3R_84()) return true;
    return false;
  }

  private bool mcc_3R_101() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_148()) {
    mcc_scanpos = xsp;
    if (mcc_3_97()) {
    mcc_scanpos = xsp;
    if (mcc_3R_149()) return true;
    }
    }
    return false;
  }

  private bool mcc_3R_307() {
    if (mcc_scan_token(LBRACE)) return true;
    if (mcc_3R_54()) return true;
    if (mcc_scan_token(RBRACE)) return true;
    return false;
  }

  private bool mcc_3R_306() {
    if (mcc_3R_314()) return true;
    return false;
  }

  private bool mcc_3_95() {
    if (mcc_3R_101()) return true;
    if (mcc_scan_token(EQUAL)) return true;
    return false;
  }

  private bool mcc_3_96() {
    if (mcc_3R_87()) return true;
    return false;
  }

  private bool mcc_3_94() {
    if (mcc_3R_87()) return true;
    if (mcc_scan_token(GREATEREQUAL)) return true;
    return false;
  }

  private bool mcc_3R_305() {
    if (mcc_3R_101()) return true;
    if (mcc_scan_token(EQUAL)) return true;
    if (mcc_3R_483()) return true;
    return false;
  }

  private bool mcc_3R_297() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_304()) {
    mcc_scanpos = xsp;
    if (mcc_3R_305()) {
    mcc_scanpos = xsp;
    if (mcc_3_96()) {
    mcc_scanpos = xsp;
    if (mcc_3R_306()) {
    mcc_scanpos = xsp;
    if (mcc_3R_307()) return true;
    }
    }
    }
    }
    return false;
  }

  private bool mcc_3R_304() {
    if (mcc_3R_87()) return true;
    if (mcc_scan_token(GREATEREQUAL)) return true;
    if (mcc_3R_483()) return true;
    return false;
  }

  private bool mcc_3R_469() {
    return false;
  }

  private bool mcc_3R_467() {
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_54()) return true;
    return false;
  }

  private bool mcc_3R_468() {
    if (mcc_scan_token(SEMI)) return true;
    if (mcc_3R_286()) return true;
    return false;
  }

  private bool mcc_3R_286() {
    if (mcc_3R_297()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_468()) {
    mcc_scanpos = xsp;
    if (mcc_3R_469()) return true;
    }
    return false;
  }

  private bool mcc_3R_458() {
    if (mcc_scan_token(LPARENTHESIS)) return true;
    if (mcc_3R_86()) return true;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    if (mcc_scan_token(EQUAL)) return true;
    return false;
  }

  private bool mcc_3R_85() {
    if (mcc_scan_token(IN)) return true;
    if (mcc_3R_54()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_467()) mcc_scanpos = xsp;
    if (mcc_scan_token(LBRACE)) return true;
    if (mcc_3R_284()) return true;
    if (mcc_scan_token(RBRACE)) return true;
    return false;
  }

  private bool mcc_3R_283() {
    if (mcc_scan_token(PERCENT)) return true;
    return false;
  }

  private bool mcc_3R_250() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_283()) mcc_scanpos = xsp;
    if (mcc_scan_token(LBRACE)) return true;
    if (mcc_3R_286()) return true;
    xsp = mcc_scanpos;
    if (mcc_scan_token(46)) mcc_scanpos = xsp;
    if (mcc_scan_token(RBRACE)) return true;
    return false;
  }

  private bool mcc_3R_285() {
    if (mcc_scan_token(LPARENTHESIS)) return true;
    if (mcc_3R_300()) return true;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    if (mcc_scan_token(EQUAL)) return true;
    return false;
  }

  private bool mcc_3_76() {
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_85()) return true;
    return false;
  }

  private bool mcc_3R_249() {
    if (mcc_scan_token(LOCK)) return true;
    if (mcc_scan_token(LPARENTHESIS)) return true;
    if (mcc_3R_54()) return true;
    if (mcc_scan_token(RPARENTHESIS)) return true;
    if (mcc_scan_token(LBRACE)) return true;
    if (mcc_3R_284()) return true;
    if (mcc_scan_token(RBRACE)) return true;
    return false;
  }

  private bool mcc_3R_248() {
    if (mcc_scan_token(PARALLEL)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_285()) mcc_scanpos = xsp;
    if (mcc_3R_85()) return true;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3_76()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3_93() {
    if (mcc_scan_token(PARALLEL)) return true;
    if (mcc_3R_50()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_458()) mcc_scanpos = xsp;
    if (mcc_3R_85()) return true;
    return false;
  }

  private bool mcc_3R_247() {
    if (mcc_3R_85()) return true;
    return false;
  }

  private bool mcc_3R_457() {
    if (mcc_scan_token(IN)) return true;
    if (mcc_scan_token(LBOXBRACKET)) return true;
    if (mcc_3R_54()) return true;
    if (mcc_scan_token(COLON)) return true;
    if (mcc_3R_54()) return true;
    if (mcc_scan_token(RBOXBRACKET)) return true;
    if (mcc_scan_token(SEMI)) return true;
    if (mcc_3R_284()) return true;
    if (mcc_scan_token(RBRACE)) return true;
    return false;
  }

  private bool mcc_3R_83() {
    if (mcc_scan_token(ARROW)) return true;
    if (mcc_3R_86()) return true;
    return false;
  }

  private bool mcc_3_75() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_83()) mcc_scanpos = xsp;
    if (mcc_scan_token(IN)) return true;
    if (mcc_3R_84()) return true;
    if (mcc_scan_token(SEMI)) return true;
    if (mcc_3R_284()) return true;
    if (mcc_scan_token(RBRACE)) return true;
    return false;
  }

  public SequenceParserTokenManager token_source;
  SimpleCharStream mcc_input_stream;
  public Token token, mcc_nt;
  private int mcc_ntk;
  private Token mcc_scanpos, mcc_lastpos;
  private int mcc_la;
  public bool lookingAhead = false;
  private bool mcc_semLA;
  private int mcc_gen;
  private int[] mcc_la1 = new int[221];
  static private int[] mcc_la1_0;
  static private int[] mcc_la1_1;
  static private int[] mcc_la1_2;
  static SequenceParser() {
      mcc_gla1_0();
      mcc_gla1_1();
      mcc_gla1_2();
   }
   private static void mcc_gla1_0() {
      mcc_la1_0 = new int[] {0,0,0,0,0,0,0,0,512,134217728,0,512,134217728,0,512,671088640,0,512,671088640,512,0,0,0,512,512,0,0,0,0,0,0,0,134217728,0,0,1024,0,1024,1024,0,1024,0,1024,0,1024,0,1024,0,1024,448,448,-1392507904,4194304,0,12582912,549453824,549453824,524320,0,0,0,134218752,0,0,0,0,512,0,512,0,512,0,512,0,512,0,1024,512,0,0,0,0,512,-2146697216,0,0,0,134217728,134217728,0,0,0,0,-2013265920,16777216,0,512,0,134217728,0,0,536870912,536870912,536870912,0,33554432,8192,2048,16384,32768,4096,1245184,1245184,-2146697216,-2146697216,-2146697216,0,0,8388608,8388608,20971520,20971520,77594624,536870912,0,134217728,0,512,134217728,0,0,-2147483648,134217728,536870912,0,0,0,134217728,0,-2147483648,0,0,0,0,0,512,33554432,512,33554432,134217728,0,0,134217728,33554432,0,0,0,512,0,0,0,134217728,0,4194304,512,0,1024,0,0,0,536871936,134217728,0,4194304,512,0,1024,0,0,134217728,33554432,0,0,134217728,33554432,0,0,134217728,33554432,536871936,0,134217728,33554432,512,0,134217728,33554432,512,33554432,134217728,0,134217728,33554432,0,0,0,0,0,0,134217728,0,134217728,0,-2147483648,0,0,0,134217728,0,134217728,512,};
   }
   private static void mcc_gla1_1() {
      mcc_la1_1 = new int[] {0,0,0,0,1441792,524288,524288,5,0,8,5,0,8,5,0,0,5,0,0,0,32,64,64,0,0,0,0,5,5,5,5,0,0,32,128,0,128,0,8192,128,0,128,0,128,0,128,0,128,0,0,0,-2031746614,0,32,0,0,0,0,128,128,524352,0,64,128,128,128,0,128,0,128,0,128,0,128,0,128,0,0,49152,49152,5,16384,0,1,0,1024,8388608,0,0,128,16384,33554432,64,0,14680066,-2147483512,0,16384,72,33554432,64,0,0,2048,256,0,0,0,0,0,0,0,0,8388609,8388609,1,6,6,0,0,128,128,0,0,1610612736,134808128,0,0,512,0,0,0,0,2048,0,0,0,0,1610612736,0,5,5,5,5,0,0,0,0,0,0,384,384,0,0,0,32,64,0,0,32,64,0,128,64,0,64,0,384,384,64,67109312,0,128,64,0,64,0,384,384,0,0,384,384,0,0,384,384,0,0,67109312,256,0,0,0,128,0,0,0,0,0,128,0,0,2048,5,0,5,0,8,0,8,0,5,0,5,0,8,0,8,0,0,};
   }
   private static void mcc_gla1_2() {
      mcc_la1_2 = new int[] {12288,28672,272,4080,16374,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16384,16384,0,0,16384,16384,0,0,0,0,16384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16385,0,0,0,0,0,0,0,0,16384,0,16384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16384,0,0,0,0,0,0,0,0,0,0,1,0,0,16384,0,16384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32768,32768,65536,65536,0,0,65536,0,0,16384,16384,0,0,16384,16384,0,0,0,16384,16384,16384,0,0,0,0,0,0,0,16384,0,0,0,0,0,0,0,0,0,16384,0,16384,0,16384,0,16384,0,0,16384,0,16384,0,0,0,16384,16384,0,0,16384,0,16384,0,0,0,0,0,0,0,0,0,0,0,0,0,16384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16384,0,16384,0,0,0,0,0,0,0,16384,0,0,0,0,0,};
   }
  private MccCalls[] mcc_2_rtns = new MccCalls[167];
  private bool mcc_rescan = false;
  private int mcc_gc = 0;

  public SequenceParser(System.IO.Stream stream) {
    mcc_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SequenceParserTokenManager(mcc_input_stream);
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 221; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

  public void ReInit(System.IO.Stream stream) {
    mcc_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(mcc_input_stream);
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 221; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

  public SequenceParser(System.IO.TextReader stream) {
    mcc_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SequenceParserTokenManager(mcc_input_stream);
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 221; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

  public void ReInit(System.IO.TextReader stream) {
    mcc_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(mcc_input_stream);
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 221; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

  public SequenceParser(SequenceParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 221; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

  public void ReInit(SequenceParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 221; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

   private Token mcc_consume_token(int kind) {
    Token oldToken = null;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.GetNextToken();
    mcc_ntk = -1;
    if (token.kind == kind) {
      mcc_gen++;
      if (++mcc_gc > 100) {
        mcc_gc = 0;
        for (int i = 0; i < mcc_2_rtns.Length; i++) {
          MccCalls c = mcc_2_rtns[i];
          while (c != null) {
            if (c.gen < mcc_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    mcc_kind = kind;
    throw GenerateParseException();
  }

  private class LookaheadSuccess : System.Exception { }
  private LookaheadSuccess mcc_ls = new LookaheadSuccess();
  private bool mcc_scan_token(int kind) {
    if (mcc_scanpos == mcc_lastpos) {
      mcc_la--;
      if (mcc_scanpos.next == null) {
        mcc_lastpos = mcc_scanpos = mcc_scanpos.next = token_source.GetNextToken();
      } else {
        mcc_lastpos = mcc_scanpos = mcc_scanpos.next;
      }
    } else {
      mcc_scanpos = mcc_scanpos.next;
    }
    if (mcc_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != mcc_scanpos) { i++; tok = tok.next; }
      if (tok != null) mcc_add_error_token(kind, i);
    }
    if (mcc_scanpos.kind != kind) return true;
    if (mcc_la == 0 && mcc_scanpos == mcc_lastpos) throw mcc_ls;
    return false;
  }

  public Token GetNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.GetNextToken();
    mcc_ntk = -1;
    mcc_gen++;
    return token;
  }

  public Token GetToken(int index) {
    Token t = lookingAhead ? mcc_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.GetNextToken();
    }
    return t;
  }

  private int mcc_mntk() {
    if ((mcc_nt=token.next) == null)
      return (mcc_ntk = (token.next=token_source.GetNextToken()).kind);
    else
      return (mcc_ntk = mcc_nt.kind);
  }

  private System.Collections.ArrayList mcc_expentries = new System.Collections.ArrayList();
  private int[] mcc_expentry;
  private int mcc_kind = -1;
  private int[] mcc_lasttokens = new int[100];
  private int mcc_endpos;

  private void mcc_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == mcc_endpos + 1) {
      mcc_lasttokens[mcc_endpos++] = kind;
    } else if (mcc_endpos != 0) {
      mcc_expentry = new int[mcc_endpos];
      for (int i = 0; i < mcc_endpos; i++) {
        mcc_expentry[i] = mcc_lasttokens[i];
      }
      bool exists = false;
      for (System.Collections.IEnumerator e = mcc_expentries.GetEnumerator(); e.MoveNext();) {
        int[] oldentry = (int[])e.Current;
        if (oldentry.Length == mcc_expentry.Length) {
          exists = true;
          for (int i = 0; i < mcc_expentry.Length; i++) {
            if (oldentry[i] != mcc_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) mcc_expentries.Add(mcc_expentry);
      if (pos != 0) mcc_lasttokens[(mcc_endpos = pos) - 1] = kind;
    }
  }

  public ParseException GenerateParseException() {
    mcc_expentries.Clear();
    bool[] la1tokens = new bool[82];
    for (int i = 0; i < 82; i++) {
      la1tokens[i] = false;
    }
    if (mcc_kind >= 0) {
      la1tokens[mcc_kind] = true;
      mcc_kind = -1;
    }
    for (int i = 0; i < 221; i++) {
      if (mcc_la1[i] == mcc_gen) {
        for (int j = 0; j < 32; j++) {
          if ((mcc_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((mcc_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((mcc_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 82; i++) {
      if (la1tokens[i]) {
        mcc_expentry = new int[1];
        mcc_expentry[0] = i;
        mcc_expentries.Add(mcc_expentry);
      }
    }
    mcc_endpos = 0;
    mcc_rescan_token();
    mcc_add_error_token(0, 0);
    int[][] exptokseq = new int[mcc_expentries.Count][];
    for (int i = 0; i < mcc_expentries.Count; i++) {
      exptokseq[i] = (int[])mcc_expentries[i];
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  public void enable_tracing() {
  }

  public void disable_tracing() {
  }

  private void mcc_rescan_token() {
    mcc_rescan = true;
    for (int i = 0; i < 167; i++) {
      MccCalls p = mcc_2_rtns[i];
      do {
        if (p.gen > mcc_gen) {
          mcc_la = p.arg; mcc_lastpos = mcc_scanpos = p.first;
          switch (i) {
            case 0: mcc_3_1(); break;
            case 1: mcc_3_2(); break;
            case 2: mcc_3_3(); break;
            case 3: mcc_3_4(); break;
            case 4: mcc_3_5(); break;
            case 5: mcc_3_6(); break;
            case 6: mcc_3_7(); break;
            case 7: mcc_3_8(); break;
            case 8: mcc_3_9(); break;
            case 9: mcc_3_10(); break;
            case 10: mcc_3_11(); break;
            case 11: mcc_3_12(); break;
            case 12: mcc_3_13(); break;
            case 13: mcc_3_14(); break;
            case 14: mcc_3_15(); break;
            case 15: mcc_3_16(); break;
            case 16: mcc_3_17(); break;
            case 17: mcc_3_18(); break;
            case 18: mcc_3_19(); break;
            case 19: mcc_3_20(); break;
            case 20: mcc_3_21(); break;
            case 21: mcc_3_22(); break;
            case 22: mcc_3_23(); break;
            case 23: mcc_3_24(); break;
            case 24: mcc_3_25(); break;
            case 25: mcc_3_26(); break;
            case 26: mcc_3_27(); break;
            case 27: mcc_3_28(); break;
            case 28: mcc_3_29(); break;
            case 29: mcc_3_30(); break;
            case 30: mcc_3_31(); break;
            case 31: mcc_3_32(); break;
            case 32: mcc_3_33(); break;
            case 33: mcc_3_34(); break;
            case 34: mcc_3_35(); break;
            case 35: mcc_3_36(); break;
            case 36: mcc_3_37(); break;
            case 37: mcc_3_38(); break;
            case 38: mcc_3_39(); break;
            case 39: mcc_3_40(); break;
            case 40: mcc_3_41(); break;
            case 41: mcc_3_42(); break;
            case 42: mcc_3_43(); break;
            case 43: mcc_3_44(); break;
            case 44: mcc_3_45(); break;
            case 45: mcc_3_46(); break;
            case 46: mcc_3_47(); break;
            case 47: mcc_3_48(); break;
            case 48: mcc_3_49(); break;
            case 49: mcc_3_50(); break;
            case 50: mcc_3_51(); break;
            case 51: mcc_3_52(); break;
            case 52: mcc_3_53(); break;
            case 53: mcc_3_54(); break;
            case 54: mcc_3_55(); break;
            case 55: mcc_3_56(); break;
            case 56: mcc_3_57(); break;
            case 57: mcc_3_58(); break;
            case 58: mcc_3_59(); break;
            case 59: mcc_3_60(); break;
            case 60: mcc_3_61(); break;
            case 61: mcc_3_62(); break;
            case 62: mcc_3_63(); break;
            case 63: mcc_3_64(); break;
            case 64: mcc_3_65(); break;
            case 65: mcc_3_66(); break;
            case 66: mcc_3_67(); break;
            case 67: mcc_3_68(); break;
            case 68: mcc_3_69(); break;
            case 69: mcc_3_70(); break;
            case 70: mcc_3_71(); break;
            case 71: mcc_3_72(); break;
            case 72: mcc_3_73(); break;
            case 73: mcc_3_74(); break;
            case 74: mcc_3_75(); break;
            case 75: mcc_3_76(); break;
            case 76: mcc_3_77(); break;
            case 77: mcc_3_78(); break;
            case 78: mcc_3_79(); break;
            case 79: mcc_3_80(); break;
            case 80: mcc_3_81(); break;
            case 81: mcc_3_82(); break;
            case 82: mcc_3_83(); break;
            case 83: mcc_3_84(); break;
            case 84: mcc_3_85(); break;
            case 85: mcc_3_86(); break;
            case 86: mcc_3_87(); break;
            case 87: mcc_3_88(); break;
            case 88: mcc_3_89(); break;
            case 89: mcc_3_90(); break;
            case 90: mcc_3_91(); break;
            case 91: mcc_3_92(); break;
            case 92: mcc_3_93(); break;
            case 93: mcc_3_94(); break;
            case 94: mcc_3_95(); break;
            case 95: mcc_3_96(); break;
            case 96: mcc_3_97(); break;
            case 97: mcc_3_98(); break;
            case 98: mcc_3_99(); break;
            case 99: mcc_3_100(); break;
            case 100: mcc_3_101(); break;
            case 101: mcc_3_102(); break;
            case 102: mcc_3_103(); break;
            case 103: mcc_3_104(); break;
            case 104: mcc_3_105(); break;
            case 105: mcc_3_106(); break;
            case 106: mcc_3_107(); break;
            case 107: mcc_3_108(); break;
            case 108: mcc_3_109(); break;
            case 109: mcc_3_110(); break;
            case 110: mcc_3_111(); break;
            case 111: mcc_3_112(); break;
            case 112: mcc_3_113(); break;
            case 113: mcc_3_114(); break;
            case 114: mcc_3_115(); break;
            case 115: mcc_3_116(); break;
            case 116: mcc_3_117(); break;
            case 117: mcc_3_118(); break;
            case 118: mcc_3_119(); break;
            case 119: mcc_3_120(); break;
            case 120: mcc_3_121(); break;
            case 121: mcc_3_122(); break;
            case 122: mcc_3_123(); break;
            case 123: mcc_3_124(); break;
            case 124: mcc_3_125(); break;
            case 125: mcc_3_126(); break;
            case 126: mcc_3_127(); break;
            case 127: mcc_3_128(); break;
            case 128: mcc_3_129(); break;
            case 129: mcc_3_130(); break;
            case 130: mcc_3_131(); break;
            case 131: mcc_3_132(); break;
            case 132: mcc_3_133(); break;
            case 133: mcc_3_134(); break;
            case 134: mcc_3_135(); break;
            case 135: mcc_3_136(); break;
            case 136: mcc_3_137(); break;
            case 137: mcc_3_138(); break;
            case 138: mcc_3_139(); break;
            case 139: mcc_3_140(); break;
            case 140: mcc_3_141(); break;
            case 141: mcc_3_142(); break;
            case 142: mcc_3_143(); break;
            case 143: mcc_3_144(); break;
            case 144: mcc_3_145(); break;
            case 145: mcc_3_146(); break;
            case 146: mcc_3_147(); break;
            case 147: mcc_3_148(); break;
            case 148: mcc_3_149(); break;
            case 149: mcc_3_150(); break;
            case 150: mcc_3_151(); break;
            case 151: mcc_3_152(); break;
            case 152: mcc_3_153(); break;
            case 153: mcc_3_154(); break;
            case 154: mcc_3_155(); break;
            case 155: mcc_3_156(); break;
            case 156: mcc_3_157(); break;
            case 157: mcc_3_158(); break;
            case 158: mcc_3_159(); break;
            case 159: mcc_3_160(); break;
            case 160: mcc_3_161(); break;
            case 161: mcc_3_162(); break;
            case 162: mcc_3_163(); break;
            case 163: mcc_3_164(); break;
            case 164: mcc_3_165(); break;
            case 165: mcc_3_166(); break;
            case 166: mcc_3_167(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    mcc_rescan = false;
  }

  private void mcc_save(int index, int xla) {
    MccCalls p = mcc_2_rtns[index];
    while (p.gen > mcc_gen) {
      if (p.next == null) { p = p.next = new MccCalls(); break; }
      p = p.next;
    }
    p.gen = mcc_gen + xla - mcc_la; p.first = token; p.arg = xla;
  }

  class MccCalls {
    public int gen;
    public Token first;
    public int arg;
    public MccCalls next;
  }

    }
}
